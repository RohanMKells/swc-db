/*
 * Copyright Since 2019 SWC-DBÂ© [author: Kashirin Alex kashirin.alex@gmail.com]
 * License details at <https://github.com/kashirin-alex/swc-db/#license>
 */


package org.swcdb.thrift;


import org.apache.thrift.TException;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TNonblockingTransport;
import org.apache.thrift.transport.TTransportException;
import org.apache.thrift.protocol.TProtocolFactory;
import org.apache.thrift.protocol.TBinaryProtocol;

import org.swcdb.thrift.gen.*;


public class AsyncClient extends Service.AsyncClient {

  public static AsyncClient create(String host, int port, int timeout_ms,
                              boolean do_open, int max_framesize)
                              throws TTransportException, TException {
    return new AsyncClient(
      new TNonblockingTransport(
        new TSocket(host, port, timeout_ms), max_framesize), 
        do_open);
  }

  public static AsyncClient create(String host, int port, int timeout_ms,
                                   boolean do_open)
                                   throws TTransportException, TException {
    return new AsyncClient(
      new TNonblockingTransport(
        new TSocket(host, port, timeout_ms)), 
        do_open);
  }

  public static AsyncClient create(String host, int port, boolean do_open)
                                   throws TTransportException, TException {
    return new AsyncClient(
      new TNonblockingTransport(
        new TSocket(host, port)), 
        do_open);
  }


  public AsyncClient(TProtocolFactory      protocolFactory,
                     TAsyncClientManager   clientManager,
                     TNonblockingTransport transport,
                     boolean do_open) throws TTransportException, TException {                  
    super(protocolFactory, clientManager, transport);
    // ? new TBinaryProtocol(transport) 
    this.protocolFactory = protocolFactory;
    this.clientManager = clientManager;
    this.transport = transport;
    if(do_open)
      this.transport.open();
  }

  void open() throws TTransportException, TException {
    if(!transport.isOpen())
      transport.open();
  }

  void close() {
    try {
      if(transport.isOpen())
        transport.close();
    } catch (Exception e) { }
  }

  private TNonblockingTransport transport;
  private TProtocolFactory      protocolFactory;
  private TAsyncClientManager   clientManager;

}
