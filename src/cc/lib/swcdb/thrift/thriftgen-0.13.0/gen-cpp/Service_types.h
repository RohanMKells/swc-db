/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_TYPES_H
#define Service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace SWC { namespace Thrift {

struct ColumnMng {
  enum type {
    CREATE = 3,
    DELETE = 5,
    MODIFY = 7
  };
};

extern const std::map<int, const char*> _ColumnMng_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ColumnMng::type& val);

std::string to_string(const ColumnMng::type& val);

struct ColumnType {
  enum type {
    UNKNOWN = 0,
    PLAIN = 1,
    COUNTER_I64 = 2,
    COUNTER_I32 = 3,
    COUNTER_I16 = 4,
    COUNTER_I8 = 5,
    CELL_DEFINED = 15
  };
};

extern const std::map<int, const char*> _ColumnType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const ColumnType::type& val);

std::string to_string(const ColumnType::type& val);

struct EncodingType {
  enum type {
    DEFAULT = 0,
    PLAIN = 1,
    ZLIB = 2,
    SNAPPY = 3
  };
};

extern const std::map<int, const char*> _EncodingType_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const EncodingType::type& val);

std::string to_string(const EncodingType::type& val);

struct Flag {
  enum type {
    NONE = 0,
    INSERT = 1,
    DELETE = 2,
    DELETE_VERSION = 3
  };
};

extern const std::map<int, const char*> _Flag_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Flag::type& val);

std::string to_string(const Flag::type& val);

typedef std::vector<class Schema>  Schemas;

typedef std::vector<std::string>  Key;

typedef std::vector<class Cell>  Cells;

typedef std::vector<class ColumnMapCell>  ColumnMapCells;

typedef std::map<std::string, ColumnMapCells>  ColumnsMapCells;

typedef std::vector<class KeyCells>  KeysCells;

class Exception;

class Schema;

class Cell;

class ColumnMapCell;

class KeyCell;

class KeyCells;

class FractionCell;

class FractionCells;

typedef struct _Exception__isset {
  _Exception__isset() : code(false), message(false) {}
  bool code :1;
  bool message :1;
} _Exception__isset;

class Exception : public ::apache::thrift::TException {
 public:

  Exception(const Exception&);
  Exception& operator=(const Exception&);
  Exception() : code(0), message() {
  }

  virtual ~Exception() noexcept;
  int32_t code;
  std::string message;

  _Exception__isset __isset;

  void __set_code(const int32_t val);

  void __set_message(const std::string& val);

  bool operator == (const Exception & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const Exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Exception & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(Exception &a, Exception &b);

std::ostream& operator<<(std::ostream& out, const Exception& obj);

typedef struct _Schema__isset {
  _Schema__isset() : cid(false), col_name(false), col_type(false), cell_versions(false), cell_ttl(false), blk_replication(false), blk_encoding(false), blk_size(false), blk_cells(false), cs_size(false), cs_max(false), compact_percent(false), revision(false) {}
  bool cid :1;
  bool col_name :1;
  bool col_type :1;
  bool cell_versions :1;
  bool cell_ttl :1;
  bool blk_replication :1;
  bool blk_encoding :1;
  bool blk_size :1;
  bool blk_cells :1;
  bool cs_size :1;
  bool cs_max :1;
  bool compact_percent :1;
  bool revision :1;
} _Schema__isset;

class Schema : public virtual ::apache::thrift::TBase {
 public:

  Schema(const Schema&);
  Schema& operator=(const Schema&);
  Schema() : cid(0), col_name(), col_type((ColumnType::type)0), cell_versions(0), cell_ttl(0), blk_replication(0), blk_encoding((EncodingType::type)0), blk_size(0), blk_cells(0), cs_size(0), cs_max(0), compact_percent(0), revision(0) {
  }

  virtual ~Schema() noexcept;
  int64_t cid;
  std::string col_name;
  ColumnType::type col_type;
  int32_t cell_versions;
  int32_t cell_ttl;
  int8_t blk_replication;
  EncodingType::type blk_encoding;
  int32_t blk_size;
  int32_t blk_cells;
  int32_t cs_size;
  int8_t cs_max;
  int8_t compact_percent;
  int64_t revision;

  _Schema__isset __isset;

  void __set_cid(const int64_t val);

  void __set_col_name(const std::string& val);

  void __set_col_type(const ColumnType::type val);

  void __set_cell_versions(const int32_t val);

  void __set_cell_ttl(const int32_t val);

  void __set_blk_replication(const int8_t val);

  void __set_blk_encoding(const EncodingType::type val);

  void __set_blk_size(const int32_t val);

  void __set_blk_cells(const int32_t val);

  void __set_cs_size(const int32_t val);

  void __set_cs_max(const int8_t val);

  void __set_compact_percent(const int8_t val);

  void __set_revision(const int64_t val);

  bool operator == (const Schema & rhs) const
  {
    if (__isset.cid != rhs.__isset.cid)
      return false;
    else if (__isset.cid && !(cid == rhs.cid))
      return false;
    if (__isset.col_name != rhs.__isset.col_name)
      return false;
    else if (__isset.col_name && !(col_name == rhs.col_name))
      return false;
    if (__isset.col_type != rhs.__isset.col_type)
      return false;
    else if (__isset.col_type && !(col_type == rhs.col_type))
      return false;
    if (__isset.cell_versions != rhs.__isset.cell_versions)
      return false;
    else if (__isset.cell_versions && !(cell_versions == rhs.cell_versions))
      return false;
    if (__isset.cell_ttl != rhs.__isset.cell_ttl)
      return false;
    else if (__isset.cell_ttl && !(cell_ttl == rhs.cell_ttl))
      return false;
    if (__isset.blk_replication != rhs.__isset.blk_replication)
      return false;
    else if (__isset.blk_replication && !(blk_replication == rhs.blk_replication))
      return false;
    if (__isset.blk_encoding != rhs.__isset.blk_encoding)
      return false;
    else if (__isset.blk_encoding && !(blk_encoding == rhs.blk_encoding))
      return false;
    if (__isset.blk_size != rhs.__isset.blk_size)
      return false;
    else if (__isset.blk_size && !(blk_size == rhs.blk_size))
      return false;
    if (__isset.blk_cells != rhs.__isset.blk_cells)
      return false;
    else if (__isset.blk_cells && !(blk_cells == rhs.blk_cells))
      return false;
    if (__isset.cs_size != rhs.__isset.cs_size)
      return false;
    else if (__isset.cs_size && !(cs_size == rhs.cs_size))
      return false;
    if (__isset.cs_max != rhs.__isset.cs_max)
      return false;
    else if (__isset.cs_max && !(cs_max == rhs.cs_max))
      return false;
    if (__isset.compact_percent != rhs.__isset.compact_percent)
      return false;
    else if (__isset.compact_percent && !(compact_percent == rhs.compact_percent))
      return false;
    if (__isset.revision != rhs.__isset.revision)
      return false;
    else if (__isset.revision && !(revision == rhs.revision))
      return false;
    return true;
  }
  bool operator != (const Schema &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Schema & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Schema &a, Schema &b);

std::ostream& operator<<(std::ostream& out, const Schema& obj);

typedef struct _Cell__isset {
  _Cell__isset() : c(false), k(false), ts(false), v(false) {}
  bool c :1;
  bool k :1;
  bool ts :1;
  bool v :1;
} _Cell__isset;

class Cell : public virtual ::apache::thrift::TBase {
 public:

  Cell(const Cell&);
  Cell& operator=(const Cell&);
  Cell() : c(), ts(0), v() {
  }

  virtual ~Cell() noexcept;
  std::string c;
  Key k;
  int64_t ts;
  std::string v;

  _Cell__isset __isset;

  void __set_c(const std::string& val);

  void __set_k(const Key& val);

  void __set_ts(const int64_t val);

  void __set_v(const std::string& val);

  bool operator == (const Cell & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (__isset.v != rhs.__isset.v)
      return false;
    else if (__isset.v && !(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const Cell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Cell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Cell &a, Cell &b);

std::ostream& operator<<(std::ostream& out, const Cell& obj);

typedef struct _ColumnMapCell__isset {
  _ColumnMapCell__isset() : k(false), ts(false), v(false) {}
  bool k :1;
  bool ts :1;
  bool v :1;
} _ColumnMapCell__isset;

class ColumnMapCell : public virtual ::apache::thrift::TBase {
 public:

  ColumnMapCell(const ColumnMapCell&);
  ColumnMapCell& operator=(const ColumnMapCell&);
  ColumnMapCell() : ts(0), v() {
  }

  virtual ~ColumnMapCell() noexcept;
  Key k;
  int64_t ts;
  std::string v;

  _ColumnMapCell__isset __isset;

  void __set_k(const Key& val);

  void __set_ts(const int64_t val);

  void __set_v(const std::string& val);

  bool operator == (const ColumnMapCell & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (__isset.v != rhs.__isset.v)
      return false;
    else if (__isset.v && !(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const ColumnMapCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ColumnMapCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ColumnMapCell &a, ColumnMapCell &b);

std::ostream& operator<<(std::ostream& out, const ColumnMapCell& obj);

typedef struct _KeyCell__isset {
  _KeyCell__isset() : c(false), ts(false), v(false) {}
  bool c :1;
  bool ts :1;
  bool v :1;
} _KeyCell__isset;

class KeyCell : public virtual ::apache::thrift::TBase {
 public:

  KeyCell(const KeyCell&);
  KeyCell& operator=(const KeyCell&);
  KeyCell() : c(), ts(0), v() {
  }

  virtual ~KeyCell() noexcept;
  std::string c;
  int64_t ts;
  std::string v;

  _KeyCell__isset __isset;

  void __set_c(const std::string& val);

  void __set_ts(const int64_t val);

  void __set_v(const std::string& val);

  bool operator == (const KeyCell & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (__isset.v != rhs.__isset.v)
      return false;
    else if (__isset.v && !(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const KeyCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyCell &a, KeyCell &b);

std::ostream& operator<<(std::ostream& out, const KeyCell& obj);

typedef struct _KeyCells__isset {
  _KeyCells__isset() : k(false), cells(false) {}
  bool k :1;
  bool cells :1;
} _KeyCells__isset;

class KeyCells : public virtual ::apache::thrift::TBase {
 public:

  KeyCells(const KeyCells&);
  KeyCells& operator=(const KeyCells&);
  KeyCells() {
  }

  virtual ~KeyCells() noexcept;
  Key k;
  std::vector<KeyCell>  cells;

  _KeyCells__isset __isset;

  void __set_k(const Key& val);

  void __set_cells(const std::vector<KeyCell> & val);

  bool operator == (const KeyCells & rhs) const
  {
    if (!(k == rhs.k))
      return false;
    if (!(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const KeyCells &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KeyCells & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KeyCells &a, KeyCells &b);

std::ostream& operator<<(std::ostream& out, const KeyCells& obj);

typedef struct _FractionCell__isset {
  _FractionCell__isset() : c(false), ts(false), v(false) {}
  bool c :1;
  bool ts :1;
  bool v :1;
} _FractionCell__isset;

class FractionCell : public virtual ::apache::thrift::TBase {
 public:

  FractionCell(const FractionCell&);
  FractionCell& operator=(const FractionCell&);
  FractionCell() : c(), ts(0), v() {
  }

  virtual ~FractionCell() noexcept;
  std::string c;
  int64_t ts;
  std::string v;

  _FractionCell__isset __isset;

  void __set_c(const std::string& val);

  void __set_ts(const int64_t val);

  void __set_v(const std::string& val);

  bool operator == (const FractionCell & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    if (!(ts == rhs.ts))
      return false;
    if (__isset.v != rhs.__isset.v)
      return false;
    else if (__isset.v && !(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const FractionCell &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FractionCell & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FractionCell &a, FractionCell &b);

std::ostream& operator<<(std::ostream& out, const FractionCell& obj);

typedef struct _FractionCells__isset {
  _FractionCells__isset() : f(false), cells(false) {}
  bool f :1;
  bool cells :1;
} _FractionCells__isset;

class FractionCells : public virtual ::apache::thrift::TBase {
 public:

  FractionCells(const FractionCells&);
  FractionCells& operator=(const FractionCells&);
  FractionCells() {
  }

  virtual ~FractionCells() noexcept;
  std::map<std::string, FractionCells>  f;
  std::vector<FractionCell>  cells;

  _FractionCells__isset __isset;

  void __set_f(const std::map<std::string, FractionCells> & val);

  void __set_cells(const std::vector<FractionCell> & val);

  bool operator == (const FractionCells & rhs) const
  {
    if (!(f == rhs.f))
      return false;
    if (__isset.cells != rhs.__isset.cells)
      return false;
    else if (__isset.cells && !(cells == rhs.cells))
      return false;
    return true;
  }
  bool operator != (const FractionCells &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FractionCells & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FractionCells &a, FractionCells &b);

std::ostream& operator<<(std::ostream& out, const FractionCells& obj);

}} // namespace

#endif
