/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public static class ServiceExtensions
{
  public static bool Equals(this Dictionary<byte[], FCells> instance, object that)
  {
    if (!(that is Dictionary<byte[], FCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<byte[], FCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<byte[], FCells> DeepCopy(this Dictionary<byte[], FCells> source)
  {
    if (source == null)
      return null;

    var tmp981 = new Dictionary<byte[], FCells>(source.Count);
    foreach (var pair in source)
      tmp981.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp981;
  }


  public static bool Equals(this Dictionary<long, List<UCell>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCell>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCell>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCell>> DeepCopy(this Dictionary<long, List<UCell>> source)
  {
    if (source == null)
      return null;

    var tmp982 = new Dictionary<long, List<UCell>>(source.Count);
    foreach (var pair in source)
      tmp982.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp982;
  }


  public static bool Equals(this Dictionary<long, List<UCellSerial>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCellSerial>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCellSerial>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCellSerial>> DeepCopy(this Dictionary<long, List<UCellSerial>> source)
  {
    if (source == null)
      return null;

    var tmp983 = new Dictionary<long, List<UCellSerial>>(source.Count);
    foreach (var pair in source)
      tmp983.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp983;
  }


  public static bool Equals(this Dictionary<string, ColCells> instance, object that)
  {
    if (!(that is Dictionary<string, ColCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, ColCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, ColCells> DeepCopy(this Dictionary<string, ColCells> source)
  {
    if (source == null)
      return null;

    var tmp984 = new Dictionary<string, ColCells>(source.Count);
    foreach (var pair in source)
      tmp984.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp984;
  }


  public static bool Equals(this List<CCell> instance, object that)
  {
    if (!(that is List<CCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCell> DeepCopy(this List<CCell> source)
  {
    if (source == null)
      return null;

    var tmp985 = new List<CCell>(source.Count);
    foreach (var elem in source)
      tmp985.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp985;
  }


  public static bool Equals(this List<CCellSerial> instance, object that)
  {
    if (!(that is List<CCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCellSerial> DeepCopy(this List<CCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp986 = new List<CCellSerial>(source.Count);
    foreach (var elem in source)
      tmp986.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp986;
  }


  public static bool Equals(this List<Cell> instance, object that)
  {
    if (!(that is List<Cell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Cell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Cell> DeepCopy(this List<Cell> source)
  {
    if (source == null)
      return null;

    var tmp987 = new List<Cell>(source.Count);
    foreach (var elem in source)
      tmp987.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp987;
  }


  public static bool Equals(this List<CellSerial> instance, object that)
  {
    if (!(that is List<CellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellSerial> DeepCopy(this List<CellSerial> source)
  {
    if (source == null)
      return null;

    var tmp988 = new List<CellSerial>(source.Count);
    foreach (var elem in source)
      tmp988.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp988;
  }


  public static bool Equals(this List<CellValueSerial> instance, object that)
  {
    if (!(that is List<CellValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellValueSerial> DeepCopy(this List<CellValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp989 = new List<CellValueSerial>(source.Count);
    foreach (var elem in source)
      tmp989.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp989;
  }


  public static bool Equals(this List<CellValueSerialOp> instance, object that)
  {
    if (!(that is List<CellValueSerialOp> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellValueSerialOp> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellValueSerialOp> DeepCopy(this List<CellValueSerialOp> source)
  {
    if (source == null)
      return null;

    var tmp990 = new List<CellValueSerialOp>(source.Count);
    foreach (var elem in source)
      tmp990.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp990;
  }


  public static bool Equals(this List<CompactResult> instance, object that)
  {
    if (!(that is List<CompactResult> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CompactResult> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CompactResult> DeepCopy(this List<CompactResult> source)
  {
    if (source == null)
      return null;

    var tmp991 = new List<CompactResult>(source.Count);
    foreach (var elem in source)
      tmp991.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp991;
  }


  public static bool Equals(this List<FCell> instance, object that)
  {
    if (!(that is List<FCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCell> DeepCopy(this List<FCell> source)
  {
    if (source == null)
      return null;

    var tmp992 = new List<FCell>(source.Count);
    foreach (var elem in source)
      tmp992.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp992;
  }


  public static bool Equals(this List<FCellSerial> instance, object that)
  {
    if (!(that is List<FCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCellSerial> DeepCopy(this List<FCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp993 = new List<FCellSerial>(source.Count);
    foreach (var elem in source)
      tmp993.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp993;
  }


  public static bool Equals(this List<FU_BYTES> instance, object that)
  {
    if (!(that is List<FU_BYTES> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FU_BYTES> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FU_BYTES> DeepCopy(this List<FU_BYTES> source)
  {
    if (source == null)
      return null;

    var tmp994 = new List<FU_BYTES>(source.Count);
    foreach (var elem in source)
      tmp994.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp994;
  }


  public static bool Equals(this List<FU_INT64> instance, object that)
  {
    if (!(that is List<FU_INT64> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FU_INT64> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FU_INT64> DeepCopy(this List<FU_INT64> source)
  {
    if (source == null)
      return null;

    var tmp995 = new List<FU_INT64>(source.Count);
    foreach (var elem in source)
      tmp995.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp995;
  }


  public static bool Equals(this List<KCell> instance, object that)
  {
    if (!(that is List<KCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCell> DeepCopy(this List<KCell> source)
  {
    if (source == null)
      return null;

    var tmp996 = new List<KCell>(source.Count);
    foreach (var elem in source)
      tmp996.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp996;
  }


  public static bool Equals(this List<KCellSerial> instance, object that)
  {
    if (!(that is List<KCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCellSerial> DeepCopy(this List<KCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp997 = new List<KCellSerial>(source.Count);
    foreach (var elem in source)
      tmp997.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp997;
  }


  public static bool Equals(this List<Schema> instance, object that)
  {
    if (!(that is List<Schema> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Schema> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Schema> DeepCopy(this List<Schema> source)
  {
    if (source == null)
      return null;

    var tmp998 = new List<Schema>(source.Count);
    foreach (var elem in source)
      tmp998.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp998;
  }


  public static bool Equals(this List<SchemaPattern> instance, object that)
  {
    if (!(that is List<SchemaPattern> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SchemaPattern> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SchemaPattern> DeepCopy(this List<SchemaPattern> source)
  {
    if (source == null)
      return null;

    var tmp999 = new List<SchemaPattern>(source.Count);
    foreach (var elem in source)
      tmp999.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp999;
  }


  public static bool Equals(this List<SpecColumn> instance, object that)
  {
    if (!(that is List<SpecColumn> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumn> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumn> DeepCopy(this List<SpecColumn> source)
  {
    if (source == null)
      return null;

    var tmp1000 = new List<SpecColumn>(source.Count);
    foreach (var elem in source)
      tmp1000.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1000;
  }


  public static bool Equals(this List<SpecColumnSerial> instance, object that)
  {
    if (!(that is List<SpecColumnSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumnSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumnSerial> DeepCopy(this List<SpecColumnSerial> source)
  {
    if (source == null)
      return null;

    var tmp1001 = new List<SpecColumnSerial>(source.Count);
    foreach (var elem in source)
      tmp1001.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1001;
  }


  public static bool Equals(this List<SpecFraction> instance, object that)
  {
    if (!(that is List<SpecFraction> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecFraction> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecFraction> DeepCopy(this List<SpecFraction> source)
  {
    if (source == null)
      return null;

    var tmp1002 = new List<SpecFraction>(source.Count);
    foreach (var elem in source)
      tmp1002.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1002;
  }


  public static bool Equals(this List<SpecInterval> instance, object that)
  {
    if (!(that is List<SpecInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecInterval> DeepCopy(this List<SpecInterval> source)
  {
    if (source == null)
      return null;

    var tmp1003 = new List<SpecInterval>(source.Count);
    foreach (var elem in source)
      tmp1003.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1003;
  }


  public static bool Equals(this List<SpecIntervalSerial> instance, object that)
  {
    if (!(that is List<SpecIntervalSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecIntervalSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecIntervalSerial> DeepCopy(this List<SpecIntervalSerial> source)
  {
    if (source == null)
      return null;

    var tmp1004 = new List<SpecIntervalSerial>(source.Count);
    foreach (var elem in source)
      tmp1004.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1004;
  }


  public static bool Equals(this List<SpecKeyInterval> instance, object that)
  {
    if (!(that is List<SpecKeyInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecKeyInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecKeyInterval> DeepCopy(this List<SpecKeyInterval> source)
  {
    if (source == null)
      return null;

    var tmp1005 = new List<SpecKeyInterval>(source.Count);
    foreach (var elem in source)
      tmp1005.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1005;
  }


  public static bool Equals(this List<SpecValue> instance, object that)
  {
    if (!(that is List<SpecValue> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValue> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValue> DeepCopy(this List<SpecValue> source)
  {
    if (source == null)
      return null;

    var tmp1006 = new List<SpecValue>(source.Count);
    foreach (var elem in source)
      tmp1006.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1006;
  }


  public static bool Equals(this List<SpecValueSerial> instance, object that)
  {
    if (!(that is List<SpecValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial> DeepCopy(this List<SpecValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp1007 = new List<SpecValueSerial>(source.Count);
    foreach (var elem in source)
      tmp1007.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1007;
  }


  public static bool Equals(this List<SpecValueSerialField> instance, object that)
  {
    if (!(that is List<SpecValueSerialField> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerialField> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerialField> DeepCopy(this List<SpecValueSerialField> source)
  {
    if (source == null)
      return null;

    var tmp1008 = new List<SpecValueSerialField>(source.Count);
    foreach (var elem in source)
      tmp1008.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1008;
  }


  public static bool Equals(this List<SpecValueSerial_BYTES> instance, object that)
  {
    if (!(that is List<SpecValueSerial_BYTES> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_BYTES> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_BYTES> DeepCopy(this List<SpecValueSerial_BYTES> source)
  {
    if (source == null)
      return null;

    var tmp1009 = new List<SpecValueSerial_BYTES>(source.Count);
    foreach (var elem in source)
      tmp1009.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1009;
  }


  public static bool Equals(this List<SpecValueSerial_INT64> instance, object that)
  {
    if (!(that is List<SpecValueSerial_INT64> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_INT64> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_INT64> DeepCopy(this List<SpecValueSerial_INT64> source)
  {
    if (source == null)
      return null;

    var tmp1010 = new List<SpecValueSerial_INT64>(source.Count);
    foreach (var elem in source)
      tmp1010.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1010;
  }


  public static bool Equals(this List<UCell> instance, object that)
  {
    if (!(that is List<UCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCell> DeepCopy(this List<UCell> source)
  {
    if (source == null)
      return null;

    var tmp1011 = new List<UCell>(source.Count);
    foreach (var elem in source)
      tmp1011.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1011;
  }


  public static bool Equals(this List<UCellSerial> instance, object that)
  {
    if (!(that is List<UCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCellSerial> DeepCopy(this List<UCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1012 = new List<UCellSerial>(source.Count);
    foreach (var elem in source)
      tmp1012.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1012;
  }


  public static bool Equals(this List<byte[]> instance, object that)
  {
    if (!(that is List<byte[]> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<byte[]> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<byte[]> DeepCopy(this List<byte[]> source)
  {
    if (source == null)
      return null;

    var tmp1013 = new List<byte[]>(source.Count);
    foreach (var elem in source)
      tmp1013.Add((elem != null) ? elem.ToArray() : null);
    return tmp1013;
  }


  public static bool Equals(this List<kCells> instance, object that)
  {
    if (!(that is List<kCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<kCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<kCells> DeepCopy(this List<kCells> source)
  {
    if (source == null)
      return null;

    var tmp1014 = new List<kCells>(source.Count);
    foreach (var elem in source)
      tmp1014.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1014;
  }


  public static bool Equals(this List<long> instance, object that)
  {
    if (!(that is List<long> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<long> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<long> DeepCopy(this List<long> source)
  {
    if (source == null)
      return null;

    var tmp1015 = new List<long>(source.Count);
    foreach (var elem in source)
      tmp1015.Add(elem);
    return tmp1015;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<string> DeepCopy(this List<string> source)
  {
    if (source == null)
      return null;

    var tmp1016 = new List<string>(source.Count);
    foreach (var elem in source)
      tmp1016.Add((elem != null) ? elem : null);
    return tmp1016;
  }


}
