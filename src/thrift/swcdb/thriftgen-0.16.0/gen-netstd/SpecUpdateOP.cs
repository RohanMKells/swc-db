/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


public partial class SpecUpdateOP : TBase
{
  private UpdateOP _op;
  private int _pos;

  /// <summary>
  /// The Operation of update
  /// 
  /// <seealso cref="global::.UpdateOP"/>
  /// </summary>
  public UpdateOP Op
  {
    get
    {
      return _op;
    }
    set
    {
      __isset.op = true;
      this._op = value;
    }
  }

  /// <summary>
  /// The position/index of INSERT and OVERWRITE update operations
  /// </summary>
  public int Pos
  {
    get
    {
      return _pos;
    }
    set
    {
      __isset.pos = true;
      this._pos = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool op;
    public bool pos;
  }

  public SpecUpdateOP()
  {
  }

  public SpecUpdateOP DeepCopy()
  {
    var tmp83 = new SpecUpdateOP();
    if(__isset.op)
    {
      tmp83.Op = this.Op;
    }
    tmp83.__isset.op = this.__isset.op;
    if(__isset.pos)
    {
      tmp83.Pos = this.Pos;
    }
    tmp83.__isset.pos = this.__isset.pos;
    return tmp83;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Op = (UpdateOP)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I32)
            {
              Pos = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp84 = new TStruct("SpecUpdateOP");
      await oprot.WriteStructBeginAsync(tmp84, cancellationToken);
      var tmp85 = new TField();
      if(__isset.op)
      {
        tmp85.Name = "op";
        tmp85.Type = TType.I32;
        tmp85.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
        await oprot.WriteI32Async((int)Op, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.pos)
      {
        tmp85.Name = "pos";
        tmp85.Type = TType.I32;
        tmp85.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
        await oprot.WriteI32Async(Pos, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecUpdateOP other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.op == other.__isset.op) && ((!__isset.op) || (global::System.Object.Equals(Op, other.Op))))
      && ((__isset.pos == other.__isset.pos) && ((!__isset.pos) || (global::System.Object.Equals(Pos, other.Pos))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.op)
      {
        hashcode = (hashcode * 397) + Op.GetHashCode();
      }
      if(__isset.pos)
      {
        hashcode = (hashcode * 397) + Pos.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp86 = new StringBuilder("SpecUpdateOP(");
    int tmp87 = 0;
    if(__isset.op)
    {
      if(0 < tmp87++) { tmp86.Append(", "); }
      tmp86.Append("Op: ");
      Op.ToString(tmp86);
    }
    if(__isset.pos)
    {
      if(0 < tmp87++) { tmp86.Append(", "); }
      tmp86.Append("Pos: ");
      Pos.ToString(tmp86);
    }
    tmp86.Append(')');
    return tmp86.ToString();
  }
}

