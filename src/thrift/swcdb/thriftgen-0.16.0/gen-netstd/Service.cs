/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp443 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp443.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp444 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp444.Type == TMessageType.Exception)
      {
        var tmp445 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp445;
      }

      var tmp446 = new InternalStructs.sql_mng_column_result();
      await tmp446.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp446.__isset.e)
      {
        throw tmp446.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp447 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp447.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp448 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp448.Type == TMessageType.Exception)
      {
        var tmp449 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp449;
      }

      var tmp450 = new InternalStructs.sql_list_columns_result();
      await tmp450.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp450.__isset.success)
      {
        return tmp450.Success;
      }
      if (tmp450.__isset.e)
      {
        throw tmp450.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp451 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp451.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp452 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp452.Type == TMessageType.Exception)
      {
        var tmp453 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp453;
      }

      var tmp454 = new InternalStructs.sql_compact_columns_result();
      await tmp454.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp454.__isset.success)
      {
        return tmp454.Success;
      }
      if (tmp454.__isset.e)
      {
        throw tmp454.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp455 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp455.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp456 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp456.Type == TMessageType.Exception)
      {
        var tmp457 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp457;
      }

      var tmp458 = new InternalStructs.sql_select_result();
      await tmp458.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp458.__isset.success)
      {
        return tmp458.Success;
      }
      if (tmp458.__isset.e)
      {
        throw tmp458.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp459 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp459.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp460 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp460.Type == TMessageType.Exception)
      {
        var tmp461 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp461;
      }

      var tmp462 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp462.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp462.__isset.success)
      {
        return tmp462.Success;
      }
      if (tmp462.__isset.e)
      {
        throw tmp462.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp463 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp463.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp464 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp464.Type == TMessageType.Exception)
      {
        var tmp465 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp465;
      }

      var tmp466 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp466.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp466.__isset.success)
      {
        return tmp466.Success;
      }
      if (tmp466.__isset.e)
      {
        throw tmp466.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp467 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp467.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp468 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp468.Type == TMessageType.Exception)
      {
        var tmp469 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp469;
      }

      var tmp470 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp470.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp470.__isset.success)
      {
        return tmp470.Success;
      }
      if (tmp470.__isset.e)
      {
        throw tmp470.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp471 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp471.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp472 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp472.Type == TMessageType.Exception)
      {
        var tmp473 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp473;
      }

      var tmp474 = new InternalStructs.sql_query_result();
      await tmp474.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp474.__isset.success)
      {
        return tmp474.Success;
      }
      if (tmp474.__isset.e)
      {
        throw tmp474.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp475 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp475.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp476 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp476.Type == TMessageType.Exception)
      {
        var tmp477 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp477;
      }

      var tmp478 = new InternalStructs.sql_update_result();
      await tmp478.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp478.__isset.e)
      {
        throw tmp478.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp479 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp479.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp480 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp480.Type == TMessageType.Exception)
      {
        var tmp481 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp481;
      }

      var tmp482 = new InternalStructs.exec_sql_result();
      await tmp482.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp482.__isset.success)
      {
        return tmp482.Success;
      }
      if (tmp482.__isset.e)
      {
        throw tmp482.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp483 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp483.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp484 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp484.Type == TMessageType.Exception)
      {
        var tmp485 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp485;
      }

      var tmp486 = new InternalStructs.updater_create_result();
      await tmp486.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp486.__isset.success)
      {
        return tmp486.Success;
      }
      if (tmp486.__isset.e)
      {
        throw tmp486.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp487 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp487.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp488 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp488.Type == TMessageType.Exception)
      {
        var tmp489 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp489;
      }

      var tmp490 = new InternalStructs.updater_close_result();
      await tmp490.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp490.__isset.e)
      {
        throw tmp490.E;
      }
    }

    public async global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update(cells, updater_id, cancellationToken);
      await recv_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp491 = new InternalStructs.update_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp491.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update(CancellationToken cancellationToken = default)
    {
      
      var tmp492 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp492.Type == TMessageType.Exception)
      {
        var tmp493 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp493;
      }

      var tmp494 = new InternalStructs.update_result();
      await tmp494.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp494.__isset.e)
      {
        throw tmp494.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp495 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp495.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp496 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp496.Type == TMessageType.Exception)
      {
        var tmp497 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp497;
      }

      var tmp498 = new InternalStructs.update_serial_result();
      await tmp498.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp498.__isset.e)
      {
        throw tmp498.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp499 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp499.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp500 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp500.Type == TMessageType.Exception)
      {
        var tmp501 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp501;
      }

      var tmp502 = new InternalStructs.mng_column_result();
      await tmp502.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp502.__isset.e)
      {
        throw tmp502.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp503 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp503.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp504 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp504.Type == TMessageType.Exception)
      {
        var tmp505 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp505;
      }

      var tmp506 = new InternalStructs.list_columns_result();
      await tmp506.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp506.__isset.success)
      {
        return tmp506.Success;
      }
      if (tmp506.__isset.e)
      {
        throw tmp506.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp507 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp507.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp508 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp508.Type == TMessageType.Exception)
      {
        var tmp509 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp509;
      }

      var tmp510 = new InternalStructs.compact_columns_result();
      await tmp510.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp510.__isset.success)
      {
        return tmp510.Success;
      }
      if (tmp510.__isset.e)
      {
        throw tmp510.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp511 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp511.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp512 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp512.Type == TMessageType.Exception)
      {
        var tmp513 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp513;
      }

      var tmp514 = new InternalStructs.scan_result();
      await tmp514.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp514.__isset.success)
      {
        return tmp514.Success;
      }
      if (tmp514.__isset.e)
      {
        throw tmp514.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp515 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp515.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp516 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp516.Type == TMessageType.Exception)
      {
        var tmp517 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp517;
      }

      var tmp518 = new InternalStructs.scan_rslt_on_column_result();
      await tmp518.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp518.__isset.success)
      {
        return tmp518.Success;
      }
      if (tmp518.__isset.e)
      {
        throw tmp518.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp519 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp519.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp520 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp520.Type == TMessageType.Exception)
      {
        var tmp521 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp521;
      }

      var tmp522 = new InternalStructs.scan_rslt_on_key_result();
      await tmp522.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp522.__isset.success)
      {
        return tmp522.Success;
      }
      if (tmp522.__isset.e)
      {
        throw tmp522.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp523 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp523.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp524 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp524.Type == TMessageType.Exception)
      {
        var tmp525 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp525;
      }

      var tmp526 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp526.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp526.__isset.success)
      {
        return tmp526.Success;
      }
      if (tmp526.__isset.e)
      {
        throw tmp526.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp527 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp527.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp528 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp528.Type == TMessageType.Exception)
      {
        var tmp529 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp529;
      }

      var tmp530 = new InternalStructs.scan_rslt_on_result();
      await tmp530.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp530.__isset.success)
      {
        return tmp530.Success;
      }
      if (tmp530.__isset.e)
      {
        throw tmp530.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update"] = update_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp531 = new InternalStructs.sql_mng_column_args();
      await tmp531.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp532 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp531.Sql, cancellationToken);
        }
        catch (Exception tmp533)
        {
          tmp532.E = tmp533;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp532.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp534)
      {
        var tmp535 = $"Error occurred in {GetType().FullName}: {tmp534.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp534, tmp535);
        else
          Console.Error.WriteLine(tmp535);
        var tmp536 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp536.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp537 = new InternalStructs.sql_list_columns_args();
      await tmp537.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp538 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp538.Success = await _iAsync.sql_list_columns(tmp537.Sql, cancellationToken);
        }
        catch (Exception tmp539)
        {
          tmp538.E = tmp539;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp538.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp540)
      {
        var tmp541 = $"Error occurred in {GetType().FullName}: {tmp540.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp540, tmp541);
        else
          Console.Error.WriteLine(tmp541);
        var tmp542 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp542.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp543 = new InternalStructs.sql_compact_columns_args();
      await tmp543.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp544 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp544.Success = await _iAsync.sql_compact_columns(tmp543.Sql, cancellationToken);
        }
        catch (Exception tmp545)
        {
          tmp544.E = tmp545;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp544.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp546)
      {
        var tmp547 = $"Error occurred in {GetType().FullName}: {tmp546.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp546, tmp547);
        else
          Console.Error.WriteLine(tmp547);
        var tmp548 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp548.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp549 = new InternalStructs.sql_select_args();
      await tmp549.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp550 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp550.Success = await _iAsync.sql_select(tmp549.Sql, cancellationToken);
        }
        catch (Exception tmp551)
        {
          tmp550.E = tmp551;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp550.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp552)
      {
        var tmp553 = $"Error occurred in {GetType().FullName}: {tmp552.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp552, tmp553);
        else
          Console.Error.WriteLine(tmp553);
        var tmp554 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp554.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp555 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp555.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp556 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp556.Success = await _iAsync.sql_select_rslt_on_column(tmp555.Sql, cancellationToken);
        }
        catch (Exception tmp557)
        {
          tmp556.E = tmp557;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp556.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp558)
      {
        var tmp559 = $"Error occurred in {GetType().FullName}: {tmp558.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp558, tmp559);
        else
          Console.Error.WriteLine(tmp559);
        var tmp560 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp560.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp561 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp561.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp562 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp562.Success = await _iAsync.sql_select_rslt_on_key(tmp561.Sql, cancellationToken);
        }
        catch (Exception tmp563)
        {
          tmp562.E = tmp563;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp562.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp564)
      {
        var tmp565 = $"Error occurred in {GetType().FullName}: {tmp564.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp564, tmp565);
        else
          Console.Error.WriteLine(tmp565);
        var tmp566 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp566.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp567 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp567.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp568 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp568.Success = await _iAsync.sql_select_rslt_on_fraction(tmp567.Sql, cancellationToken);
        }
        catch (Exception tmp569)
        {
          tmp568.E = tmp569;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp568.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp570)
      {
        var tmp571 = $"Error occurred in {GetType().FullName}: {tmp570.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp570, tmp571);
        else
          Console.Error.WriteLine(tmp571);
        var tmp572 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp572.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp573 = new InternalStructs.sql_query_args();
      await tmp573.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp574 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp574.Success = await _iAsync.sql_query(tmp573.Sql, tmp573.Rslt, cancellationToken);
        }
        catch (Exception tmp575)
        {
          tmp574.E = tmp575;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp574.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp576)
      {
        var tmp577 = $"Error occurred in {GetType().FullName}: {tmp576.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp576, tmp577);
        else
          Console.Error.WriteLine(tmp577);
        var tmp578 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp578.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp579 = new InternalStructs.sql_update_args();
      await tmp579.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp580 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp579.Sql, tmp579.Updater_id, cancellationToken);
        }
        catch (Exception tmp581)
        {
          tmp580.E = tmp581;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp580.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp582)
      {
        var tmp583 = $"Error occurred in {GetType().FullName}: {tmp582.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp582, tmp583);
        else
          Console.Error.WriteLine(tmp583);
        var tmp584 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp584.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp585 = new InternalStructs.exec_sql_args();
      await tmp585.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp586 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp586.Success = await _iAsync.exec_sql(tmp585.Sql, cancellationToken);
        }
        catch (Exception tmp587)
        {
          tmp586.E = tmp587;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp586.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp588)
      {
        var tmp589 = $"Error occurred in {GetType().FullName}: {tmp588.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp588, tmp589);
        else
          Console.Error.WriteLine(tmp589);
        var tmp590 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp590.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp591 = new InternalStructs.updater_create_args();
      await tmp591.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp592 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp592.Success = await _iAsync.updater_create(tmp591.Buffer_size, cancellationToken);
        }
        catch (Exception tmp593)
        {
          tmp592.E = tmp593;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp592.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp594)
      {
        var tmp595 = $"Error occurred in {GetType().FullName}: {tmp594.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp594, tmp595);
        else
          Console.Error.WriteLine(tmp595);
        var tmp596 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp596.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp597 = new InternalStructs.updater_close_args();
      await tmp597.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp598 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp597.Id, cancellationToken);
        }
        catch (Exception tmp599)
        {
          tmp598.E = tmp599;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp598.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp600)
      {
        var tmp601 = $"Error occurred in {GetType().FullName}: {tmp600.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp600, tmp601);
        else
          Console.Error.WriteLine(tmp601);
        var tmp602 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp602.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp603 = new InternalStructs.update_args();
      await tmp603.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp604 = new InternalStructs.update_result();
      try
      {
        try
        {
          await _iAsync.update(tmp603.Cells, tmp603.Updater_id, cancellationToken);
        }
        catch (Exception tmp605)
        {
          tmp604.E = tmp605;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp604.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp606)
      {
        var tmp607 = $"Error occurred in {GetType().FullName}: {tmp606.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp606, tmp607);
        else
          Console.Error.WriteLine(tmp607);
        var tmp608 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Exception, seqid), cancellationToken);
        await tmp608.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp609 = new InternalStructs.update_serial_args();
      await tmp609.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp610 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp609.Cells, tmp609.Updater_id, cancellationToken);
        }
        catch (Exception tmp611)
        {
          tmp610.E = tmp611;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp610.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp612)
      {
        var tmp613 = $"Error occurred in {GetType().FullName}: {tmp612.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp612, tmp613);
        else
          Console.Error.WriteLine(tmp613);
        var tmp614 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp614.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp615 = new InternalStructs.mng_column_args();
      await tmp615.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp616 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp615.Func, tmp615.Schema, cancellationToken);
        }
        catch (Exception tmp617)
        {
          tmp616.E = tmp617;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp616.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp618)
      {
        var tmp619 = $"Error occurred in {GetType().FullName}: {tmp618.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp618, tmp619);
        else
          Console.Error.WriteLine(tmp619);
        var tmp620 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp620.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp621 = new InternalStructs.list_columns_args();
      await tmp621.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp622 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp622.Success = await _iAsync.list_columns(tmp621.Spec, cancellationToken);
        }
        catch (Exception tmp623)
        {
          tmp622.E = tmp623;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp622.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp624)
      {
        var tmp625 = $"Error occurred in {GetType().FullName}: {tmp624.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp624, tmp625);
        else
          Console.Error.WriteLine(tmp625);
        var tmp626 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp626.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp627 = new InternalStructs.compact_columns_args();
      await tmp627.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp628 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp628.Success = await _iAsync.compact_columns(tmp627.Spec, cancellationToken);
        }
        catch (Exception tmp629)
        {
          tmp628.E = tmp629;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp628.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp630)
      {
        var tmp631 = $"Error occurred in {GetType().FullName}: {tmp630.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp630, tmp631);
        else
          Console.Error.WriteLine(tmp631);
        var tmp632 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp632.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp633 = new InternalStructs.scan_args();
      await tmp633.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp634 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp634.Success = await _iAsync.scan(tmp633.Spec, cancellationToken);
        }
        catch (Exception tmp635)
        {
          tmp634.E = tmp635;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp634.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp636)
      {
        var tmp637 = $"Error occurred in {GetType().FullName}: {tmp636.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp636, tmp637);
        else
          Console.Error.WriteLine(tmp637);
        var tmp638 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp638.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp639 = new InternalStructs.scan_rslt_on_column_args();
      await tmp639.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp640 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp640.Success = await _iAsync.scan_rslt_on_column(tmp639.Spec, cancellationToken);
        }
        catch (Exception tmp641)
        {
          tmp640.E = tmp641;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp640.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp642)
      {
        var tmp643 = $"Error occurred in {GetType().FullName}: {tmp642.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp642, tmp643);
        else
          Console.Error.WriteLine(tmp643);
        var tmp644 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp644.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp645 = new InternalStructs.scan_rslt_on_key_args();
      await tmp645.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp646 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp646.Success = await _iAsync.scan_rslt_on_key(tmp645.Spec, cancellationToken);
        }
        catch (Exception tmp647)
        {
          tmp646.E = tmp647;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp646.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp648)
      {
        var tmp649 = $"Error occurred in {GetType().FullName}: {tmp648.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp648, tmp649);
        else
          Console.Error.WriteLine(tmp649);
        var tmp650 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp650.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp651 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp651.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp652 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp652.Success = await _iAsync.scan_rslt_on_fraction(tmp651.Spec, cancellationToken);
        }
        catch (Exception tmp653)
        {
          tmp652.E = tmp653;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp652.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp654)
      {
        var tmp655 = $"Error occurred in {GetType().FullName}: {tmp654.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp654, tmp655);
        else
          Console.Error.WriteLine(tmp655);
        var tmp656 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp656.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp657 = new InternalStructs.scan_rslt_on_args();
      await tmp657.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp658 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp658.Success = await _iAsync.scan_rslt_on(tmp657.Spec, tmp657.Rslt, cancellationToken);
        }
        catch (Exception tmp659)
        {
          tmp658.E = tmp659;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp658.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp660)
      {
        var tmp661 = $"Error occurred in {GetType().FullName}: {tmp660.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp660, tmp661);
        else
          Console.Error.WriteLine(tmp661);
        var tmp662 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp662.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp663 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp663.Sql = this.Sql;
        }
        tmp663.__isset.sql = this.__isset.sql;
        return tmp663;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp664 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp664, cancellationToken);
          var tmp665 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp665.Name = "sql";
            tmp665.Type = TType.String;
            tmp665.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp665, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp666 = new StringBuilder("sql_mng_column_args(");
        int tmp667 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp667++) { tmp666.Append(", "); }
          tmp666.Append("Sql: ");
          Sql.ToString(tmp666);
        }
        tmp666.Append(')');
        return tmp666.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp668 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp668.E = (Exception)this.E.DeepCopy();
        }
        tmp668.__isset.e = this.__isset.e;
        return tmp668;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp669 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp669, cancellationToken);
          var tmp670 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp670.Name = "E";
              tmp670.Type = TType.Struct;
              tmp670.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp670, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp671 = new StringBuilder("sql_mng_column_result(");
        int tmp672 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp672++) { tmp671.Append(", "); }
          tmp671.Append("E: ");
          E.ToString(tmp671);
        }
        tmp671.Append(')');
        return tmp671.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp673 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp673.Sql = this.Sql;
        }
        tmp673.__isset.sql = this.__isset.sql;
        return tmp673;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp674 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp674, cancellationToken);
          var tmp675 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp675.Name = "sql";
            tmp675.Type = TType.String;
            tmp675.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp675, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp676 = new StringBuilder("sql_list_columns_args(");
        int tmp677 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp677++) { tmp676.Append(", "); }
          tmp676.Append("Sql: ");
          Sql.ToString(tmp676);
        }
        tmp676.Append(')');
        return tmp676.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp678 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp678.Success = this.Success.DeepCopy();
        }
        tmp678.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp678.E = (Exception)this.E.DeepCopy();
        }
        tmp678.__isset.e = this.__isset.e;
        return tmp678;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list679 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list679.Count);
                    for(int _i680 = 0; _i680 < _list679.Count; ++_i680)
                    {
                      Schema _elem681;
                      _elem681 = new Schema();
                      await _elem681.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem681);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp682 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp682, cancellationToken);
          var tmp683 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp683.Name = "Success";
              tmp683.Type = TType.List;
              tmp683.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Schema _iter684 in Success)
                {
                  await _iter684.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp683.Name = "E";
              tmp683.Type = TType.Struct;
              tmp683.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp683, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp685 = new StringBuilder("sql_list_columns_result(");
        int tmp686 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp686++) { tmp685.Append(", "); }
          tmp685.Append("Success: ");
          Success.ToString(tmp685);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp686++) { tmp685.Append(", "); }
          tmp685.Append("E: ");
          E.ToString(tmp685);
        }
        tmp685.Append(')');
        return tmp685.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp687 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp687.Sql = this.Sql;
        }
        tmp687.__isset.sql = this.__isset.sql;
        return tmp687;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp688 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp688, cancellationToken);
          var tmp689 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp689.Name = "sql";
            tmp689.Type = TType.String;
            tmp689.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp689, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp690 = new StringBuilder("sql_compact_columns_args(");
        int tmp691 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp691++) { tmp690.Append(", "); }
          tmp690.Append("Sql: ");
          Sql.ToString(tmp690);
        }
        tmp690.Append(')');
        return tmp690.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp692 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp692.Success = this.Success.DeepCopy();
        }
        tmp692.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp692.E = (Exception)this.E.DeepCopy();
        }
        tmp692.__isset.e = this.__isset.e;
        return tmp692;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list693 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list693.Count);
                    for(int _i694 = 0; _i694 < _list693.Count; ++_i694)
                    {
                      CompactResult _elem695;
                      _elem695 = new CompactResult();
                      await _elem695.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem695);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp696 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp696, cancellationToken);
          var tmp697 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp697.Name = "Success";
              tmp697.Type = TType.List;
              tmp697.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp697, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (CompactResult _iter698 in Success)
                {
                  await _iter698.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp697.Name = "E";
              tmp697.Type = TType.Struct;
              tmp697.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp697, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp699 = new StringBuilder("sql_compact_columns_result(");
        int tmp700 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp700++) { tmp699.Append(", "); }
          tmp699.Append("Success: ");
          Success.ToString(tmp699);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp700++) { tmp699.Append(", "); }
          tmp699.Append("E: ");
          E.ToString(tmp699);
        }
        tmp699.Append(')');
        return tmp699.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp701 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp701.Sql = this.Sql;
        }
        tmp701.__isset.sql = this.__isset.sql;
        return tmp701;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp702 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp702, cancellationToken);
          var tmp703 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp703.Name = "sql";
            tmp703.Type = TType.String;
            tmp703.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp703, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp704 = new StringBuilder("sql_select_args(");
        int tmp705 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp705++) { tmp704.Append(", "); }
          tmp704.Append("Sql: ");
          Sql.ToString(tmp704);
        }
        tmp704.Append(')');
        return tmp704.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp706 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp706.Success = (Cells)this.Success.DeepCopy();
        }
        tmp706.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp706.E = (Exception)this.E.DeepCopy();
        }
        tmp706.__isset.e = this.__isset.e;
        return tmp706;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp707 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp707, cancellationToken);
          var tmp708 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp708.Name = "Success";
              tmp708.Type = TType.Struct;
              tmp708.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp708, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp708.Name = "E";
              tmp708.Type = TType.Struct;
              tmp708.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp708, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp709 = new StringBuilder("sql_select_result(");
        int tmp710 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp710++) { tmp709.Append(", "); }
          tmp709.Append("Success: ");
          Success.ToString(tmp709);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp710++) { tmp709.Append(", "); }
          tmp709.Append("E: ");
          E.ToString(tmp709);
        }
        tmp709.Append(')');
        return tmp709.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp711 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp711.Sql = this.Sql;
        }
        tmp711.__isset.sql = this.__isset.sql;
        return tmp711;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp712 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp712, cancellationToken);
          var tmp713 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp713.Name = "sql";
            tmp713.Type = TType.String;
            tmp713.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp713, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp714 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp715 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp715++) { tmp714.Append(", "); }
          tmp714.Append("Sql: ");
          Sql.ToString(tmp714);
        }
        tmp714.Append(')');
        return tmp714.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp716 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp716.Success = this.Success.DeepCopy();
        }
        tmp716.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp716.E = (Exception)this.E.DeepCopy();
        }
        tmp716.__isset.e = this.__isset.e;
        return tmp716;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map717 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map717.Count);
                    for(int _i718 = 0; _i718 < _map717.Count; ++_i718)
                    {
                      string _key719;
                      ColCells _val720;
                      _key719 = await iprot.ReadStringAsync(cancellationToken);
                      _val720 = new ColCells();
                      await _val720.ReadAsync(iprot, cancellationToken);
                      Success[_key719] = _val720;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp721 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp721, cancellationToken);
          var tmp722 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp722.Name = "Success";
              tmp722.Type = TType.Map;
              tmp722.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp722, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter723 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter723, cancellationToken);
                  await Success[_iter723].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp722.Name = "E";
              tmp722.Type = TType.Struct;
              tmp722.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp722, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp724 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp725 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp725++) { tmp724.Append(", "); }
          tmp724.Append("Success: ");
          Success.ToString(tmp724);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp725++) { tmp724.Append(", "); }
          tmp724.Append("E: ");
          E.ToString(tmp724);
        }
        tmp724.Append(')');
        return tmp724.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp726 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp726.Sql = this.Sql;
        }
        tmp726.__isset.sql = this.__isset.sql;
        return tmp726;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp727 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp727, cancellationToken);
          var tmp728 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp728.Name = "sql";
            tmp728.Type = TType.String;
            tmp728.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp728, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp729 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp730 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp730++) { tmp729.Append(", "); }
          tmp729.Append("Sql: ");
          Sql.ToString(tmp729);
        }
        tmp729.Append(')');
        return tmp729.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp731 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp731.Success = this.Success.DeepCopy();
        }
        tmp731.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp731.E = (Exception)this.E.DeepCopy();
        }
        tmp731.__isset.e = this.__isset.e;
        return tmp731;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list732 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list732.Count);
                    for(int _i733 = 0; _i733 < _list732.Count; ++_i733)
                    {
                      kCells _elem734;
                      _elem734 = new kCells();
                      await _elem734.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem734);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp735 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp735, cancellationToken);
          var tmp736 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp736.Name = "Success";
              tmp736.Type = TType.List;
              tmp736.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp736, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (kCells _iter737 in Success)
                {
                  await _iter737.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp736.Name = "E";
              tmp736.Type = TType.Struct;
              tmp736.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp736, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp738 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp739 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp739++) { tmp738.Append(", "); }
          tmp738.Append("Success: ");
          Success.ToString(tmp738);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp739++) { tmp738.Append(", "); }
          tmp738.Append("E: ");
          E.ToString(tmp738);
        }
        tmp738.Append(')');
        return tmp738.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp740 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp740.Sql = this.Sql;
        }
        tmp740.__isset.sql = this.__isset.sql;
        return tmp740;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp741 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp741, cancellationToken);
          var tmp742 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp742.Name = "sql";
            tmp742.Type = TType.String;
            tmp742.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp742, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp743 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp744 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp744++) { tmp743.Append(", "); }
          tmp743.Append("Sql: ");
          Sql.ToString(tmp743);
        }
        tmp743.Append(')');
        return tmp743.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp745 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp745.Success = (FCells)this.Success.DeepCopy();
        }
        tmp745.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp745.E = (Exception)this.E.DeepCopy();
        }
        tmp745.__isset.e = this.__isset.e;
        return tmp745;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp746 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp746, cancellationToken);
          var tmp747 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp747.Name = "Success";
              tmp747.Type = TType.Struct;
              tmp747.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp747, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp747.Name = "E";
              tmp747.Type = TType.Struct;
              tmp747.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp747, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp748 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp749 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp749++) { tmp748.Append(", "); }
          tmp748.Append("Success: ");
          Success.ToString(tmp748);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp749++) { tmp748.Append(", "); }
          tmp748.Append("E: ");
          E.ToString(tmp748);
        }
        tmp748.Append(')');
        return tmp748.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp750 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp750.Sql = this.Sql;
        }
        tmp750.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp750.Rslt = this.Rslt;
        }
        tmp750.__isset.rslt = this.__isset.rslt;
        return tmp750;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp751 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp751, cancellationToken);
          var tmp752 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp752.Name = "sql";
            tmp752.Type = TType.String;
            tmp752.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp752, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp752.Name = "rslt";
            tmp752.Type = TType.I32;
            tmp752.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp752, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp753 = new StringBuilder("sql_query_args(");
        int tmp754 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp754++) { tmp753.Append(", "); }
          tmp753.Append("Sql: ");
          Sql.ToString(tmp753);
        }
        if(__isset.rslt)
        {
          if(0 < tmp754++) { tmp753.Append(", "); }
          tmp753.Append("Rslt: ");
          Rslt.ToString(tmp753);
        }
        tmp753.Append(')');
        return tmp753.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp755 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp755.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp755.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp755.E = (Exception)this.E.DeepCopy();
        }
        tmp755.__isset.e = this.__isset.e;
        return tmp755;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp756 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp756, cancellationToken);
          var tmp757 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp757.Name = "Success";
              tmp757.Type = TType.Struct;
              tmp757.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp757, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp757.Name = "E";
              tmp757.Type = TType.Struct;
              tmp757.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp757, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp758 = new StringBuilder("sql_query_result(");
        int tmp759 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp759++) { tmp758.Append(", "); }
          tmp758.Append("Success: ");
          Success.ToString(tmp758);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp759++) { tmp758.Append(", "); }
          tmp758.Append("E: ");
          E.ToString(tmp758);
        }
        tmp758.Append(')');
        return tmp758.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp760 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp760.Sql = this.Sql;
        }
        tmp760.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp760.Updater_id = this.Updater_id;
        }
        tmp760.__isset.updater_id = this.__isset.updater_id;
        return tmp760;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp761 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp761, cancellationToken);
          var tmp762 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp762.Name = "sql";
            tmp762.Type = TType.String;
            tmp762.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp762, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp762.Name = "updater_id";
            tmp762.Type = TType.I64;
            tmp762.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp762, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp763 = new StringBuilder("sql_update_args(");
        int tmp764 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp764++) { tmp763.Append(", "); }
          tmp763.Append("Sql: ");
          Sql.ToString(tmp763);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp764++) { tmp763.Append(", "); }
          tmp763.Append("Updater_id: ");
          Updater_id.ToString(tmp763);
        }
        tmp763.Append(')');
        return tmp763.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp765 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp765.E = (Exception)this.E.DeepCopy();
        }
        tmp765.__isset.e = this.__isset.e;
        return tmp765;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp766 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp766, cancellationToken);
          var tmp767 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp767.Name = "E";
              tmp767.Type = TType.Struct;
              tmp767.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp767, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp768 = new StringBuilder("sql_update_result(");
        int tmp769 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp769++) { tmp768.Append(", "); }
          tmp768.Append("E: ");
          E.ToString(tmp768);
        }
        tmp768.Append(')');
        return tmp768.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp770 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp770.Sql = this.Sql;
        }
        tmp770.__isset.sql = this.__isset.sql;
        return tmp770;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp771 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp771, cancellationToken);
          var tmp772 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp772.Name = "sql";
            tmp772.Type = TType.String;
            tmp772.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp772, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp773 = new StringBuilder("exec_sql_args(");
        int tmp774 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp774++) { tmp773.Append(", "); }
          tmp773.Append("Sql: ");
          Sql.ToString(tmp773);
        }
        tmp773.Append(')');
        return tmp773.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp775 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp775.Success = (Result)this.Success.DeepCopy();
        }
        tmp775.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp775.E = (Exception)this.E.DeepCopy();
        }
        tmp775.__isset.e = this.__isset.e;
        return tmp775;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp776 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp776, cancellationToken);
          var tmp777 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp777.Name = "Success";
              tmp777.Type = TType.Struct;
              tmp777.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp777, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp777.Name = "E";
              tmp777.Type = TType.Struct;
              tmp777.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp777, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp778 = new StringBuilder("exec_sql_result(");
        int tmp779 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp779++) { tmp778.Append(", "); }
          tmp778.Append("Success: ");
          Success.ToString(tmp778);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp779++) { tmp778.Append(", "); }
          tmp778.Append("E: ");
          E.ToString(tmp778);
        }
        tmp778.Append(')');
        return tmp778.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp780 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp780.Buffer_size = this.Buffer_size;
        }
        tmp780.__isset.buffer_size = this.__isset.buffer_size;
        return tmp780;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp781 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp781, cancellationToken);
          var tmp782 = new TField();
          if(__isset.buffer_size)
          {
            tmp782.Name = "buffer_size";
            tmp782.Type = TType.I32;
            tmp782.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp782, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp783 = new StringBuilder("updater_create_args(");
        int tmp784 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp784++) { tmp783.Append(", "); }
          tmp783.Append("Buffer_size: ");
          Buffer_size.ToString(tmp783);
        }
        tmp783.Append(')');
        return tmp783.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp785 = new updater_create_result();
        if(__isset.success)
        {
          tmp785.Success = this.Success;
        }
        tmp785.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp785.E = (Exception)this.E.DeepCopy();
        }
        tmp785.__isset.e = this.__isset.e;
        return tmp785;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp786 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp786, cancellationToken);
          var tmp787 = new TField();

          if(this.__isset.success)
          {
            tmp787.Name = "Success";
            tmp787.Type = TType.I64;
            tmp787.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp787.Name = "E";
              tmp787.Type = TType.Struct;
              tmp787.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp787, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp788 = new StringBuilder("updater_create_result(");
        int tmp789 = 0;
        if(__isset.success)
        {
          if(0 < tmp789++) { tmp788.Append(", "); }
          tmp788.Append("Success: ");
          Success.ToString(tmp788);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp789++) { tmp788.Append(", "); }
          tmp788.Append("E: ");
          E.ToString(tmp788);
        }
        tmp788.Append(')');
        return tmp788.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp790 = new updater_close_args();
        if(__isset.id)
        {
          tmp790.Id = this.Id;
        }
        tmp790.__isset.id = this.__isset.id;
        return tmp790;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp791 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp791, cancellationToken);
          var tmp792 = new TField();
          if(__isset.id)
          {
            tmp792.Name = "id";
            tmp792.Type = TType.I64;
            tmp792.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp792, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp793 = new StringBuilder("updater_close_args(");
        int tmp794 = 0;
        if(__isset.id)
        {
          if(0 < tmp794++) { tmp793.Append(", "); }
          tmp793.Append("Id: ");
          Id.ToString(tmp793);
        }
        tmp793.Append(')');
        return tmp793.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp795 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp795.E = (Exception)this.E.DeepCopy();
        }
        tmp795.__isset.e = this.__isset.e;
        return tmp795;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp796 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp796, cancellationToken);
          var tmp797 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp797.Name = "E";
              tmp797.Type = TType.Struct;
              tmp797.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp797, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp798 = new StringBuilder("updater_close_result(");
        int tmp799 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp799++) { tmp798.Append(", "); }
          tmp798.Append("E: ");
          E.ToString(tmp798);
        }
        tmp798.Append(')');
        return tmp798.ToString();
      }
    }


    public partial class update_args : TBase
    {
      private Dictionary<long, List<UCell>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCell>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_args DeepCopy()
      {
        var tmp800 = new update_args();
        if((Cells != null) && __isset.cells)
        {
          tmp800.Cells = this.Cells.DeepCopy();
        }
        tmp800.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp800.Updater_id = this.Updater_id;
        }
        tmp800.__isset.updater_id = this.__isset.updater_id;
        return tmp800;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map801 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCell>>(_map801.Count);
                    for(int _i802 = 0; _i802 < _map801.Count; ++_i802)
                    {
                      long _key803;
                      List<UCell> _val804;
                      _key803 = await iprot.ReadI64Async(cancellationToken);
                      {
                        TList _list805 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val804 = new List<UCell>(_list805.Count);
                        for(int _i806 = 0; _i806 < _list805.Count; ++_i806)
                        {
                          UCell _elem807;
                          _elem807 = new UCell();
                          await _elem807.ReadAsync(iprot, cancellationToken);
                          _val804.Add(_elem807);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key803] = _val804;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp808 = new TStruct("update_args");
          await oprot.WriteStructBeginAsync(tmp808, cancellationToken);
          var tmp809 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp809.Name = "cells";
            tmp809.Type = TType.Map;
            tmp809.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
              foreach (long _iter810 in Cells.Keys)
              {
                await oprot.WriteI64Async(_iter810, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter810].Count), cancellationToken);
                  foreach (UCell _iter811 in Cells[_iter810])
                  {
                    await _iter811.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp809.Name = "updater_id";
            tmp809.Type = TType.I64;
            tmp809.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp812 = new StringBuilder("update_args(");
        int tmp813 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp813++) { tmp812.Append(", "); }
          tmp812.Append("Cells: ");
          Cells.ToString(tmp812);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp813++) { tmp812.Append(", "); }
          tmp812.Append("Updater_id: ");
          Updater_id.ToString(tmp812);
        }
        tmp812.Append(')');
        return tmp812.ToString();
      }
    }


    public partial class update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_result()
      {
      }

      public update_result DeepCopy()
      {
        var tmp814 = new update_result();
        if((E != null) && __isset.e)
        {
          tmp814.E = (Exception)this.E.DeepCopy();
        }
        tmp814.__isset.e = this.__isset.e;
        return tmp814;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp815 = new TStruct("update_result");
          await oprot.WriteStructBeginAsync(tmp815, cancellationToken);
          var tmp816 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp816.Name = "E";
              tmp816.Type = TType.Struct;
              tmp816.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp816, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp817 = new StringBuilder("update_result(");
        int tmp818 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp818++) { tmp817.Append(", "); }
          tmp817.Append("E: ");
          E.ToString(tmp817);
        }
        tmp817.Append(')');
        return tmp817.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp819 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp819.Cells = this.Cells.DeepCopy();
        }
        tmp819.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp819.Updater_id = this.Updater_id;
        }
        tmp819.__isset.updater_id = this.__isset.updater_id;
        return tmp819;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map820 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map820.Count);
                    for(int _i821 = 0; _i821 < _map820.Count; ++_i821)
                    {
                      long _key822;
                      List<UCellSerial> _val823;
                      _key822 = await iprot.ReadI64Async(cancellationToken);
                      {
                        TList _list824 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val823 = new List<UCellSerial>(_list824.Count);
                        for(int _i825 = 0; _i825 < _list824.Count; ++_i825)
                        {
                          UCellSerial _elem826;
                          _elem826 = new UCellSerial();
                          await _elem826.ReadAsync(iprot, cancellationToken);
                          _val823.Add(_elem826);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key822] = _val823;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp827 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp827, cancellationToken);
          var tmp828 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp828.Name = "cells";
            tmp828.Type = TType.Map;
            tmp828.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp828, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
              foreach (long _iter829 in Cells.Keys)
              {
                await oprot.WriteI64Async(_iter829, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter829].Count), cancellationToken);
                  foreach (UCellSerial _iter830 in Cells[_iter829])
                  {
                    await _iter830.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp828.Name = "updater_id";
            tmp828.Type = TType.I64;
            tmp828.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp828, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp831 = new StringBuilder("update_serial_args(");
        int tmp832 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp832++) { tmp831.Append(", "); }
          tmp831.Append("Cells: ");
          Cells.ToString(tmp831);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp832++) { tmp831.Append(", "); }
          tmp831.Append("Updater_id: ");
          Updater_id.ToString(tmp831);
        }
        tmp831.Append(')');
        return tmp831.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp833 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp833.E = (Exception)this.E.DeepCopy();
        }
        tmp833.__isset.e = this.__isset.e;
        return tmp833;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp834 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp834, cancellationToken);
          var tmp835 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp835.Name = "E";
              tmp835.Type = TType.Struct;
              tmp835.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp835, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp836 = new StringBuilder("update_serial_result(");
        int tmp837 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp837++) { tmp836.Append(", "); }
          tmp836.Append("E: ");
          E.ToString(tmp836);
        }
        tmp836.Append(')');
        return tmp836.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp838 = new mng_column_args();
        if(__isset.func)
        {
          tmp838.Func = this.Func;
        }
        tmp838.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp838.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp838.__isset.schema = this.__isset.schema;
        return tmp838;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp839 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp839, cancellationToken);
          var tmp840 = new TField();
          if(__isset.func)
          {
            tmp840.Name = "func";
            tmp840.Type = TType.I32;
            tmp840.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp840, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp840.Name = "schema";
            tmp840.Type = TType.Struct;
            tmp840.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp840, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp841 = new StringBuilder("mng_column_args(");
        int tmp842 = 0;
        if(__isset.func)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("Func: ");
          Func.ToString(tmp841);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("Schema: ");
          Schema.ToString(tmp841);
        }
        tmp841.Append(')');
        return tmp841.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp843 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp843.E = (Exception)this.E.DeepCopy();
        }
        tmp843.__isset.e = this.__isset.e;
        return tmp843;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp844 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp844, cancellationToken);
          var tmp845 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp845.Name = "E";
              tmp845.Type = TType.Struct;
              tmp845.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp845, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp846 = new StringBuilder("mng_column_result(");
        int tmp847 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp847++) { tmp846.Append(", "); }
          tmp846.Append("E: ");
          E.ToString(tmp846);
        }
        tmp846.Append(')');
        return tmp846.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp848 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp848.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp848.__isset.spec = this.__isset.spec;
        return tmp848;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp849 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp849, cancellationToken);
          var tmp850 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp850.Name = "spec";
            tmp850.Type = TType.Struct;
            tmp850.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp850, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp851 = new StringBuilder("list_columns_args(");
        int tmp852 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp852++) { tmp851.Append(", "); }
          tmp851.Append("Spec: ");
          Spec.ToString(tmp851);
        }
        tmp851.Append(')');
        return tmp851.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp853 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp853.Success = this.Success.DeepCopy();
        }
        tmp853.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp853.E = (Exception)this.E.DeepCopy();
        }
        tmp853.__isset.e = this.__isset.e;
        return tmp853;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list854 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list854.Count);
                    for(int _i855 = 0; _i855 < _list854.Count; ++_i855)
                    {
                      Schema _elem856;
                      _elem856 = new Schema();
                      await _elem856.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem856);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp857 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp857, cancellationToken);
          var tmp858 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp858.Name = "Success";
              tmp858.Type = TType.List;
              tmp858.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp858, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Schema _iter859 in Success)
                {
                  await _iter859.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp858.Name = "E";
              tmp858.Type = TType.Struct;
              tmp858.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp858, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp860 = new StringBuilder("list_columns_result(");
        int tmp861 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp861++) { tmp860.Append(", "); }
          tmp860.Append("Success: ");
          Success.ToString(tmp860);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp861++) { tmp860.Append(", "); }
          tmp860.Append("E: ");
          E.ToString(tmp860);
        }
        tmp860.Append(')');
        return tmp860.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp862 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp862.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp862.__isset.spec = this.__isset.spec;
        return tmp862;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp863 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp863, cancellationToken);
          var tmp864 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp864.Name = "spec";
            tmp864.Type = TType.Struct;
            tmp864.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp865 = new StringBuilder("compact_columns_args(");
        int tmp866 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp866++) { tmp865.Append(", "); }
          tmp865.Append("Spec: ");
          Spec.ToString(tmp865);
        }
        tmp865.Append(')');
        return tmp865.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp867 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp867.Success = this.Success.DeepCopy();
        }
        tmp867.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp867.E = (Exception)this.E.DeepCopy();
        }
        tmp867.__isset.e = this.__isset.e;
        return tmp867;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list868 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list868.Count);
                    for(int _i869 = 0; _i869 < _list868.Count; ++_i869)
                    {
                      CompactResult _elem870;
                      _elem870 = new CompactResult();
                      await _elem870.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem870);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp871 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp871, cancellationToken);
          var tmp872 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp872.Name = "Success";
              tmp872.Type = TType.List;
              tmp872.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (CompactResult _iter873 in Success)
                {
                  await _iter873.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp872.Name = "E";
              tmp872.Type = TType.Struct;
              tmp872.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp874 = new StringBuilder("compact_columns_result(");
        int tmp875 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp875++) { tmp874.Append(", "); }
          tmp874.Append("Success: ");
          Success.ToString(tmp874);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp875++) { tmp874.Append(", "); }
          tmp874.Append("E: ");
          E.ToString(tmp874);
        }
        tmp874.Append(')');
        return tmp874.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp876 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp876.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp876.__isset.spec = this.__isset.spec;
        return tmp876;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp877 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp877, cancellationToken);
          var tmp878 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp878.Name = "spec";
            tmp878.Type = TType.Struct;
            tmp878.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp878, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp879 = new StringBuilder("scan_args(");
        int tmp880 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp880++) { tmp879.Append(", "); }
          tmp879.Append("Spec: ");
          Spec.ToString(tmp879);
        }
        tmp879.Append(')');
        return tmp879.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp881 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp881.Success = (Cells)this.Success.DeepCopy();
        }
        tmp881.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp881.E = (Exception)this.E.DeepCopy();
        }
        tmp881.__isset.e = this.__isset.e;
        return tmp881;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp882 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp882, cancellationToken);
          var tmp883 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp883.Name = "Success";
              tmp883.Type = TType.Struct;
              tmp883.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp883, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp883.Name = "E";
              tmp883.Type = TType.Struct;
              tmp883.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp883, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp884 = new StringBuilder("scan_result(");
        int tmp885 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp885++) { tmp884.Append(", "); }
          tmp884.Append("Success: ");
          Success.ToString(tmp884);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp885++) { tmp884.Append(", "); }
          tmp884.Append("E: ");
          E.ToString(tmp884);
        }
        tmp884.Append(')');
        return tmp884.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp886 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp886.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp886.__isset.spec = this.__isset.spec;
        return tmp886;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp887 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp887, cancellationToken);
          var tmp888 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp888.Name = "spec";
            tmp888.Type = TType.Struct;
            tmp888.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp888, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp889 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp890 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp890++) { tmp889.Append(", "); }
          tmp889.Append("Spec: ");
          Spec.ToString(tmp889);
        }
        tmp889.Append(')');
        return tmp889.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp891 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp891.Success = this.Success.DeepCopy();
        }
        tmp891.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp891.E = (Exception)this.E.DeepCopy();
        }
        tmp891.__isset.e = this.__isset.e;
        return tmp891;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map892 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map892.Count);
                    for(int _i893 = 0; _i893 < _map892.Count; ++_i893)
                    {
                      string _key894;
                      ColCells _val895;
                      _key894 = await iprot.ReadStringAsync(cancellationToken);
                      _val895 = new ColCells();
                      await _val895.ReadAsync(iprot, cancellationToken);
                      Success[_key894] = _val895;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp896 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp896, cancellationToken);
          var tmp897 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp897.Name = "Success";
              tmp897.Type = TType.Map;
              tmp897.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp897, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter898 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter898, cancellationToken);
                  await Success[_iter898].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp897.Name = "E";
              tmp897.Type = TType.Struct;
              tmp897.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp897, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp899 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp900 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp900++) { tmp899.Append(", "); }
          tmp899.Append("Success: ");
          Success.ToString(tmp899);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp900++) { tmp899.Append(", "); }
          tmp899.Append("E: ");
          E.ToString(tmp899);
        }
        tmp899.Append(')');
        return tmp899.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp901 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp901.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp901.__isset.spec = this.__isset.spec;
        return tmp901;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp902 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp902, cancellationToken);
          var tmp903 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp903.Name = "spec";
            tmp903.Type = TType.Struct;
            tmp903.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp903, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp904 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp905 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp905++) { tmp904.Append(", "); }
          tmp904.Append("Spec: ");
          Spec.ToString(tmp904);
        }
        tmp904.Append(')');
        return tmp904.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp906 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp906.Success = this.Success.DeepCopy();
        }
        tmp906.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp906.E = (Exception)this.E.DeepCopy();
        }
        tmp906.__isset.e = this.__isset.e;
        return tmp906;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list907 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list907.Count);
                    for(int _i908 = 0; _i908 < _list907.Count; ++_i908)
                    {
                      kCells _elem909;
                      _elem909 = new kCells();
                      await _elem909.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem909);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp910 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp910, cancellationToken);
          var tmp911 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp911.Name = "Success";
              tmp911.Type = TType.List;
              tmp911.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp911, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (kCells _iter912 in Success)
                {
                  await _iter912.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp911.Name = "E";
              tmp911.Type = TType.Struct;
              tmp911.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp911, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp913 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp914 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp914++) { tmp913.Append(", "); }
          tmp913.Append("Success: ");
          Success.ToString(tmp913);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp914++) { tmp913.Append(", "); }
          tmp913.Append("E: ");
          E.ToString(tmp913);
        }
        tmp913.Append(')');
        return tmp913.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp915 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp915.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp915.__isset.spec = this.__isset.spec;
        return tmp915;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp916 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp916, cancellationToken);
          var tmp917 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp917.Name = "spec";
            tmp917.Type = TType.Struct;
            tmp917.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp917, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp918 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp919 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp919++) { tmp918.Append(", "); }
          tmp918.Append("Spec: ");
          Spec.ToString(tmp918);
        }
        tmp918.Append(')');
        return tmp918.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp920 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp920.Success = (FCells)this.Success.DeepCopy();
        }
        tmp920.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp920.E = (Exception)this.E.DeepCopy();
        }
        tmp920.__isset.e = this.__isset.e;
        return tmp920;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp921 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp921, cancellationToken);
          var tmp922 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp922.Name = "Success";
              tmp922.Type = TType.Struct;
              tmp922.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp922.Name = "E";
              tmp922.Type = TType.Struct;
              tmp922.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp923 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp924 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp924++) { tmp923.Append(", "); }
          tmp923.Append("Success: ");
          Success.ToString(tmp923);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp924++) { tmp923.Append(", "); }
          tmp923.Append("E: ");
          E.ToString(tmp923);
        }
        tmp923.Append(')');
        return tmp923.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp925 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp925.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp925.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp925.Rslt = this.Rslt;
        }
        tmp925.__isset.rslt = this.__isset.rslt;
        return tmp925;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp926 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp926, cancellationToken);
          var tmp927 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp927.Name = "spec";
            tmp927.Type = TType.Struct;
            tmp927.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp927.Name = "rslt";
            tmp927.Type = TType.I32;
            tmp927.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp928 = new StringBuilder("scan_rslt_on_args(");
        int tmp929 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp929++) { tmp928.Append(", "); }
          tmp928.Append("Spec: ");
          Spec.ToString(tmp928);
        }
        if(__isset.rslt)
        {
          if(0 < tmp929++) { tmp928.Append(", "); }
          tmp928.Append("Rslt: ");
          Rslt.ToString(tmp928);
        }
        tmp928.Append(')');
        return tmp928.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp930 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp930.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp930.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp930.E = (Exception)this.E.DeepCopy();
        }
        tmp930.__isset.e = this.__isset.e;
        return tmp930;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp931 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp931, cancellationToken);
          var tmp932 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp932.Name = "Success";
              tmp932.Type = TType.Struct;
              tmp932.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp932, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp932.Name = "E";
              tmp932.Type = TType.Struct;
              tmp932.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp932, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp933 = new StringBuilder("scan_rslt_on_result(");
        int tmp934 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp934++) { tmp933.Append(", "); }
          tmp933.Append("Success: ");
          Success.ToString(tmp933);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp934++) { tmp933.Append(", "); }
          tmp933.Append("E: ");
          E.ToString(tmp933);
        }
        tmp933.Append(')');
        return tmp933.ToString();
      }
    }

  }

}
