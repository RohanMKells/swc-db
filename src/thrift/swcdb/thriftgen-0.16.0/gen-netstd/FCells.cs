/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Fraction Cells for results on Fraction of scan
/// </summary>
public partial class FCells : TBase
{
  private Dictionary<byte[], FCells> _f;
  private List<FCell> _cells;
  private List<FCellSerial> _serial_cells;

  /// <summary>
  /// The Fraction Container for the Next Fractions Tree,  defined as FCells items in a map-container by current Fraction bytes
  /// </summary>
  public Dictionary<byte[], FCells> F
  {
    get
    {
      return _f;
    }
    set
    {
      __isset.f = true;
      this._f = value;
    }
  }

  /// <summary>
  /// The current Fraction's Cells, defined as FCell items in a list-container
  /// </summary>
  public List<FCell> Cells
  {
    get
    {
      return _cells;
    }
    set
    {
      __isset.cells = true;
      this._cells = value;
    }
  }

  /// <summary>
  /// The current Fraction's Serial Cells, defined as FCellSerial items in a list-container
  /// </summary>
  public List<FCellSerial> Serial_cells
  {
    get
    {
      return _serial_cells;
    }
    set
    {
      __isset.serial_cells = true;
      this._serial_cells = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool f;
    public bool cells;
    public bool serial_cells;
  }

  public FCells()
  {
  }

  public FCells DeepCopy()
  {
    var tmp393 = new FCells();
    if((F != null) && __isset.f)
    {
      tmp393.F = this.F.DeepCopy();
    }
    tmp393.__isset.f = this.__isset.f;
    if((Cells != null) && __isset.cells)
    {
      tmp393.Cells = this.Cells.DeepCopy();
    }
    tmp393.__isset.cells = this.__isset.cells;
    if((Serial_cells != null) && __isset.serial_cells)
    {
      tmp393.Serial_cells = this.Serial_cells.DeepCopy();
    }
    tmp393.__isset.serial_cells = this.__isset.serial_cells;
    return tmp393;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map)
            {
              {
                TMap _map394 = await iprot.ReadMapBeginAsync(cancellationToken);
                F = new Dictionary<byte[], FCells>(_map394.Count);
                for(int _i395 = 0; _i395 < _map394.Count; ++_i395)
                {
                  byte[] _key396;
                  FCells _val397;
                  _key396 = await iprot.ReadBinaryAsync(cancellationToken);
                  _val397 = new FCells();
                  await _val397.ReadAsync(iprot, cancellationToken);
                  F[_key396] = _val397;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list398 = await iprot.ReadListBeginAsync(cancellationToken);
                Cells = new List<FCell>(_list398.Count);
                for(int _i399 = 0; _i399 < _list398.Count; ++_i399)
                {
                  FCell _elem400;
                  _elem400 = new FCell();
                  await _elem400.ReadAsync(iprot, cancellationToken);
                  Cells.Add(_elem400);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list401 = await iprot.ReadListBeginAsync(cancellationToken);
                Serial_cells = new List<FCellSerial>(_list401.Count);
                for(int _i402 = 0; _i402 < _list401.Count; ++_i402)
                {
                  FCellSerial _elem403;
                  _elem403 = new FCellSerial();
                  await _elem403.ReadAsync(iprot, cancellationToken);
                  Serial_cells.Add(_elem403);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp404 = new TStruct("FCells");
      await oprot.WriteStructBeginAsync(tmp404, cancellationToken);
      var tmp405 = new TField();
      if((F != null) && __isset.f)
      {
        tmp405.Name = "f";
        tmp405.Type = TType.Map;
        tmp405.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, F.Count), cancellationToken);
          foreach (byte[] _iter406 in F.Keys)
          {
            await oprot.WriteBinaryAsync(_iter406, cancellationToken);
            await F[_iter406].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Cells != null) && __isset.cells)
      {
        tmp405.Name = "cells";
        tmp405.Type = TType.List;
        tmp405.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells.Count), cancellationToken);
          foreach (FCell _iter407 in Cells)
          {
            await _iter407.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        tmp405.Name = "serial_cells";
        tmp405.Type = TType.List;
        tmp405.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp405, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial_cells.Count), cancellationToken);
          foreach (FCellSerial _iter408 in Serial_cells)
          {
            await _iter408.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is FCells other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.f == other.__isset.f) && ((!__isset.f) || (TCollections.Equals(F, other.F))))
      && ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (TCollections.Equals(Cells, other.Cells))))
      && ((__isset.serial_cells == other.__isset.serial_cells) && ((!__isset.serial_cells) || (TCollections.Equals(Serial_cells, other.Serial_cells))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((F != null) && __isset.f)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(F);
      }
      if((Cells != null) && __isset.cells)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Cells);
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Serial_cells);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp409 = new StringBuilder("FCells(");
    int tmp410 = 0;
    if((F != null) && __isset.f)
    {
      if(0 < tmp410++) { tmp409.Append(", "); }
      tmp409.Append("F: ");
      F.ToString(tmp409);
    }
    if((Cells != null) && __isset.cells)
    {
      if(0 < tmp410++) { tmp409.Append(", "); }
      tmp409.Append("Cells: ");
      Cells.ToString(tmp409);
    }
    if((Serial_cells != null) && __isset.serial_cells)
    {
      if(0 < tmp410++) { tmp409.Append(", "); }
      tmp409.Append("Serial_cells: ");
      Serial_cells.ToString(tmp409);
    }
    tmp409.Append(')');
    return tmp409.ToString();
  }
}

