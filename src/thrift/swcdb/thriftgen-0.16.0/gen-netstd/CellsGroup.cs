/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// A Grouped Cells result for results of scan, determined by the request's CellsResult enum
/// </summary>
public partial class CellsGroup : TBase
{
  private Cells _cells;
  private Dictionary<string, ColCells> _ccells;
  private List<kCells> _kcells;
  private FCells _fcells;

  /// <summary>
  /// The Cells in a list, defined as Cell items in a list-container
  /// </summary>
  public Cells Cells
  {
    get
    {
      return _cells;
    }
    set
    {
      __isset.cells = true;
      this._cells = value;
    }
  }

  /// <summary>
  /// The Columns Cells in a map-container, defined as ColCells items by Column Name
  /// </summary>
  public Dictionary<string, ColCells> Ccells
  {
    get
    {
      return _ccells;
    }
    set
    {
      __isset.ccells = true;
      this._ccells = value;
    }
  }

  /// <summary>
  /// The Keys Cells in a list, defined as kCells items in a list-container
  /// </summary>
  public List<kCells> Kcells
  {
    get
    {
      return _kcells;
    }
    set
    {
      __isset.kcells = true;
      this._kcells = value;
    }
  }

  /// <summary>
  /// The Fraction Cells in struct FCells
  /// </summary>
  public FCells Fcells
  {
    get
    {
      return _fcells;
    }
    set
    {
      __isset.fcells = true;
      this._fcells = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool cells;
    public bool ccells;
    public bool kcells;
    public bool fcells;
  }

  public CellsGroup()
  {
  }

  public CellsGroup DeepCopy()
  {
    var tmp411 = new CellsGroup();
    if((Cells != null) && __isset.cells)
    {
      tmp411.Cells = (Cells)this.Cells.DeepCopy();
    }
    tmp411.__isset.cells = this.__isset.cells;
    if((Ccells != null) && __isset.ccells)
    {
      tmp411.Ccells = this.Ccells.DeepCopy();
    }
    tmp411.__isset.ccells = this.__isset.ccells;
    if((Kcells != null) && __isset.kcells)
    {
      tmp411.Kcells = this.Kcells.DeepCopy();
    }
    tmp411.__isset.kcells = this.__isset.kcells;
    if((Fcells != null) && __isset.fcells)
    {
      tmp411.Fcells = (FCells)this.Fcells.DeepCopy();
    }
    tmp411.__isset.fcells = this.__isset.fcells;
    return tmp411;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct)
            {
              Cells = new Cells();
              await Cells.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                TMap _map412 = await iprot.ReadMapBeginAsync(cancellationToken);
                Ccells = new Dictionary<string, ColCells>(_map412.Count);
                for(int _i413 = 0; _i413 < _map412.Count; ++_i413)
                {
                  string _key414;
                  ColCells _val415;
                  _key414 = await iprot.ReadStringAsync(cancellationToken);
                  _val415 = new ColCells();
                  await _val415.ReadAsync(iprot, cancellationToken);
                  Ccells[_key414] = _val415;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list416 = await iprot.ReadListBeginAsync(cancellationToken);
                Kcells = new List<kCells>(_list416.Count);
                for(int _i417 = 0; _i417 < _list416.Count; ++_i417)
                {
                  kCells _elem418;
                  _elem418 = new kCells();
                  await _elem418.ReadAsync(iprot, cancellationToken);
                  Kcells.Add(_elem418);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              Fcells = new FCells();
              await Fcells.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp419 = new TStruct("CellsGroup");
      await oprot.WriteStructBeginAsync(tmp419, cancellationToken);
      var tmp420 = new TField();
      if((Cells != null) && __isset.cells)
      {
        tmp420.Name = "cells";
        tmp420.Type = TType.Struct;
        tmp420.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp420, cancellationToken);
        await Cells.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Ccells != null) && __isset.ccells)
      {
        tmp420.Name = "ccells";
        tmp420.Type = TType.Map;
        tmp420.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp420, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Ccells.Count), cancellationToken);
          foreach (string _iter421 in Ccells.Keys)
          {
            await oprot.WriteStringAsync(_iter421, cancellationToken);
            await Ccells[_iter421].WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Kcells != null) && __isset.kcells)
      {
        tmp420.Name = "kcells";
        tmp420.Type = TType.List;
        tmp420.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp420, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Kcells.Count), cancellationToken);
          foreach (kCells _iter422 in Kcells)
          {
            await _iter422.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Fcells != null) && __isset.fcells)
      {
        tmp420.Name = "fcells";
        tmp420.Type = TType.Struct;
        tmp420.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp420, cancellationToken);
        await Fcells.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is CellsGroup other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
      && ((__isset.ccells == other.__isset.ccells) && ((!__isset.ccells) || (global::System.Object.Equals(Ccells, other.Ccells))))
      && ((__isset.kcells == other.__isset.kcells) && ((!__isset.kcells) || (global::System.Object.Equals(Kcells, other.Kcells))))
      && ((__isset.fcells == other.__isset.fcells) && ((!__isset.fcells) || (global::System.Object.Equals(Fcells, other.Fcells))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Cells != null) && __isset.cells)
      {
        hashcode = (hashcode * 397) + Cells.GetHashCode();
      }
      if((Ccells != null) && __isset.ccells)
      {
        hashcode = (hashcode * 397) + Ccells.GetHashCode();
      }
      if((Kcells != null) && __isset.kcells)
      {
        hashcode = (hashcode * 397) + Kcells.GetHashCode();
      }
      if((Fcells != null) && __isset.fcells)
      {
        hashcode = (hashcode * 397) + Fcells.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp423 = new StringBuilder("CellsGroup(");
    int tmp424 = 0;
    if((Cells != null) && __isset.cells)
    {
      if(0 < tmp424++) { tmp423.Append(", "); }
      tmp423.Append("Cells: ");
      Cells.ToString(tmp423);
    }
    if((Ccells != null) && __isset.ccells)
    {
      if(0 < tmp424++) { tmp423.Append(", "); }
      tmp423.Append("Ccells: ");
      Ccells.ToString(tmp423);
    }
    if((Kcells != null) && __isset.kcells)
    {
      if(0 < tmp424++) { tmp423.Append(", "); }
      tmp423.Append("Kcells: ");
      Kcells.ToString(tmp423);
    }
    if((Fcells != null) && __isset.fcells)
    {
      if(0 < tmp424++) { tmp423.Append(", "); }
      tmp423.Append("Fcells: ");
      Fcells.ToString(tmp423);
    }
    tmp423.Append(')');
    return tmp423.ToString();
  }
}

