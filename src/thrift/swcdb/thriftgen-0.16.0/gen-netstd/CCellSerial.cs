/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Column Serial Cell for results on Columns of scan
/// </summary>
public partial class CCellSerial : TBase
{
  private List<byte[]> _k;
  private long _ts;
  private List<CellValueSerial> _v;

  /// <summary>
  /// The Cell Key
  /// </summary>
  public List<byte[]> K
  {
    get
    {
      return _k;
    }
    set
    {
      __isset.k = true;
      this._k = value;
    }
  }

  /// <summary>
  /// The Cell Timestamp
  /// </summary>
  public long Ts
  {
    get
    {
      return _ts;
    }
    set
    {
      __isset.ts = true;
      this._ts = value;
    }
  }

  /// <summary>
  /// The Cell Serial Value
  /// </summary>
  public List<CellValueSerial> V
  {
    get
    {
      return _v;
    }
    set
    {
      __isset.v = true;
      this._v = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool k;
    public bool ts;
    public bool v;
  }

  public CCellSerial()
  {
  }

  public CCellSerial DeepCopy()
  {
    var tmp322 = new CCellSerial();
    if((K != null) && __isset.k)
    {
      tmp322.K = this.K.DeepCopy();
    }
    tmp322.__isset.k = this.__isset.k;
    if(__isset.ts)
    {
      tmp322.Ts = this.Ts;
    }
    tmp322.__isset.ts = this.__isset.ts;
    if((V != null) && __isset.v)
    {
      tmp322.V = this.V.DeepCopy();
    }
    tmp322.__isset.v = this.__isset.v;
    return tmp322;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list323 = await iprot.ReadListBeginAsync(cancellationToken);
                K = new List<byte[]>(_list323.Count);
                for(int _i324 = 0; _i324 < _list323.Count; ++_i324)
                {
                  byte[] _elem325;
                  _elem325 = await iprot.ReadBinaryAsync(cancellationToken);
                  K.Add(_elem325);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              Ts = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list326 = await iprot.ReadListBeginAsync(cancellationToken);
                V = new List<CellValueSerial>(_list326.Count);
                for(int _i327 = 0; _i327 < _list326.Count; ++_i327)
                {
                  CellValueSerial _elem328;
                  _elem328 = new CellValueSerial();
                  await _elem328.ReadAsync(iprot, cancellationToken);
                  V.Add(_elem328);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp329 = new TStruct("CCellSerial");
      await oprot.WriteStructBeginAsync(tmp329, cancellationToken);
      var tmp330 = new TField();
      if((K != null) && __isset.k)
      {
        tmp330.Name = "k";
        tmp330.Type = TType.List;
        tmp330.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp330, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, K.Count), cancellationToken);
          foreach (byte[] _iter331 in K)
          {
            await oprot.WriteBinaryAsync(_iter331, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ts)
      {
        tmp330.Name = "ts";
        tmp330.Type = TType.I64;
        tmp330.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp330, cancellationToken);
        await oprot.WriteI64Async(Ts, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((V != null) && __isset.v)
      {
        tmp330.Name = "v";
        tmp330.Type = TType.List;
        tmp330.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp330, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, V.Count), cancellationToken);
          foreach (CellValueSerial _iter332 in V)
          {
            await _iter332.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is CCellSerial other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.k == other.__isset.k) && ((!__isset.k) || (global::System.Object.Equals(K, other.K))))
      && ((__isset.ts == other.__isset.ts) && ((!__isset.ts) || (global::System.Object.Equals(Ts, other.Ts))))
      && ((__isset.v == other.__isset.v) && ((!__isset.v) || (global::System.Object.Equals(V, other.V))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((K != null) && __isset.k)
      {
        hashcode = (hashcode * 397) + K.GetHashCode();
      }
      if(__isset.ts)
      {
        hashcode = (hashcode * 397) + Ts.GetHashCode();
      }
      if((V != null) && __isset.v)
      {
        hashcode = (hashcode * 397) + V.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp333 = new StringBuilder("CCellSerial(");
    int tmp334 = 0;
    if((K != null) && __isset.k)
    {
      if(0 < tmp334++) { tmp333.Append(", "); }
      tmp333.Append("K: ");
      K.ToString(tmp333);
    }
    if(__isset.ts)
    {
      if(0 < tmp334++) { tmp333.Append(", "); }
      tmp333.Append("Ts: ");
      Ts.ToString(tmp333);
    }
    if((V != null) && __isset.v)
    {
      if(0 < tmp334++) { tmp333.Append(", "); }
      tmp333.Append("V: ");
      V.ToString(tmp333);
    }
    tmp333.Append(')');
    return tmp333.ToString();
  }
}

