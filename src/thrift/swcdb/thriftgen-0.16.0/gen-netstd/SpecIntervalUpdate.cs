/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.16.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#nullable disable                // suppress C# 8.0 nullable contexts (we still support earlier versions)
#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Value specs for an Updating Interval of 'updating' in SpecInterval
/// </summary>
public partial class SpecIntervalUpdate : TBase
{
  private byte[] _v;
  private long _ts;
  private EncodingType _encoder;

  /// <summary>
  /// The value for the updated cell
  /// </summary>
  public byte[] V
  {
    get
    {
      return _v;
    }
    set
    {
      __isset.v = true;
      this._v = value;
    }
  }

  /// <summary>
  /// The timestamp for the updated cell NULL: MIN_INT64+1, AUTO:MIN_INT64+2 (or not-set)
  /// </summary>
  public long Ts
  {
    get
    {
      return _ts;
    }
    set
    {
      __isset.ts = true;
      this._ts = value;
    }
  }

  /// <summary>
  /// Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
  /// 
  /// <seealso cref="global::.EncodingType"/>
  /// </summary>
  public EncodingType Encoder
  {
    get
    {
      return _encoder;
    }
    set
    {
      __isset.encoder = true;
      this._encoder = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool v;
    public bool ts;
    public bool encoder;
  }

  public SpecIntervalUpdate()
  {
  }

  public SpecIntervalUpdate DeepCopy()
  {
    var tmp83 = new SpecIntervalUpdate();
    if((V != null) && __isset.v)
    {
      tmp83.V = this.V.ToArray();
    }
    tmp83.__isset.v = this.__isset.v;
    if(__isset.ts)
    {
      tmp83.Ts = this.Ts;
    }
    tmp83.__isset.ts = this.__isset.ts;
    if(__isset.encoder)
    {
      tmp83.Encoder = this.Encoder;
    }
    tmp83.__isset.encoder = this.__isset.encoder;
    return tmp83;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String)
            {
              V = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              Ts = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Encoder = (EncodingType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp84 = new TStruct("SpecIntervalUpdate");
      await oprot.WriteStructBeginAsync(tmp84, cancellationToken);
      var tmp85 = new TField();
      if((V != null) && __isset.v)
      {
        tmp85.Name = "v";
        tmp85.Type = TType.String;
        tmp85.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
        await oprot.WriteBinaryAsync(V, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ts)
      {
        tmp85.Name = "ts";
        tmp85.Type = TType.I64;
        tmp85.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
        await oprot.WriteI64Async(Ts, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.encoder)
      {
        tmp85.Name = "encoder";
        tmp85.Type = TType.I32;
        tmp85.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp85, cancellationToken);
        await oprot.WriteI32Async((int)Encoder, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SpecIntervalUpdate other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.v == other.__isset.v) && ((!__isset.v) || (TCollections.Equals(V, other.V))))
      && ((__isset.ts == other.__isset.ts) && ((!__isset.ts) || (global::System.Object.Equals(Ts, other.Ts))))
      && ((__isset.encoder == other.__isset.encoder) && ((!__isset.encoder) || (global::System.Object.Equals(Encoder, other.Encoder))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((V != null) && __isset.v)
      {
        hashcode = (hashcode * 397) + V.GetHashCode();
      }
      if(__isset.ts)
      {
        hashcode = (hashcode * 397) + Ts.GetHashCode();
      }
      if(__isset.encoder)
      {
        hashcode = (hashcode * 397) + Encoder.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp86 = new StringBuilder("SpecIntervalUpdate(");
    int tmp87 = 0;
    if((V != null) && __isset.v)
    {
      if(0 < tmp87++) { tmp86.Append(", "); }
      tmp86.Append("V: ");
      V.ToString(tmp86);
    }
    if(__isset.ts)
    {
      if(0 < tmp87++) { tmp86.Append(", "); }
      tmp86.Append("Ts: ");
      Ts.ToString(tmp86);
    }
    if(__isset.encoder)
    {
      if(0 < tmp87++) { tmp86.Append(", "); }
      tmp86.Append("Encoder: ");
      Encoder.ToString(tmp86);
    }
    tmp86.Append(')');
    return tmp86.ToString();
  }
}

