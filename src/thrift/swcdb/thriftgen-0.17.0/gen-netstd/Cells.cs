/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Cells for results list of scan
/// </summary>
public partial class Cells : TBase
{
  private List<CellPlain> _plain_cells;
  private List<CellCounter> _counter_cells;
  private List<CellSerial> _serial_cells;

  /// <summary>
  /// The Cells, defined as Cell items in a list-container
  /// </summary>
  public List<CellPlain> Plain_cells
  {
    get
    {
      return _plain_cells;
    }
    set
    {
      __isset.plain_cells = true;
      this._plain_cells = value;
    }
  }

  /// <summary>
  /// The Cells, defined as Cell items in a list-container
  /// </summary>
  public List<CellCounter> Counter_cells
  {
    get
    {
      return _counter_cells;
    }
    set
    {
      __isset.counter_cells = true;
      this._counter_cells = value;
    }
  }

  /// <summary>
  /// The Serial Cells, defined as CellSerial items in a list-container
  /// </summary>
  public List<CellSerial> Serial_cells
  {
    get
    {
      return _serial_cells;
    }
    set
    {
      __isset.serial_cells = true;
      this._serial_cells = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool plain_cells;
    public bool counter_cells;
    public bool serial_cells;
  }

  public Cells()
  {
  }

  public Cells DeepCopy()
  {
    var tmp364 = new Cells();
    if((Plain_cells != null) && __isset.plain_cells)
    {
      tmp364.Plain_cells = this.Plain_cells.DeepCopy();
    }
    tmp364.__isset.plain_cells = this.__isset.plain_cells;
    if((Counter_cells != null) && __isset.counter_cells)
    {
      tmp364.Counter_cells = this.Counter_cells.DeepCopy();
    }
    tmp364.__isset.counter_cells = this.__isset.counter_cells;
    if((Serial_cells != null) && __isset.serial_cells)
    {
      tmp364.Serial_cells = this.Serial_cells.DeepCopy();
    }
    tmp364.__isset.serial_cells = this.__isset.serial_cells;
    return tmp364;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                var _list365 = await iprot.ReadListBeginAsync(cancellationToken);
                Plain_cells = new List<CellPlain>(_list365.Count);
                for(int _i366 = 0; _i366 < _list365.Count; ++_i366)
                {
                  CellPlain _elem367;
                  _elem367 = new CellPlain();
                  await _elem367.ReadAsync(iprot, cancellationToken);
                  Plain_cells.Add(_elem367);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                var _list368 = await iprot.ReadListBeginAsync(cancellationToken);
                Counter_cells = new List<CellCounter>(_list368.Count);
                for(int _i369 = 0; _i369 < _list368.Count; ++_i369)
                {
                  CellCounter _elem370;
                  _elem370 = new CellCounter();
                  await _elem370.ReadAsync(iprot, cancellationToken);
                  Counter_cells.Add(_elem370);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                var _list371 = await iprot.ReadListBeginAsync(cancellationToken);
                Serial_cells = new List<CellSerial>(_list371.Count);
                for(int _i372 = 0; _i372 < _list371.Count; ++_i372)
                {
                  CellSerial _elem373;
                  _elem373 = new CellSerial();
                  await _elem373.ReadAsync(iprot, cancellationToken);
                  Serial_cells.Add(_elem373);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp374 = new TStruct("Cells");
      await oprot.WriteStructBeginAsync(tmp374, cancellationToken);
      var tmp375 = new TField();
      if((Plain_cells != null) && __isset.plain_cells)
      {
        tmp375.Name = "plain_cells";
        tmp375.Type = TType.List;
        tmp375.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp375, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain_cells.Count), cancellationToken);
        foreach (CellPlain _iter376 in Plain_cells)
        {
          await _iter376.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Counter_cells != null) && __isset.counter_cells)
      {
        tmp375.Name = "counter_cells";
        tmp375.Type = TType.List;
        tmp375.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp375, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter_cells.Count), cancellationToken);
        foreach (CellCounter _iter377 in Counter_cells)
        {
          await _iter377.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        tmp375.Name = "serial_cells";
        tmp375.Type = TType.List;
        tmp375.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp375, cancellationToken);
        await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial_cells.Count), cancellationToken);
        foreach (CellSerial _iter378 in Serial_cells)
        {
          await _iter378.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteListEndAsync(cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is Cells other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.plain_cells == other.__isset.plain_cells) && ((!__isset.plain_cells) || (global::System.Object.Equals(Plain_cells, other.Plain_cells))))
      && ((__isset.counter_cells == other.__isset.counter_cells) && ((!__isset.counter_cells) || (global::System.Object.Equals(Counter_cells, other.Counter_cells))))
      && ((__isset.serial_cells == other.__isset.serial_cells) && ((!__isset.serial_cells) || (global::System.Object.Equals(Serial_cells, other.Serial_cells))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Plain_cells != null) && __isset.plain_cells)
      {
        hashcode = (hashcode * 397) + Plain_cells.GetHashCode();
      }
      if((Counter_cells != null) && __isset.counter_cells)
      {
        hashcode = (hashcode * 397) + Counter_cells.GetHashCode();
      }
      if((Serial_cells != null) && __isset.serial_cells)
      {
        hashcode = (hashcode * 397) + Serial_cells.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp379 = new StringBuilder("Cells(");
    int tmp380 = 0;
    if((Plain_cells != null) && __isset.plain_cells)
    {
      if(0 < tmp380++) { tmp379.Append(", "); }
      tmp379.Append("Plain_cells: ");
      Plain_cells.ToString(tmp379);
    }
    if((Counter_cells != null) && __isset.counter_cells)
    {
      if(0 < tmp380++) { tmp379.Append(", "); }
      tmp379.Append("Counter_cells: ");
      Counter_cells.ToString(tmp379);
    }
    if((Serial_cells != null) && __isset.serial_cells)
    {
      if(0 < tmp380++) { tmp379.Append(", "); }
      tmp379.Append("Serial_cells: ");
      Serial_cells.ToString(tmp379);
    }
    tmp379.Append(')');
    return tmp379.ToString();
  }
}

