/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public static class ServiceExtensions
{
  public static bool Equals(this Dictionary<byte[], FCells> instance, object that)
  {
    if (!(that is Dictionary<byte[], FCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<byte[], FCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<byte[], FCells> DeepCopy(this Dictionary<byte[], FCells> source)
  {
    if (source == null)
      return null;

    var tmp1151 = new Dictionary<byte[], FCells>(source.Count);
    foreach (var pair in source)
      tmp1151.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp1151;
  }


  public static bool Equals(this Dictionary<long, List<UCellCounter>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCellCounter>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCellCounter>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCellCounter>> DeepCopy(this Dictionary<long, List<UCellCounter>> source)
  {
    if (source == null)
      return null;

    var tmp1152 = new Dictionary<long, List<UCellCounter>>(source.Count);
    foreach (var pair in source)
      tmp1152.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp1152;
  }


  public static bool Equals(this Dictionary<long, List<UCellPlain>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCellPlain>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCellPlain>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCellPlain>> DeepCopy(this Dictionary<long, List<UCellPlain>> source)
  {
    if (source == null)
      return null;

    var tmp1153 = new Dictionary<long, List<UCellPlain>>(source.Count);
    foreach (var pair in source)
      tmp1153.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp1153;
  }


  public static bool Equals(this Dictionary<long, List<UCellSerial>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCellSerial>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCellSerial>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCellSerial>> DeepCopy(this Dictionary<long, List<UCellSerial>> source)
  {
    if (source == null)
      return null;

    var tmp1154 = new Dictionary<long, List<UCellSerial>>(source.Count);
    foreach (var pair in source)
      tmp1154.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp1154;
  }


  public static bool Equals(this Dictionary<string, ColCells> instance, object that)
  {
    if (!(that is Dictionary<string, ColCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, ColCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, ColCells> DeepCopy(this Dictionary<string, ColCells> source)
  {
    if (source == null)
      return null;

    var tmp1155 = new Dictionary<string, ColCells>(source.Count);
    foreach (var pair in source)
      tmp1155.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp1155;
  }


  public static bool Equals(this List<CCell> instance, object that)
  {
    if (!(that is List<CCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCell> DeepCopy(this List<CCell> source)
  {
    if (source == null)
      return null;

    var tmp1156 = new List<CCell>(source.Count);
    foreach (var elem in source)
      tmp1156.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1156;
  }


  public static bool Equals(this List<CCellSerial> instance, object that)
  {
    if (!(that is List<CCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCellSerial> DeepCopy(this List<CCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1157 = new List<CCellSerial>(source.Count);
    foreach (var elem in source)
      tmp1157.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1157;
  }


  public static bool Equals(this List<CellCounter> instance, object that)
  {
    if (!(that is List<CellCounter> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellCounter> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellCounter> DeepCopy(this List<CellCounter> source)
  {
    if (source == null)
      return null;

    var tmp1158 = new List<CellCounter>(source.Count);
    foreach (var elem in source)
      tmp1158.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1158;
  }


  public static bool Equals(this List<CellPlain> instance, object that)
  {
    if (!(that is List<CellPlain> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellPlain> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellPlain> DeepCopy(this List<CellPlain> source)
  {
    if (source == null)
      return null;

    var tmp1159 = new List<CellPlain>(source.Count);
    foreach (var elem in source)
      tmp1159.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1159;
  }


  public static bool Equals(this List<CellSerial> instance, object that)
  {
    if (!(that is List<CellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellSerial> DeepCopy(this List<CellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1160 = new List<CellSerial>(source.Count);
    foreach (var elem in source)
      tmp1160.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1160;
  }


  public static bool Equals(this List<CellValueSerial> instance, object that)
  {
    if (!(that is List<CellValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellValueSerial> DeepCopy(this List<CellValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp1161 = new List<CellValueSerial>(source.Count);
    foreach (var elem in source)
      tmp1161.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1161;
  }


  public static bool Equals(this List<CellValueSerialOp> instance, object that)
  {
    if (!(that is List<CellValueSerialOp> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellValueSerialOp> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellValueSerialOp> DeepCopy(this List<CellValueSerialOp> source)
  {
    if (source == null)
      return null;

    var tmp1162 = new List<CellValueSerialOp>(source.Count);
    foreach (var elem in source)
      tmp1162.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1162;
  }


  public static bool Equals(this List<CompactResult> instance, object that)
  {
    if (!(that is List<CompactResult> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CompactResult> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CompactResult> DeepCopy(this List<CompactResult> source)
  {
    if (source == null)
      return null;

    var tmp1163 = new List<CompactResult>(source.Count);
    foreach (var elem in source)
      tmp1163.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1163;
  }


  public static bool Equals(this List<FCell> instance, object that)
  {
    if (!(that is List<FCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCell> DeepCopy(this List<FCell> source)
  {
    if (source == null)
      return null;

    var tmp1164 = new List<FCell>(source.Count);
    foreach (var elem in source)
      tmp1164.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1164;
  }


  public static bool Equals(this List<FCellSerial> instance, object that)
  {
    if (!(that is List<FCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCellSerial> DeepCopy(this List<FCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1165 = new List<FCellSerial>(source.Count);
    foreach (var elem in source)
      tmp1165.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1165;
  }


  public static bool Equals(this List<FU_BYTES> instance, object that)
  {
    if (!(that is List<FU_BYTES> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FU_BYTES> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FU_BYTES> DeepCopy(this List<FU_BYTES> source)
  {
    if (source == null)
      return null;

    var tmp1166 = new List<FU_BYTES>(source.Count);
    foreach (var elem in source)
      tmp1166.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1166;
  }


  public static bool Equals(this List<FU_INT64> instance, object that)
  {
    if (!(that is List<FU_INT64> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FU_INT64> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FU_INT64> DeepCopy(this List<FU_INT64> source)
  {
    if (source == null)
      return null;

    var tmp1167 = new List<FU_INT64>(source.Count);
    foreach (var elem in source)
      tmp1167.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1167;
  }


  public static bool Equals(this List<KCell> instance, object that)
  {
    if (!(that is List<KCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCell> DeepCopy(this List<KCell> source)
  {
    if (source == null)
      return null;

    var tmp1168 = new List<KCell>(source.Count);
    foreach (var elem in source)
      tmp1168.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1168;
  }


  public static bool Equals(this List<KCellSerial> instance, object that)
  {
    if (!(that is List<KCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCellSerial> DeepCopy(this List<KCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1169 = new List<KCellSerial>(source.Count);
    foreach (var elem in source)
      tmp1169.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1169;
  }


  public static bool Equals(this List<Schema> instance, object that)
  {
    if (!(that is List<Schema> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Schema> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Schema> DeepCopy(this List<Schema> source)
  {
    if (source == null)
      return null;

    var tmp1170 = new List<Schema>(source.Count);
    foreach (var elem in source)
      tmp1170.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1170;
  }


  public static bool Equals(this List<SchemaPattern> instance, object that)
  {
    if (!(that is List<SchemaPattern> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SchemaPattern> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SchemaPattern> DeepCopy(this List<SchemaPattern> source)
  {
    if (source == null)
      return null;

    var tmp1171 = new List<SchemaPattern>(source.Count);
    foreach (var elem in source)
      tmp1171.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1171;
  }


  public static bool Equals(this List<SpecColumn> instance, object that)
  {
    if (!(that is List<SpecColumn> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumn> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumn> DeepCopy(this List<SpecColumn> source)
  {
    if (source == null)
      return null;

    var tmp1172 = new List<SpecColumn>(source.Count);
    foreach (var elem in source)
      tmp1172.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1172;
  }


  public static bool Equals(this List<SpecColumnSerial> instance, object that)
  {
    if (!(that is List<SpecColumnSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumnSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumnSerial> DeepCopy(this List<SpecColumnSerial> source)
  {
    if (source == null)
      return null;

    var tmp1173 = new List<SpecColumnSerial>(source.Count);
    foreach (var elem in source)
      tmp1173.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1173;
  }


  public static bool Equals(this List<SpecFraction> instance, object that)
  {
    if (!(that is List<SpecFraction> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecFraction> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecFraction> DeepCopy(this List<SpecFraction> source)
  {
    if (source == null)
      return null;

    var tmp1174 = new List<SpecFraction>(source.Count);
    foreach (var elem in source)
      tmp1174.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1174;
  }


  public static bool Equals(this List<SpecInterval> instance, object that)
  {
    if (!(that is List<SpecInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecInterval> DeepCopy(this List<SpecInterval> source)
  {
    if (source == null)
      return null;

    var tmp1175 = new List<SpecInterval>(source.Count);
    foreach (var elem in source)
      tmp1175.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1175;
  }


  public static bool Equals(this List<SpecIntervalSerial> instance, object that)
  {
    if (!(that is List<SpecIntervalSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecIntervalSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecIntervalSerial> DeepCopy(this List<SpecIntervalSerial> source)
  {
    if (source == null)
      return null;

    var tmp1176 = new List<SpecIntervalSerial>(source.Count);
    foreach (var elem in source)
      tmp1176.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1176;
  }


  public static bool Equals(this List<SpecKeyInterval> instance, object that)
  {
    if (!(that is List<SpecKeyInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecKeyInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecKeyInterval> DeepCopy(this List<SpecKeyInterval> source)
  {
    if (source == null)
      return null;

    var tmp1177 = new List<SpecKeyInterval>(source.Count);
    foreach (var elem in source)
      tmp1177.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1177;
  }


  public static bool Equals(this List<SpecValue> instance, object that)
  {
    if (!(that is List<SpecValue> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValue> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValue> DeepCopy(this List<SpecValue> source)
  {
    if (source == null)
      return null;

    var tmp1178 = new List<SpecValue>(source.Count);
    foreach (var elem in source)
      tmp1178.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1178;
  }


  public static bool Equals(this List<SpecValueSerial> instance, object that)
  {
    if (!(that is List<SpecValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial> DeepCopy(this List<SpecValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp1179 = new List<SpecValueSerial>(source.Count);
    foreach (var elem in source)
      tmp1179.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1179;
  }


  public static bool Equals(this List<SpecValueSerialField> instance, object that)
  {
    if (!(that is List<SpecValueSerialField> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerialField> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerialField> DeepCopy(this List<SpecValueSerialField> source)
  {
    if (source == null)
      return null;

    var tmp1180 = new List<SpecValueSerialField>(source.Count);
    foreach (var elem in source)
      tmp1180.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1180;
  }


  public static bool Equals(this List<SpecValueSerial_BYTES> instance, object that)
  {
    if (!(that is List<SpecValueSerial_BYTES> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_BYTES> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_BYTES> DeepCopy(this List<SpecValueSerial_BYTES> source)
  {
    if (source == null)
      return null;

    var tmp1181 = new List<SpecValueSerial_BYTES>(source.Count);
    foreach (var elem in source)
      tmp1181.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1181;
  }


  public static bool Equals(this List<SpecValueSerial_INT64> instance, object that)
  {
    if (!(that is List<SpecValueSerial_INT64> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_INT64> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_INT64> DeepCopy(this List<SpecValueSerial_INT64> source)
  {
    if (source == null)
      return null;

    var tmp1182 = new List<SpecValueSerial_INT64>(source.Count);
    foreach (var elem in source)
      tmp1182.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1182;
  }


  public static bool Equals(this List<UCellCounter> instance, object that)
  {
    if (!(that is List<UCellCounter> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCellCounter> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCellCounter> DeepCopy(this List<UCellCounter> source)
  {
    if (source == null)
      return null;

    var tmp1183 = new List<UCellCounter>(source.Count);
    foreach (var elem in source)
      tmp1183.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1183;
  }


  public static bool Equals(this List<UCellPlain> instance, object that)
  {
    if (!(that is List<UCellPlain> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCellPlain> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCellPlain> DeepCopy(this List<UCellPlain> source)
  {
    if (source == null)
      return null;

    var tmp1184 = new List<UCellPlain>(source.Count);
    foreach (var elem in source)
      tmp1184.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1184;
  }


  public static bool Equals(this List<UCellSerial> instance, object that)
  {
    if (!(that is List<UCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCellSerial> DeepCopy(this List<UCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp1185 = new List<UCellSerial>(source.Count);
    foreach (var elem in source)
      tmp1185.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1185;
  }


  public static bool Equals(this List<byte[]> instance, object that)
  {
    if (!(that is List<byte[]> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<byte[]> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<byte[]> DeepCopy(this List<byte[]> source)
  {
    if (source == null)
      return null;

    var tmp1186 = new List<byte[]>(source.Count);
    foreach (var elem in source)
      tmp1186.Add((elem != null) ? elem.ToArray() : null);
    return tmp1186;
  }


  public static bool Equals(this List<kCells> instance, object that)
  {
    if (!(that is List<kCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<kCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<kCells> DeepCopy(this List<kCells> source)
  {
    if (source == null)
      return null;

    var tmp1187 = new List<kCells>(source.Count);
    foreach (var elem in source)
      tmp1187.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp1187;
  }


  public static bool Equals(this List<long> instance, object that)
  {
    if (!(that is List<long> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<long> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<long> DeepCopy(this List<long> source)
  {
    if (source == null)
      return null;

    var tmp1188 = new List<long>(source.Count);
    foreach (var elem in source)
      tmp1188.Add(elem);
    return tmp1188;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<string> DeepCopy(this List<string> source)
  {
    if (source == null)
      return null;

    var tmp1189 = new List<string>(source.Count);
    foreach (var elem in source)
      tmp1189.Add((elem != null) ? elem : null);
    return tmp1189;
  }


}
