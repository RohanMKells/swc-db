/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsPlain.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsCounter.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsSerial.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Plain,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Counter,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Counter Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method is to update cells by several Column-Types,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="plain">The PLAIN Cells to update</param>
    /// <param name="counter">The COUNTER Cells to update</param>
    /// <param name="serial">The SERIAL Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp559 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp559.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp560 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp560.Type == TMessageType.Exception)
      {
        var tmp561 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp561;
      }

      var tmp562 = new InternalStructs.sql_mng_column_result();
      await tmp562.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp562.__isset.e)
      {
        throw tmp562.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp563 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp563.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp564 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp564.Type == TMessageType.Exception)
      {
        var tmp565 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp565;
      }

      var tmp566 = new InternalStructs.sql_list_columns_result();
      await tmp566.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp566.__isset.success)
      {
        return tmp566.Success;
      }
      if (tmp566.__isset.e)
      {
        throw tmp566.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp567 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp567.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp568 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp568.Type == TMessageType.Exception)
      {
        var tmp569 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp569;
      }

      var tmp570 = new InternalStructs.sql_compact_columns_result();
      await tmp570.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp570.__isset.success)
      {
        return tmp570.Success;
      }
      if (tmp570.__isset.e)
      {
        throw tmp570.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp571 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp571.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp572 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp572.Type == TMessageType.Exception)
      {
        var tmp573 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp573;
      }

      var tmp574 = new InternalStructs.sql_select_result();
      await tmp574.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp574.__isset.success)
      {
        return tmp574.Success;
      }
      if (tmp574.__isset.e)
      {
        throw tmp574.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_plain(sql, cancellationToken);
      return await recv_sql_select_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp575 = new InternalStructs.sql_select_plain_args() {
        Sql = sql,
      };
      
      await tmp575.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> recv_sql_select_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp576 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp576.Type == TMessageType.Exception)
      {
        var tmp577 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp577;
      }

      var tmp578 = new InternalStructs.sql_select_plain_result();
      await tmp578.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp578.__isset.success)
      {
        return tmp578.Success;
      }
      if (tmp578.__isset.e)
      {
        throw tmp578.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_plain failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_counter(sql, cancellationToken);
      return await recv_sql_select_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp579 = new InternalStructs.sql_select_counter_args() {
        Sql = sql,
      };
      
      await tmp579.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> recv_sql_select_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp580 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp580.Type == TMessageType.Exception)
      {
        var tmp581 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp581;
      }

      var tmp582 = new InternalStructs.sql_select_counter_result();
      await tmp582.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp582.__isset.success)
      {
        return tmp582.Success;
      }
      if (tmp582.__isset.e)
      {
        throw tmp582.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_counter failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_serial(sql, cancellationToken);
      return await recv_sql_select_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp583 = new InternalStructs.sql_select_serial_args() {
        Sql = sql,
      };
      
      await tmp583.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> recv_sql_select_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp584 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp584.Type == TMessageType.Exception)
      {
        var tmp585 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp585;
      }

      var tmp586 = new InternalStructs.sql_select_serial_result();
      await tmp586.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp586.__isset.success)
      {
        return tmp586.Success;
      }
      if (tmp586.__isset.e)
      {
        throw tmp586.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_serial failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp587 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp587.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp588 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp588.Type == TMessageType.Exception)
      {
        var tmp589 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp589;
      }

      var tmp590 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp590.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp590.__isset.success)
      {
        return tmp590.Success;
      }
      if (tmp590.__isset.e)
      {
        throw tmp590.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp591 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp591.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp592 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp592.Type == TMessageType.Exception)
      {
        var tmp593 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp593;
      }

      var tmp594 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp594.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp594.__isset.success)
      {
        return tmp594.Success;
      }
      if (tmp594.__isset.e)
      {
        throw tmp594.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp595 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp595.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp596 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp596.Type == TMessageType.Exception)
      {
        var tmp597 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp597;
      }

      var tmp598 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp598.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp598.__isset.success)
      {
        return tmp598.Success;
      }
      if (tmp598.__isset.e)
      {
        throw tmp598.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp599 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp599.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp600 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp600.Type == TMessageType.Exception)
      {
        var tmp601 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp601;
      }

      var tmp602 = new InternalStructs.sql_query_result();
      await tmp602.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp602.__isset.success)
      {
        return tmp602.Success;
      }
      if (tmp602.__isset.e)
      {
        throw tmp602.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp603 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp603.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp604 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp604.Type == TMessageType.Exception)
      {
        var tmp605 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp605;
      }

      var tmp606 = new InternalStructs.sql_update_result();
      await tmp606.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp606.__isset.e)
      {
        throw tmp606.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp607 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp607.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp608.Type == TMessageType.Exception)
      {
        var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp609;
      }

      var tmp610 = new InternalStructs.exec_sql_result();
      await tmp610.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp610.__isset.success)
      {
        return tmp610.Success;
      }
      if (tmp610.__isset.e)
      {
        throw tmp610.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp611 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp611.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp612.Type == TMessageType.Exception)
      {
        var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp613;
      }

      var tmp614 = new InternalStructs.updater_create_result();
      await tmp614.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp614.__isset.success)
      {
        return tmp614.Success;
      }
      if (tmp614.__isset.e)
      {
        throw tmp614.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp615 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp615.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp616.Type == TMessageType.Exception)
      {
        var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp617;
      }

      var tmp618 = new InternalStructs.updater_close_result();
      await tmp618.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp618.__isset.e)
      {
        throw tmp618.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_plain(cells, updater_id, cancellationToken);
      await recv_update_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp619 = new InternalStructs.update_plain_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp619.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp620 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp620.Type == TMessageType.Exception)
      {
        var tmp621 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp621;
      }

      var tmp622 = new InternalStructs.update_plain_result();
      await tmp622.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp622.__isset.e)
      {
        throw tmp622.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_counter(cells, updater_id, cancellationToken);
      await recv_update_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp623 = new InternalStructs.update_counter_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp623.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp624 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp624.Type == TMessageType.Exception)
      {
        var tmp625 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp625;
      }

      var tmp626 = new InternalStructs.update_counter_result();
      await tmp626.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp626.__isset.e)
      {
        throw tmp626.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp627 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp627.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp628 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp628.Type == TMessageType.Exception)
      {
        var tmp629 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp629;
      }

      var tmp630 = new InternalStructs.update_serial_result();
      await tmp630.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp630.__isset.e)
      {
        throw tmp630.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_by_types(plain, counter, serial, updater_id, cancellationToken);
      await recv_update_by_types(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp631 = new InternalStructs.update_by_types_args() {
        Plain = plain,
        Counter = counter,
        Serial = serial,
        Updater_id = updater_id,
      };
      
      await tmp631.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_by_types(CancellationToken cancellationToken = default)
    {
      
      var tmp632 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp632.Type == TMessageType.Exception)
      {
        var tmp633 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp633;
      }

      var tmp634 = new InternalStructs.update_by_types_result();
      await tmp634.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp634.__isset.e)
      {
        throw tmp634.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp635 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp635.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp636 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp636.Type == TMessageType.Exception)
      {
        var tmp637 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp637;
      }

      var tmp638 = new InternalStructs.mng_column_result();
      await tmp638.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp638.__isset.e)
      {
        throw tmp638.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp639 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp639.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp640 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp640.Type == TMessageType.Exception)
      {
        var tmp641 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp641;
      }

      var tmp642 = new InternalStructs.list_columns_result();
      await tmp642.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp642.__isset.success)
      {
        return tmp642.Success;
      }
      if (tmp642.__isset.e)
      {
        throw tmp642.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp643 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp643.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp644 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp644.Type == TMessageType.Exception)
      {
        var tmp645 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp645;
      }

      var tmp646 = new InternalStructs.compact_columns_result();
      await tmp646.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp646.__isset.success)
      {
        return tmp646.Success;
      }
      if (tmp646.__isset.e)
      {
        throw tmp646.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp647 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp647.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp648 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp648.Type == TMessageType.Exception)
      {
        var tmp649 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp649;
      }

      var tmp650 = new InternalStructs.scan_result();
      await tmp650.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp650.__isset.success)
      {
        return tmp650.Success;
      }
      if (tmp650.__isset.e)
      {
        throw tmp650.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp651 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp651.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp652 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp652.Type == TMessageType.Exception)
      {
        var tmp653 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp653;
      }

      var tmp654 = new InternalStructs.scan_rslt_on_column_result();
      await tmp654.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp654.__isset.success)
      {
        return tmp654.Success;
      }
      if (tmp654.__isset.e)
      {
        throw tmp654.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp655 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp655.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp656 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp656.Type == TMessageType.Exception)
      {
        var tmp657 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp657;
      }

      var tmp658 = new InternalStructs.scan_rslt_on_key_result();
      await tmp658.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp658.__isset.success)
      {
        return tmp658.Success;
      }
      if (tmp658.__isset.e)
      {
        throw tmp658.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp659 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp659.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp660 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp660.Type == TMessageType.Exception)
      {
        var tmp661 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp661;
      }

      var tmp662 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp662.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp662.__isset.success)
      {
        return tmp662.Success;
      }
      if (tmp662.__isset.e)
      {
        throw tmp662.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp663 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp663.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp664 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp664.Type == TMessageType.Exception)
      {
        var tmp665 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp665;
      }

      var tmp666 = new InternalStructs.scan_rslt_on_result();
      await tmp666.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp666.__isset.success)
      {
        return tmp666.Success;
      }
      if (tmp666.__isset.e)
      {
        throw tmp666.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_plain"] = sql_select_plain_ProcessAsync;
      processMap_["sql_select_counter"] = sql_select_counter_ProcessAsync;
      processMap_["sql_select_serial"] = sql_select_serial_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update_plain"] = update_plain_ProcessAsync;
      processMap_["update_counter"] = update_counter_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["update_by_types"] = update_by_types_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp667 = new InternalStructs.sql_mng_column_args();
      await tmp667.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp668 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp667.Sql, cancellationToken);
        }
        catch (Exception tmp669)
        {
          tmp668.E = tmp669;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp668.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp670)
      {
        var tmp671 = $"Error occurred in {GetType().FullName}: {tmp670.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp670, tmp671);
        else
          Console.Error.WriteLine(tmp671);
        var tmp672 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp672.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp673 = new InternalStructs.sql_list_columns_args();
      await tmp673.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp674 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp674.Success = await _iAsync.sql_list_columns(tmp673.Sql, cancellationToken);
        }
        catch (Exception tmp675)
        {
          tmp674.E = tmp675;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp674.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp676)
      {
        var tmp677 = $"Error occurred in {GetType().FullName}: {tmp676.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp676, tmp677);
        else
          Console.Error.WriteLine(tmp677);
        var tmp678 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp678.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp679 = new InternalStructs.sql_compact_columns_args();
      await tmp679.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp680 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp680.Success = await _iAsync.sql_compact_columns(tmp679.Sql, cancellationToken);
        }
        catch (Exception tmp681)
        {
          tmp680.E = tmp681;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp680.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp682)
      {
        var tmp683 = $"Error occurred in {GetType().FullName}: {tmp682.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp682, tmp683);
        else
          Console.Error.WriteLine(tmp683);
        var tmp684 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp684.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp685 = new InternalStructs.sql_select_args();
      await tmp685.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp686 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp686.Success = await _iAsync.sql_select(tmp685.Sql, cancellationToken);
        }
        catch (Exception tmp687)
        {
          tmp686.E = tmp687;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp686.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp688)
      {
        var tmp689 = $"Error occurred in {GetType().FullName}: {tmp688.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp688, tmp689);
        else
          Console.Error.WriteLine(tmp689);
        var tmp690 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp690.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp691 = new InternalStructs.sql_select_plain_args();
      await tmp691.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp692 = new InternalStructs.sql_select_plain_result();
      try
      {
        try
        {
          tmp692.Success = await _iAsync.sql_select_plain(tmp691.Sql, cancellationToken);
        }
        catch (Exception tmp693)
        {
          tmp692.E = tmp693;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp692.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp694)
      {
        var tmp695 = $"Error occurred in {GetType().FullName}: {tmp694.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp694, tmp695);
        else
          Console.Error.WriteLine(tmp695);
        var tmp696 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp696.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp697 = new InternalStructs.sql_select_counter_args();
      await tmp697.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp698 = new InternalStructs.sql_select_counter_result();
      try
      {
        try
        {
          tmp698.Success = await _iAsync.sql_select_counter(tmp697.Sql, cancellationToken);
        }
        catch (Exception tmp699)
        {
          tmp698.E = tmp699;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp698.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp700)
      {
        var tmp701 = $"Error occurred in {GetType().FullName}: {tmp700.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp700, tmp701);
        else
          Console.Error.WriteLine(tmp701);
        var tmp702 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp702.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp703 = new InternalStructs.sql_select_serial_args();
      await tmp703.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp704 = new InternalStructs.sql_select_serial_result();
      try
      {
        try
        {
          tmp704.Success = await _iAsync.sql_select_serial(tmp703.Sql, cancellationToken);
        }
        catch (Exception tmp705)
        {
          tmp704.E = tmp705;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp704.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp706)
      {
        var tmp707 = $"Error occurred in {GetType().FullName}: {tmp706.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp706, tmp707);
        else
          Console.Error.WriteLine(tmp707);
        var tmp708 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp708.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp709 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp709.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp710 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp710.Success = await _iAsync.sql_select_rslt_on_column(tmp709.Sql, cancellationToken);
        }
        catch (Exception tmp711)
        {
          tmp710.E = tmp711;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp710.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp712)
      {
        var tmp713 = $"Error occurred in {GetType().FullName}: {tmp712.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp712, tmp713);
        else
          Console.Error.WriteLine(tmp713);
        var tmp714 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp714.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp715 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp715.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp716 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp716.Success = await _iAsync.sql_select_rslt_on_key(tmp715.Sql, cancellationToken);
        }
        catch (Exception tmp717)
        {
          tmp716.E = tmp717;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp716.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp718)
      {
        var tmp719 = $"Error occurred in {GetType().FullName}: {tmp718.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp718, tmp719);
        else
          Console.Error.WriteLine(tmp719);
        var tmp720 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp720.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp721 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp721.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp722 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp722.Success = await _iAsync.sql_select_rslt_on_fraction(tmp721.Sql, cancellationToken);
        }
        catch (Exception tmp723)
        {
          tmp722.E = tmp723;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp722.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp724)
      {
        var tmp725 = $"Error occurred in {GetType().FullName}: {tmp724.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp724, tmp725);
        else
          Console.Error.WriteLine(tmp725);
        var tmp726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp726.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp727 = new InternalStructs.sql_query_args();
      await tmp727.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp728 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp728.Success = await _iAsync.sql_query(tmp727.Sql, tmp727.Rslt, cancellationToken);
        }
        catch (Exception tmp729)
        {
          tmp728.E = tmp729;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp728.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp730)
      {
        var tmp731 = $"Error occurred in {GetType().FullName}: {tmp730.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp730, tmp731);
        else
          Console.Error.WriteLine(tmp731);
        var tmp732 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp732.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp733 = new InternalStructs.sql_update_args();
      await tmp733.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp734 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp733.Sql, tmp733.Updater_id, cancellationToken);
        }
        catch (Exception tmp735)
        {
          tmp734.E = tmp735;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp734.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp736)
      {
        var tmp737 = $"Error occurred in {GetType().FullName}: {tmp736.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp736, tmp737);
        else
          Console.Error.WriteLine(tmp737);
        var tmp738 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp738.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp739 = new InternalStructs.exec_sql_args();
      await tmp739.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp740 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp740.Success = await _iAsync.exec_sql(tmp739.Sql, cancellationToken);
        }
        catch (Exception tmp741)
        {
          tmp740.E = tmp741;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp740.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp742)
      {
        var tmp743 = $"Error occurred in {GetType().FullName}: {tmp742.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp742, tmp743);
        else
          Console.Error.WriteLine(tmp743);
        var tmp744 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp744.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp745 = new InternalStructs.updater_create_args();
      await tmp745.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp746 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp746.Success = await _iAsync.updater_create(tmp745.Buffer_size, cancellationToken);
        }
        catch (Exception tmp747)
        {
          tmp746.E = tmp747;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp746.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp748)
      {
        var tmp749 = $"Error occurred in {GetType().FullName}: {tmp748.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp748, tmp749);
        else
          Console.Error.WriteLine(tmp749);
        var tmp750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp750.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp751 = new InternalStructs.updater_close_args();
      await tmp751.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp752 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp751.Id, cancellationToken);
        }
        catch (Exception tmp753)
        {
          tmp752.E = tmp753;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp752.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp754)
      {
        var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
        else
          Console.Error.WriteLine(tmp755);
        var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp756.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp757 = new InternalStructs.update_plain_args();
      await tmp757.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp758 = new InternalStructs.update_plain_result();
      try
      {
        try
        {
          await _iAsync.update_plain(tmp757.Cells, tmp757.Updater_id, cancellationToken);
        }
        catch (Exception tmp759)
        {
          tmp758.E = tmp759;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp758.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp760)
      {
        var tmp761 = $"Error occurred in {GetType().FullName}: {tmp760.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp760, tmp761);
        else
          Console.Error.WriteLine(tmp761);
        var tmp762 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp762.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp763 = new InternalStructs.update_counter_args();
      await tmp763.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp764 = new InternalStructs.update_counter_result();
      try
      {
        try
        {
          await _iAsync.update_counter(tmp763.Cells, tmp763.Updater_id, cancellationToken);
        }
        catch (Exception tmp765)
        {
          tmp764.E = tmp765;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp764.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp766)
      {
        var tmp767 = $"Error occurred in {GetType().FullName}: {tmp766.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp766, tmp767);
        else
          Console.Error.WriteLine(tmp767);
        var tmp768 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp768.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp769 = new InternalStructs.update_serial_args();
      await tmp769.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp770 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp769.Cells, tmp769.Updater_id, cancellationToken);
        }
        catch (Exception tmp771)
        {
          tmp770.E = tmp771;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp770.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp772)
      {
        var tmp773 = $"Error occurred in {GetType().FullName}: {tmp772.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp772, tmp773);
        else
          Console.Error.WriteLine(tmp773);
        var tmp774 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp774.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_by_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp775 = new InternalStructs.update_by_types_args();
      await tmp775.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp776 = new InternalStructs.update_by_types_result();
      try
      {
        try
        {
          await _iAsync.update_by_types(tmp775.Plain, tmp775.Counter, tmp775.Serial, tmp775.Updater_id, cancellationToken);
        }
        catch (Exception tmp777)
        {
          tmp776.E = tmp777;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Reply, seqid), cancellationToken); 
        await tmp776.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp778)
      {
        var tmp779 = $"Error occurred in {GetType().FullName}: {tmp778.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp778, tmp779);
        else
          Console.Error.WriteLine(tmp779);
        var tmp780 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Exception, seqid), cancellationToken);
        await tmp780.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp781 = new InternalStructs.mng_column_args();
      await tmp781.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp782 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp781.Func, tmp781.Schema, cancellationToken);
        }
        catch (Exception tmp783)
        {
          tmp782.E = tmp783;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp782.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp784)
      {
        var tmp785 = $"Error occurred in {GetType().FullName}: {tmp784.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp784, tmp785);
        else
          Console.Error.WriteLine(tmp785);
        var tmp786 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp786.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp787 = new InternalStructs.list_columns_args();
      await tmp787.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp788 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp788.Success = await _iAsync.list_columns(tmp787.Spec, cancellationToken);
        }
        catch (Exception tmp789)
        {
          tmp788.E = tmp789;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp788.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp790)
      {
        var tmp791 = $"Error occurred in {GetType().FullName}: {tmp790.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp790, tmp791);
        else
          Console.Error.WriteLine(tmp791);
        var tmp792 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp792.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp793 = new InternalStructs.compact_columns_args();
      await tmp793.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp794 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp794.Success = await _iAsync.compact_columns(tmp793.Spec, cancellationToken);
        }
        catch (Exception tmp795)
        {
          tmp794.E = tmp795;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp794.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp796)
      {
        var tmp797 = $"Error occurred in {GetType().FullName}: {tmp796.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp796, tmp797);
        else
          Console.Error.WriteLine(tmp797);
        var tmp798 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp798.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp799 = new InternalStructs.scan_args();
      await tmp799.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp800 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp800.Success = await _iAsync.scan(tmp799.Spec, cancellationToken);
        }
        catch (Exception tmp801)
        {
          tmp800.E = tmp801;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp800.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp802)
      {
        var tmp803 = $"Error occurred in {GetType().FullName}: {tmp802.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp802, tmp803);
        else
          Console.Error.WriteLine(tmp803);
        var tmp804 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp804.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp805 = new InternalStructs.scan_rslt_on_column_args();
      await tmp805.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp806 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp806.Success = await _iAsync.scan_rslt_on_column(tmp805.Spec, cancellationToken);
        }
        catch (Exception tmp807)
        {
          tmp806.E = tmp807;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp806.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp808)
      {
        var tmp809 = $"Error occurred in {GetType().FullName}: {tmp808.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp808, tmp809);
        else
          Console.Error.WriteLine(tmp809);
        var tmp810 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp810.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp811 = new InternalStructs.scan_rslt_on_key_args();
      await tmp811.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp812 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp812.Success = await _iAsync.scan_rslt_on_key(tmp811.Spec, cancellationToken);
        }
        catch (Exception tmp813)
        {
          tmp812.E = tmp813;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp812.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp814)
      {
        var tmp815 = $"Error occurred in {GetType().FullName}: {tmp814.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp814, tmp815);
        else
          Console.Error.WriteLine(tmp815);
        var tmp816 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp816.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp817 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp817.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp818 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp818.Success = await _iAsync.scan_rslt_on_fraction(tmp817.Spec, cancellationToken);
        }
        catch (Exception tmp819)
        {
          tmp818.E = tmp819;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp818.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp820)
      {
        var tmp821 = $"Error occurred in {GetType().FullName}: {tmp820.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp820, tmp821);
        else
          Console.Error.WriteLine(tmp821);
        var tmp822 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp822.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp823 = new InternalStructs.scan_rslt_on_args();
      await tmp823.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp824 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp824.Success = await _iAsync.scan_rslt_on(tmp823.Spec, tmp823.Rslt, cancellationToken);
        }
        catch (Exception tmp825)
        {
          tmp824.E = tmp825;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp824.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp826)
      {
        var tmp827 = $"Error occurred in {GetType().FullName}: {tmp826.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp826, tmp827);
        else
          Console.Error.WriteLine(tmp827);
        var tmp828 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp828.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp829 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp829.Sql = this.Sql;
        }
        tmp829.__isset.sql = this.__isset.sql;
        return tmp829;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp830 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp830, cancellationToken);
          var tmp831 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp831.Name = "sql";
            tmp831.Type = TType.String;
            tmp831.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp831, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp832 = new StringBuilder("sql_mng_column_args(");
        int tmp833 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp833++) { tmp832.Append(", "); }
          tmp832.Append("Sql: ");
          Sql.ToString(tmp832);
        }
        tmp832.Append(')');
        return tmp832.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp834 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp834.E = (Exception)this.E.DeepCopy();
        }
        tmp834.__isset.e = this.__isset.e;
        return tmp834;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp835 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp835, cancellationToken);
          var tmp836 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp836.Name = "E";
              tmp836.Type = TType.Struct;
              tmp836.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp836, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp837 = new StringBuilder("sql_mng_column_result(");
        int tmp838 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp838++) { tmp837.Append(", "); }
          tmp837.Append("E: ");
          E.ToString(tmp837);
        }
        tmp837.Append(')');
        return tmp837.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp839 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp839.Sql = this.Sql;
        }
        tmp839.__isset.sql = this.__isset.sql;
        return tmp839;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp840 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp840, cancellationToken);
          var tmp841 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp841.Name = "sql";
            tmp841.Type = TType.String;
            tmp841.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp841, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp842 = new StringBuilder("sql_list_columns_args(");
        int tmp843 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp843++) { tmp842.Append(", "); }
          tmp842.Append("Sql: ");
          Sql.ToString(tmp842);
        }
        tmp842.Append(')');
        return tmp842.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp844 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp844.Success = this.Success.DeepCopy();
        }
        tmp844.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp844.E = (Exception)this.E.DeepCopy();
        }
        tmp844.__isset.e = this.__isset.e;
        return tmp844;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list845 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list845.Count);
                    for(int _i846 = 0; _i846 < _list845.Count; ++_i846)
                    {
                      Schema _elem847;
                      _elem847 = new Schema();
                      await _elem847.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem847);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp848 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp848, cancellationToken);
          var tmp849 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp849.Name = "Success";
              tmp849.Type = TType.List;
              tmp849.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp849, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter850 in Success)
              {
                await _iter850.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp849.Name = "E";
              tmp849.Type = TType.Struct;
              tmp849.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp849, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp851 = new StringBuilder("sql_list_columns_result(");
        int tmp852 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp852++) { tmp851.Append(", "); }
          tmp851.Append("Success: ");
          Success.ToString(tmp851);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp852++) { tmp851.Append(", "); }
          tmp851.Append("E: ");
          E.ToString(tmp851);
        }
        tmp851.Append(')');
        return tmp851.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp853 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp853.Sql = this.Sql;
        }
        tmp853.__isset.sql = this.__isset.sql;
        return tmp853;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp854 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp854, cancellationToken);
          var tmp855 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp855.Name = "sql";
            tmp855.Type = TType.String;
            tmp855.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp855, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp856 = new StringBuilder("sql_compact_columns_args(");
        int tmp857 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp857++) { tmp856.Append(", "); }
          tmp856.Append("Sql: ");
          Sql.ToString(tmp856);
        }
        tmp856.Append(')');
        return tmp856.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp858 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp858.Success = this.Success.DeepCopy();
        }
        tmp858.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp858.E = (Exception)this.E.DeepCopy();
        }
        tmp858.__isset.e = this.__isset.e;
        return tmp858;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list859 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list859.Count);
                    for(int _i860 = 0; _i860 < _list859.Count; ++_i860)
                    {
                      CompactResult _elem861;
                      _elem861 = new CompactResult();
                      await _elem861.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem861);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp862 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp862, cancellationToken);
          var tmp863 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp863.Name = "Success";
              tmp863.Type = TType.List;
              tmp863.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp863, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter864 in Success)
              {
                await _iter864.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp863.Name = "E";
              tmp863.Type = TType.Struct;
              tmp863.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp863, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp865 = new StringBuilder("sql_compact_columns_result(");
        int tmp866 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp866++) { tmp865.Append(", "); }
          tmp865.Append("Success: ");
          Success.ToString(tmp865);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp866++) { tmp865.Append(", "); }
          tmp865.Append("E: ");
          E.ToString(tmp865);
        }
        tmp865.Append(')');
        return tmp865.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp867 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp867.Sql = this.Sql;
        }
        tmp867.__isset.sql = this.__isset.sql;
        return tmp867;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp868 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp868, cancellationToken);
          var tmp869 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp869.Name = "sql";
            tmp869.Type = TType.String;
            tmp869.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp869, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp870 = new StringBuilder("sql_select_args(");
        int tmp871 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp871++) { tmp870.Append(", "); }
          tmp870.Append("Sql: ");
          Sql.ToString(tmp870);
        }
        tmp870.Append(')');
        return tmp870.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp872 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp872.Success = (Cells)this.Success.DeepCopy();
        }
        tmp872.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp872.E = (Exception)this.E.DeepCopy();
        }
        tmp872.__isset.e = this.__isset.e;
        return tmp872;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp873 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp873, cancellationToken);
          var tmp874 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp874.Name = "Success";
              tmp874.Type = TType.Struct;
              tmp874.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp874, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp874.Name = "E";
              tmp874.Type = TType.Struct;
              tmp874.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp874, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp875 = new StringBuilder("sql_select_result(");
        int tmp876 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp876++) { tmp875.Append(", "); }
          tmp875.Append("Success: ");
          Success.ToString(tmp875);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp876++) { tmp875.Append(", "); }
          tmp875.Append("E: ");
          E.ToString(tmp875);
        }
        tmp875.Append(')');
        return tmp875.ToString();
      }
    }


    public partial class sql_select_plain_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_plain_args()
      {
      }

      public sql_select_plain_args DeepCopy()
      {
        var tmp877 = new sql_select_plain_args();
        if((Sql != null) && __isset.sql)
        {
          tmp877.Sql = this.Sql;
        }
        tmp877.__isset.sql = this.__isset.sql;
        return tmp877;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp878 = new TStruct("sql_select_plain_args");
          await oprot.WriteStructBeginAsync(tmp878, cancellationToken);
          var tmp879 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp879.Name = "sql";
            tmp879.Type = TType.String;
            tmp879.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp879, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp880 = new StringBuilder("sql_select_plain_args(");
        int tmp881 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp881++) { tmp880.Append(", "); }
          tmp880.Append("Sql: ");
          Sql.ToString(tmp880);
        }
        tmp880.Append(')');
        return tmp880.ToString();
      }
    }


    public partial class sql_select_plain_result : TBase
    {
      private List<CellPlain> _success;
      private Exception _e;

      public List<CellPlain> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_plain_result()
      {
      }

      public sql_select_plain_result DeepCopy()
      {
        var tmp882 = new sql_select_plain_result();
        if((Success != null) && __isset.success)
        {
          tmp882.Success = this.Success.DeepCopy();
        }
        tmp882.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp882.E = (Exception)this.E.DeepCopy();
        }
        tmp882.__isset.e = this.__isset.e;
        return tmp882;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list883 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellPlain>(_list883.Count);
                    for(int _i884 = 0; _i884 < _list883.Count; ++_i884)
                    {
                      CellPlain _elem885;
                      _elem885 = new CellPlain();
                      await _elem885.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem885);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp886 = new TStruct("sql_select_plain_result");
          await oprot.WriteStructBeginAsync(tmp886, cancellationToken);
          var tmp887 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp887.Name = "Success";
              tmp887.Type = TType.List;
              tmp887.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp887, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellPlain _iter888 in Success)
              {
                await _iter888.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp887.Name = "E";
              tmp887.Type = TType.Struct;
              tmp887.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp887, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp889 = new StringBuilder("sql_select_plain_result(");
        int tmp890 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp890++) { tmp889.Append(", "); }
          tmp889.Append("Success: ");
          Success.ToString(tmp889);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp890++) { tmp889.Append(", "); }
          tmp889.Append("E: ");
          E.ToString(tmp889);
        }
        tmp889.Append(')');
        return tmp889.ToString();
      }
    }


    public partial class sql_select_counter_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_counter_args()
      {
      }

      public sql_select_counter_args DeepCopy()
      {
        var tmp891 = new sql_select_counter_args();
        if((Sql != null) && __isset.sql)
        {
          tmp891.Sql = this.Sql;
        }
        tmp891.__isset.sql = this.__isset.sql;
        return tmp891;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp892 = new TStruct("sql_select_counter_args");
          await oprot.WriteStructBeginAsync(tmp892, cancellationToken);
          var tmp893 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp893.Name = "sql";
            tmp893.Type = TType.String;
            tmp893.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp893, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp894 = new StringBuilder("sql_select_counter_args(");
        int tmp895 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp895++) { tmp894.Append(", "); }
          tmp894.Append("Sql: ");
          Sql.ToString(tmp894);
        }
        tmp894.Append(')');
        return tmp894.ToString();
      }
    }


    public partial class sql_select_counter_result : TBase
    {
      private List<CellCounter> _success;
      private Exception _e;

      public List<CellCounter> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_counter_result()
      {
      }

      public sql_select_counter_result DeepCopy()
      {
        var tmp896 = new sql_select_counter_result();
        if((Success != null) && __isset.success)
        {
          tmp896.Success = this.Success.DeepCopy();
        }
        tmp896.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp896.E = (Exception)this.E.DeepCopy();
        }
        tmp896.__isset.e = this.__isset.e;
        return tmp896;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list897 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellCounter>(_list897.Count);
                    for(int _i898 = 0; _i898 < _list897.Count; ++_i898)
                    {
                      CellCounter _elem899;
                      _elem899 = new CellCounter();
                      await _elem899.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem899);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp900 = new TStruct("sql_select_counter_result");
          await oprot.WriteStructBeginAsync(tmp900, cancellationToken);
          var tmp901 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp901.Name = "Success";
              tmp901.Type = TType.List;
              tmp901.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp901, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellCounter _iter902 in Success)
              {
                await _iter902.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp901.Name = "E";
              tmp901.Type = TType.Struct;
              tmp901.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp901, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp903 = new StringBuilder("sql_select_counter_result(");
        int tmp904 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp904++) { tmp903.Append(", "); }
          tmp903.Append("Success: ");
          Success.ToString(tmp903);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp904++) { tmp903.Append(", "); }
          tmp903.Append("E: ");
          E.ToString(tmp903);
        }
        tmp903.Append(')');
        return tmp903.ToString();
      }
    }


    public partial class sql_select_serial_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_serial_args()
      {
      }

      public sql_select_serial_args DeepCopy()
      {
        var tmp905 = new sql_select_serial_args();
        if((Sql != null) && __isset.sql)
        {
          tmp905.Sql = this.Sql;
        }
        tmp905.__isset.sql = this.__isset.sql;
        return tmp905;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp906 = new TStruct("sql_select_serial_args");
          await oprot.WriteStructBeginAsync(tmp906, cancellationToken);
          var tmp907 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp907.Name = "sql";
            tmp907.Type = TType.String;
            tmp907.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp907, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp908 = new StringBuilder("sql_select_serial_args(");
        int tmp909 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp909++) { tmp908.Append(", "); }
          tmp908.Append("Sql: ");
          Sql.ToString(tmp908);
        }
        tmp908.Append(')');
        return tmp908.ToString();
      }
    }


    public partial class sql_select_serial_result : TBase
    {
      private List<CellSerial> _success;
      private Exception _e;

      public List<CellSerial> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_serial_result()
      {
      }

      public sql_select_serial_result DeepCopy()
      {
        var tmp910 = new sql_select_serial_result();
        if((Success != null) && __isset.success)
        {
          tmp910.Success = this.Success.DeepCopy();
        }
        tmp910.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp910.E = (Exception)this.E.DeepCopy();
        }
        tmp910.__isset.e = this.__isset.e;
        return tmp910;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list911 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellSerial>(_list911.Count);
                    for(int _i912 = 0; _i912 < _list911.Count; ++_i912)
                    {
                      CellSerial _elem913;
                      _elem913 = new CellSerial();
                      await _elem913.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem913);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp914 = new TStruct("sql_select_serial_result");
          await oprot.WriteStructBeginAsync(tmp914, cancellationToken);
          var tmp915 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp915.Name = "Success";
              tmp915.Type = TType.List;
              tmp915.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp915, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellSerial _iter916 in Success)
              {
                await _iter916.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp915.Name = "E";
              tmp915.Type = TType.Struct;
              tmp915.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp915, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp917 = new StringBuilder("sql_select_serial_result(");
        int tmp918 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp918++) { tmp917.Append(", "); }
          tmp917.Append("Success: ");
          Success.ToString(tmp917);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp918++) { tmp917.Append(", "); }
          tmp917.Append("E: ");
          E.ToString(tmp917);
        }
        tmp917.Append(')');
        return tmp917.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp919 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp919.Sql = this.Sql;
        }
        tmp919.__isset.sql = this.__isset.sql;
        return tmp919;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp920 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp920, cancellationToken);
          var tmp921 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp921.Name = "sql";
            tmp921.Type = TType.String;
            tmp921.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp921, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp922 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp923 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp923++) { tmp922.Append(", "); }
          tmp922.Append("Sql: ");
          Sql.ToString(tmp922);
        }
        tmp922.Append(')');
        return tmp922.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp924 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp924.Success = this.Success.DeepCopy();
        }
        tmp924.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp924.E = (Exception)this.E.DeepCopy();
        }
        tmp924.__isset.e = this.__isset.e;
        return tmp924;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map925 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map925.Count);
                    for(int _i926 = 0; _i926 < _map925.Count; ++_i926)
                    {
                      string _key927;
                      ColCells _val928;
                      _key927 = await iprot.ReadStringAsync(cancellationToken);
                      _val928 = new ColCells();
                      await _val928.ReadAsync(iprot, cancellationToken);
                      Success[_key927] = _val928;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp929 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp929, cancellationToken);
          var tmp930 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp930.Name = "Success";
              tmp930.Type = TType.Map;
              tmp930.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp930, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter931 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter931, cancellationToken);
                await Success[_iter931].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp930.Name = "E";
              tmp930.Type = TType.Struct;
              tmp930.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp930, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp932 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp933 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp933++) { tmp932.Append(", "); }
          tmp932.Append("Success: ");
          Success.ToString(tmp932);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp933++) { tmp932.Append(", "); }
          tmp932.Append("E: ");
          E.ToString(tmp932);
        }
        tmp932.Append(')');
        return tmp932.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp934 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp934.Sql = this.Sql;
        }
        tmp934.__isset.sql = this.__isset.sql;
        return tmp934;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp935 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp935, cancellationToken);
          var tmp936 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp936.Name = "sql";
            tmp936.Type = TType.String;
            tmp936.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp936, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp937 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp938 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp938++) { tmp937.Append(", "); }
          tmp937.Append("Sql: ");
          Sql.ToString(tmp937);
        }
        tmp937.Append(')');
        return tmp937.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp939 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp939.Success = this.Success.DeepCopy();
        }
        tmp939.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp939.E = (Exception)this.E.DeepCopy();
        }
        tmp939.__isset.e = this.__isset.e;
        return tmp939;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list940 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list940.Count);
                    for(int _i941 = 0; _i941 < _list940.Count; ++_i941)
                    {
                      kCells _elem942;
                      _elem942 = new kCells();
                      await _elem942.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem942);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp943 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp943, cancellationToken);
          var tmp944 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp944.Name = "Success";
              tmp944.Type = TType.List;
              tmp944.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp944, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter945 in Success)
              {
                await _iter945.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp944.Name = "E";
              tmp944.Type = TType.Struct;
              tmp944.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp944, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp946 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp947 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp947++) { tmp946.Append(", "); }
          tmp946.Append("Success: ");
          Success.ToString(tmp946);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp947++) { tmp946.Append(", "); }
          tmp946.Append("E: ");
          E.ToString(tmp946);
        }
        tmp946.Append(')');
        return tmp946.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp948 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp948.Sql = this.Sql;
        }
        tmp948.__isset.sql = this.__isset.sql;
        return tmp948;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp949 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp949, cancellationToken);
          var tmp950 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp950.Name = "sql";
            tmp950.Type = TType.String;
            tmp950.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp950, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp951 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp952 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp952++) { tmp951.Append(", "); }
          tmp951.Append("Sql: ");
          Sql.ToString(tmp951);
        }
        tmp951.Append(')');
        return tmp951.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp953 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp953.Success = (FCells)this.Success.DeepCopy();
        }
        tmp953.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp953.E = (Exception)this.E.DeepCopy();
        }
        tmp953.__isset.e = this.__isset.e;
        return tmp953;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp954 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp954, cancellationToken);
          var tmp955 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp955.Name = "Success";
              tmp955.Type = TType.Struct;
              tmp955.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp955, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp955.Name = "E";
              tmp955.Type = TType.Struct;
              tmp955.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp955, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp956 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp957 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp957++) { tmp956.Append(", "); }
          tmp956.Append("Success: ");
          Success.ToString(tmp956);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp957++) { tmp956.Append(", "); }
          tmp956.Append("E: ");
          E.ToString(tmp956);
        }
        tmp956.Append(')');
        return tmp956.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp958 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp958.Sql = this.Sql;
        }
        tmp958.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp958.Rslt = this.Rslt;
        }
        tmp958.__isset.rslt = this.__isset.rslt;
        return tmp958;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp959 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp959, cancellationToken);
          var tmp960 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp960.Name = "sql";
            tmp960.Type = TType.String;
            tmp960.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp960, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp960.Name = "rslt";
            tmp960.Type = TType.I32;
            tmp960.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp960, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp961 = new StringBuilder("sql_query_args(");
        int tmp962 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp962++) { tmp961.Append(", "); }
          tmp961.Append("Sql: ");
          Sql.ToString(tmp961);
        }
        if(__isset.rslt)
        {
          if(0 < tmp962++) { tmp961.Append(", "); }
          tmp961.Append("Rslt: ");
          Rslt.ToString(tmp961);
        }
        tmp961.Append(')');
        return tmp961.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp963 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp963.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp963.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp963.E = (Exception)this.E.DeepCopy();
        }
        tmp963.__isset.e = this.__isset.e;
        return tmp963;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp964 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp964, cancellationToken);
          var tmp965 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp965.Name = "Success";
              tmp965.Type = TType.Struct;
              tmp965.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp965, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp965.Name = "E";
              tmp965.Type = TType.Struct;
              tmp965.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp965, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp966 = new StringBuilder("sql_query_result(");
        int tmp967 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp967++) { tmp966.Append(", "); }
          tmp966.Append("Success: ");
          Success.ToString(tmp966);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp967++) { tmp966.Append(", "); }
          tmp966.Append("E: ");
          E.ToString(tmp966);
        }
        tmp966.Append(')');
        return tmp966.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp968 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp968.Sql = this.Sql;
        }
        tmp968.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp968.Updater_id = this.Updater_id;
        }
        tmp968.__isset.updater_id = this.__isset.updater_id;
        return tmp968;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp969 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp969, cancellationToken);
          var tmp970 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp970.Name = "sql";
            tmp970.Type = TType.String;
            tmp970.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp970, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp970.Name = "updater_id";
            tmp970.Type = TType.I64;
            tmp970.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp970, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp971 = new StringBuilder("sql_update_args(");
        int tmp972 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp972++) { tmp971.Append(", "); }
          tmp971.Append("Sql: ");
          Sql.ToString(tmp971);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp972++) { tmp971.Append(", "); }
          tmp971.Append("Updater_id: ");
          Updater_id.ToString(tmp971);
        }
        tmp971.Append(')');
        return tmp971.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp973 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp973.E = (Exception)this.E.DeepCopy();
        }
        tmp973.__isset.e = this.__isset.e;
        return tmp973;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp974 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp974, cancellationToken);
          var tmp975 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp975.Name = "E";
              tmp975.Type = TType.Struct;
              tmp975.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp975, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp976 = new StringBuilder("sql_update_result(");
        int tmp977 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp977++) { tmp976.Append(", "); }
          tmp976.Append("E: ");
          E.ToString(tmp976);
        }
        tmp976.Append(')');
        return tmp976.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp978 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp978.Sql = this.Sql;
        }
        tmp978.__isset.sql = this.__isset.sql;
        return tmp978;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp979 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp979, cancellationToken);
          var tmp980 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp980.Name = "sql";
            tmp980.Type = TType.String;
            tmp980.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp980, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp981 = new StringBuilder("exec_sql_args(");
        int tmp982 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp982++) { tmp981.Append(", "); }
          tmp981.Append("Sql: ");
          Sql.ToString(tmp981);
        }
        tmp981.Append(')');
        return tmp981.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp983 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp983.Success = (Result)this.Success.DeepCopy();
        }
        tmp983.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp983.E = (Exception)this.E.DeepCopy();
        }
        tmp983.__isset.e = this.__isset.e;
        return tmp983;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp984 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp984, cancellationToken);
          var tmp985 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp985.Name = "Success";
              tmp985.Type = TType.Struct;
              tmp985.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp985, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp985.Name = "E";
              tmp985.Type = TType.Struct;
              tmp985.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp985, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp986 = new StringBuilder("exec_sql_result(");
        int tmp987 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp987++) { tmp986.Append(", "); }
          tmp986.Append("Success: ");
          Success.ToString(tmp986);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp987++) { tmp986.Append(", "); }
          tmp986.Append("E: ");
          E.ToString(tmp986);
        }
        tmp986.Append(')');
        return tmp986.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp988 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp988.Buffer_size = this.Buffer_size;
        }
        tmp988.__isset.buffer_size = this.__isset.buffer_size;
        return tmp988;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp989 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp989, cancellationToken);
          var tmp990 = new TField();
          if(__isset.buffer_size)
          {
            tmp990.Name = "buffer_size";
            tmp990.Type = TType.I32;
            tmp990.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp990, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp991 = new StringBuilder("updater_create_args(");
        int tmp992 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp992++) { tmp991.Append(", "); }
          tmp991.Append("Buffer_size: ");
          Buffer_size.ToString(tmp991);
        }
        tmp991.Append(')');
        return tmp991.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp993 = new updater_create_result();
        if(__isset.success)
        {
          tmp993.Success = this.Success;
        }
        tmp993.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp993.E = (Exception)this.E.DeepCopy();
        }
        tmp993.__isset.e = this.__isset.e;
        return tmp993;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp994 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
          var tmp995 = new TField();

          if(this.__isset.success)
          {
            tmp995.Name = "Success";
            tmp995.Type = TType.I64;
            tmp995.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp995.Name = "E";
              tmp995.Type = TType.Struct;
              tmp995.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp996 = new StringBuilder("updater_create_result(");
        int tmp997 = 0;
        if(__isset.success)
        {
          if(0 < tmp997++) { tmp996.Append(", "); }
          tmp996.Append("Success: ");
          Success.ToString(tmp996);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp997++) { tmp996.Append(", "); }
          tmp996.Append("E: ");
          E.ToString(tmp996);
        }
        tmp996.Append(')');
        return tmp996.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp998 = new updater_close_args();
        if(__isset.id)
        {
          tmp998.Id = this.Id;
        }
        tmp998.__isset.id = this.__isset.id;
        return tmp998;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp999 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp999, cancellationToken);
          var tmp1000 = new TField();
          if(__isset.id)
          {
            tmp1000.Name = "id";
            tmp1000.Type = TType.I64;
            tmp1000.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1000, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1001 = new StringBuilder("updater_close_args(");
        int tmp1002 = 0;
        if(__isset.id)
        {
          if(0 < tmp1002++) { tmp1001.Append(", "); }
          tmp1001.Append("Id: ");
          Id.ToString(tmp1001);
        }
        tmp1001.Append(')');
        return tmp1001.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp1003 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp1003.E = (Exception)this.E.DeepCopy();
        }
        tmp1003.__isset.e = this.__isset.e;
        return tmp1003;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1004 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp1004, cancellationToken);
          var tmp1005 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1005.Name = "E";
              tmp1005.Type = TType.Struct;
              tmp1005.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1005, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1006 = new StringBuilder("updater_close_result(");
        int tmp1007 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1007++) { tmp1006.Append(", "); }
          tmp1006.Append("E: ");
          E.ToString(tmp1006);
        }
        tmp1006.Append(')');
        return tmp1006.ToString();
      }
    }


    public partial class update_plain_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_plain_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_plain_args DeepCopy()
      {
        var tmp1008 = new update_plain_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1008.Cells = this.Cells.DeepCopy();
        }
        tmp1008.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1008.Updater_id = this.Updater_id;
        }
        tmp1008.__isset.updater_id = this.__isset.updater_id;
        return tmp1008;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1009 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellPlain>>(_map1009.Count);
                    for(int _i1010 = 0; _i1010 < _map1009.Count; ++_i1010)
                    {
                      long _key1011;
                      List<UCellPlain> _val1012;
                      _key1011 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1013 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1012 = new List<UCellPlain>(_list1013.Count);
                        for(int _i1014 = 0; _i1014 < _list1013.Count; ++_i1014)
                        {
                          UCellPlain _elem1015;
                          _elem1015 = new UCellPlain();
                          await _elem1015.ReadAsync(iprot, cancellationToken);
                          _val1012.Add(_elem1015);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1011] = _val1012;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1016 = new TStruct("update_plain_args");
          await oprot.WriteStructBeginAsync(tmp1016, cancellationToken);
          var tmp1017 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1017.Name = "cells";
            tmp1017.Type = TType.Map;
            tmp1017.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1017, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1018 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1018, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1018].Count), cancellationToken);
              foreach (UCellPlain _iter1019 in Cells[_iter1018])
              {
                await _iter1019.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1017.Name = "updater_id";
            tmp1017.Type = TType.I64;
            tmp1017.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1017, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1020 = new StringBuilder("update_plain_args(");
        int tmp1021 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1021++) { tmp1020.Append(", "); }
          tmp1020.Append("Cells: ");
          Cells.ToString(tmp1020);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1021++) { tmp1020.Append(", "); }
          tmp1020.Append("Updater_id: ");
          Updater_id.ToString(tmp1020);
        }
        tmp1020.Append(')');
        return tmp1020.ToString();
      }
    }


    public partial class update_plain_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_plain_result()
      {
      }

      public update_plain_result DeepCopy()
      {
        var tmp1022 = new update_plain_result();
        if((E != null) && __isset.e)
        {
          tmp1022.E = (Exception)this.E.DeepCopy();
        }
        tmp1022.__isset.e = this.__isset.e;
        return tmp1022;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1023 = new TStruct("update_plain_result");
          await oprot.WriteStructBeginAsync(tmp1023, cancellationToken);
          var tmp1024 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1024.Name = "E";
              tmp1024.Type = TType.Struct;
              tmp1024.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1024, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1025 = new StringBuilder("update_plain_result(");
        int tmp1026 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1026++) { tmp1025.Append(", "); }
          tmp1025.Append("E: ");
          E.ToString(tmp1025);
        }
        tmp1025.Append(')');
        return tmp1025.ToString();
      }
    }


    public partial class update_counter_args : TBase
    {
      private Dictionary<long, List<UCellCounter>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Counter Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_counter_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_counter_args DeepCopy()
      {
        var tmp1027 = new update_counter_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1027.Cells = this.Cells.DeepCopy();
        }
        tmp1027.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1027.Updater_id = this.Updater_id;
        }
        tmp1027.__isset.updater_id = this.__isset.updater_id;
        return tmp1027;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1028 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellCounter>>(_map1028.Count);
                    for(int _i1029 = 0; _i1029 < _map1028.Count; ++_i1029)
                    {
                      long _key1030;
                      List<UCellCounter> _val1031;
                      _key1030 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1032 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1031 = new List<UCellCounter>(_list1032.Count);
                        for(int _i1033 = 0; _i1033 < _list1032.Count; ++_i1033)
                        {
                          UCellCounter _elem1034;
                          _elem1034 = new UCellCounter();
                          await _elem1034.ReadAsync(iprot, cancellationToken);
                          _val1031.Add(_elem1034);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1030] = _val1031;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1035 = new TStruct("update_counter_args");
          await oprot.WriteStructBeginAsync(tmp1035, cancellationToken);
          var tmp1036 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1036.Name = "cells";
            tmp1036.Type = TType.Map;
            tmp1036.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1036, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1037 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1037, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1037].Count), cancellationToken);
              foreach (UCellCounter _iter1038 in Cells[_iter1037])
              {
                await _iter1038.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1036.Name = "updater_id";
            tmp1036.Type = TType.I64;
            tmp1036.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1036, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1039 = new StringBuilder("update_counter_args(");
        int tmp1040 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1040++) { tmp1039.Append(", "); }
          tmp1039.Append("Cells: ");
          Cells.ToString(tmp1039);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1040++) { tmp1039.Append(", "); }
          tmp1039.Append("Updater_id: ");
          Updater_id.ToString(tmp1039);
        }
        tmp1039.Append(')');
        return tmp1039.ToString();
      }
    }


    public partial class update_counter_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_counter_result()
      {
      }

      public update_counter_result DeepCopy()
      {
        var tmp1041 = new update_counter_result();
        if((E != null) && __isset.e)
        {
          tmp1041.E = (Exception)this.E.DeepCopy();
        }
        tmp1041.__isset.e = this.__isset.e;
        return tmp1041;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1042 = new TStruct("update_counter_result");
          await oprot.WriteStructBeginAsync(tmp1042, cancellationToken);
          var tmp1043 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1043.Name = "E";
              tmp1043.Type = TType.Struct;
              tmp1043.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1043, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1044 = new StringBuilder("update_counter_result(");
        int tmp1045 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1045++) { tmp1044.Append(", "); }
          tmp1044.Append("E: ");
          E.ToString(tmp1044);
        }
        tmp1044.Append(')');
        return tmp1044.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp1046 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1046.Cells = this.Cells.DeepCopy();
        }
        tmp1046.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1046.Updater_id = this.Updater_id;
        }
        tmp1046.__isset.updater_id = this.__isset.updater_id;
        return tmp1046;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1047 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map1047.Count);
                    for(int _i1048 = 0; _i1048 < _map1047.Count; ++_i1048)
                    {
                      long _key1049;
                      List<UCellSerial> _val1050;
                      _key1049 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1051 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1050 = new List<UCellSerial>(_list1051.Count);
                        for(int _i1052 = 0; _i1052 < _list1051.Count; ++_i1052)
                        {
                          UCellSerial _elem1053;
                          _elem1053 = new UCellSerial();
                          await _elem1053.ReadAsync(iprot, cancellationToken);
                          _val1050.Add(_elem1053);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1049] = _val1050;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1054 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp1054, cancellationToken);
          var tmp1055 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1055.Name = "cells";
            tmp1055.Type = TType.Map;
            tmp1055.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1055, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1056 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1056, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1056].Count), cancellationToken);
              foreach (UCellSerial _iter1057 in Cells[_iter1056])
              {
                await _iter1057.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1055.Name = "updater_id";
            tmp1055.Type = TType.I64;
            tmp1055.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1055, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1058 = new StringBuilder("update_serial_args(");
        int tmp1059 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1059++) { tmp1058.Append(", "); }
          tmp1058.Append("Cells: ");
          Cells.ToString(tmp1058);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1059++) { tmp1058.Append(", "); }
          tmp1058.Append("Updater_id: ");
          Updater_id.ToString(tmp1058);
        }
        tmp1058.Append(')');
        return tmp1058.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp1060 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp1060.E = (Exception)this.E.DeepCopy();
        }
        tmp1060.__isset.e = this.__isset.e;
        return tmp1060;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1061 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp1061, cancellationToken);
          var tmp1062 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1062.Name = "E";
              tmp1062.Type = TType.Struct;
              tmp1062.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1062, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1063 = new StringBuilder("update_serial_result(");
        int tmp1064 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1064++) { tmp1063.Append(", "); }
          tmp1063.Append("E: ");
          E.ToString(tmp1063);
        }
        tmp1063.Append(')');
        return tmp1063.ToString();
      }
    }


    public partial class update_by_types_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _plain;
      private Dictionary<long, List<UCellCounter>> _counter;
      private Dictionary<long, List<UCellSerial>> _serial;
      private long _updater_id;

      /// <summary>
      /// The PLAIN Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Plain
      {
        get
        {
          return _plain;
        }
        set
        {
          __isset.plain = true;
          this._plain = value;
        }
      }

      /// <summary>
      /// The COUNTER Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Counter
      {
        get
        {
          return _counter;
        }
        set
        {
          __isset.counter = true;
          this._counter = value;
        }
      }

      /// <summary>
      /// The SERIAL Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Serial
      {
        get
        {
          return _serial;
        }
        set
        {
          __isset.serial = true;
          this._serial = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool plain;
        public bool counter;
        public bool serial;
        public bool updater_id;
      }

      public update_by_types_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_by_types_args DeepCopy()
      {
        var tmp1065 = new update_by_types_args();
        if((Plain != null) && __isset.plain)
        {
          tmp1065.Plain = this.Plain.DeepCopy();
        }
        tmp1065.__isset.plain = this.__isset.plain;
        if((Counter != null) && __isset.counter)
        {
          tmp1065.Counter = this.Counter.DeepCopy();
        }
        tmp1065.__isset.counter = this.__isset.counter;
        if((Serial != null) && __isset.serial)
        {
          tmp1065.Serial = this.Serial.DeepCopy();
        }
        tmp1065.__isset.serial = this.__isset.serial;
        if(__isset.updater_id)
        {
          tmp1065.Updater_id = this.Updater_id;
        }
        tmp1065.__isset.updater_id = this.__isset.updater_id;
        return tmp1065;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1066 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Plain = new Dictionary<long, List<UCellPlain>>(_map1066.Count);
                    for(int _i1067 = 0; _i1067 < _map1066.Count; ++_i1067)
                    {
                      long _key1068;
                      List<UCellPlain> _val1069;
                      _key1068 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1070 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1069 = new List<UCellPlain>(_list1070.Count);
                        for(int _i1071 = 0; _i1071 < _list1070.Count; ++_i1071)
                        {
                          UCellPlain _elem1072;
                          _elem1072 = new UCellPlain();
                          await _elem1072.ReadAsync(iprot, cancellationToken);
                          _val1069.Add(_elem1072);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Plain[_key1068] = _val1069;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1073 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Counter = new Dictionary<long, List<UCellCounter>>(_map1073.Count);
                    for(int _i1074 = 0; _i1074 < _map1073.Count; ++_i1074)
                    {
                      long _key1075;
                      List<UCellCounter> _val1076;
                      _key1075 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1077 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1076 = new List<UCellCounter>(_list1077.Count);
                        for(int _i1078 = 0; _i1078 < _list1077.Count; ++_i1078)
                        {
                          UCellCounter _elem1079;
                          _elem1079 = new UCellCounter();
                          await _elem1079.ReadAsync(iprot, cancellationToken);
                          _val1076.Add(_elem1079);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Counter[_key1075] = _val1076;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1080 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Serial = new Dictionary<long, List<UCellSerial>>(_map1080.Count);
                    for(int _i1081 = 0; _i1081 < _map1080.Count; ++_i1081)
                    {
                      long _key1082;
                      List<UCellSerial> _val1083;
                      _key1082 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1084 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1083 = new List<UCellSerial>(_list1084.Count);
                        for(int _i1085 = 0; _i1085 < _list1084.Count; ++_i1085)
                        {
                          UCellSerial _elem1086;
                          _elem1086 = new UCellSerial();
                          await _elem1086.ReadAsync(iprot, cancellationToken);
                          _val1083.Add(_elem1086);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Serial[_key1082] = _val1083;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1087 = new TStruct("update_by_types_args");
          await oprot.WriteStructBeginAsync(tmp1087, cancellationToken);
          var tmp1088 = new TField();
          if((Plain != null) && __isset.plain)
          {
            tmp1088.Name = "plain";
            tmp1088.Type = TType.Map;
            tmp1088.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Plain.Count), cancellationToken);
            foreach (long _iter1089 in Plain.Keys)
            {
              await oprot.WriteI64Async(_iter1089, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain[_iter1089].Count), cancellationToken);
              foreach (UCellPlain _iter1090 in Plain[_iter1089])
              {
                await _iter1090.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Counter != null) && __isset.counter)
          {
            tmp1088.Name = "counter";
            tmp1088.Type = TType.Map;
            tmp1088.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Counter.Count), cancellationToken);
            foreach (long _iter1091 in Counter.Keys)
            {
              await oprot.WriteI64Async(_iter1091, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter[_iter1091].Count), cancellationToken);
              foreach (UCellCounter _iter1092 in Counter[_iter1091])
              {
                await _iter1092.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Serial != null) && __isset.serial)
          {
            tmp1088.Name = "serial";
            tmp1088.Type = TType.Map;
            tmp1088.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Serial.Count), cancellationToken);
            foreach (long _iter1093 in Serial.Keys)
            {
              await oprot.WriteI64Async(_iter1093, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial[_iter1093].Count), cancellationToken);
              foreach (UCellSerial _iter1094 in Serial[_iter1093])
              {
                await _iter1094.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1088.Name = "updater_id";
            tmp1088.Type = TType.I64;
            tmp1088.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.plain == other.__isset.plain) && ((!__isset.plain) || (global::System.Object.Equals(Plain, other.Plain))))
          && ((__isset.counter == other.__isset.counter) && ((!__isset.counter) || (global::System.Object.Equals(Counter, other.Counter))))
          && ((__isset.serial == other.__isset.serial) && ((!__isset.serial) || (global::System.Object.Equals(Serial, other.Serial))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Plain != null) && __isset.plain)
          {
            hashcode = (hashcode * 397) + Plain.GetHashCode();
          }
          if((Counter != null) && __isset.counter)
          {
            hashcode = (hashcode * 397) + Counter.GetHashCode();
          }
          if((Serial != null) && __isset.serial)
          {
            hashcode = (hashcode * 397) + Serial.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1095 = new StringBuilder("update_by_types_args(");
        int tmp1096 = 0;
        if((Plain != null) && __isset.plain)
        {
          if(0 < tmp1096++) { tmp1095.Append(", "); }
          tmp1095.Append("Plain: ");
          Plain.ToString(tmp1095);
        }
        if((Counter != null) && __isset.counter)
        {
          if(0 < tmp1096++) { tmp1095.Append(", "); }
          tmp1095.Append("Counter: ");
          Counter.ToString(tmp1095);
        }
        if((Serial != null) && __isset.serial)
        {
          if(0 < tmp1096++) { tmp1095.Append(", "); }
          tmp1095.Append("Serial: ");
          Serial.ToString(tmp1095);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1096++) { tmp1095.Append(", "); }
          tmp1095.Append("Updater_id: ");
          Updater_id.ToString(tmp1095);
        }
        tmp1095.Append(')');
        return tmp1095.ToString();
      }
    }


    public partial class update_by_types_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_by_types_result()
      {
      }

      public update_by_types_result DeepCopy()
      {
        var tmp1097 = new update_by_types_result();
        if((E != null) && __isset.e)
        {
          tmp1097.E = (Exception)this.E.DeepCopy();
        }
        tmp1097.__isset.e = this.__isset.e;
        return tmp1097;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1098 = new TStruct("update_by_types_result");
          await oprot.WriteStructBeginAsync(tmp1098, cancellationToken);
          var tmp1099 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1099.Name = "E";
              tmp1099.Type = TType.Struct;
              tmp1099.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1099, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1100 = new StringBuilder("update_by_types_result(");
        int tmp1101 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1101++) { tmp1100.Append(", "); }
          tmp1100.Append("E: ");
          E.ToString(tmp1100);
        }
        tmp1100.Append(')');
        return tmp1100.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp1102 = new mng_column_args();
        if(__isset.func)
        {
          tmp1102.Func = this.Func;
        }
        tmp1102.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp1102.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp1102.__isset.schema = this.__isset.schema;
        return tmp1102;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1103 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp1103, cancellationToken);
          var tmp1104 = new TField();
          if(__isset.func)
          {
            tmp1104.Name = "func";
            tmp1104.Type = TType.I32;
            tmp1104.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1104, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp1104.Name = "schema";
            tmp1104.Type = TType.Struct;
            tmp1104.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1104, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1105 = new StringBuilder("mng_column_args(");
        int tmp1106 = 0;
        if(__isset.func)
        {
          if(0 < tmp1106++) { tmp1105.Append(", "); }
          tmp1105.Append("Func: ");
          Func.ToString(tmp1105);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp1106++) { tmp1105.Append(", "); }
          tmp1105.Append("Schema: ");
          Schema.ToString(tmp1105);
        }
        tmp1105.Append(')');
        return tmp1105.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp1107 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp1107.E = (Exception)this.E.DeepCopy();
        }
        tmp1107.__isset.e = this.__isset.e;
        return tmp1107;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1108 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp1108, cancellationToken);
          var tmp1109 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1109.Name = "E";
              tmp1109.Type = TType.Struct;
              tmp1109.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1109, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1110 = new StringBuilder("mng_column_result(");
        int tmp1111 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1111++) { tmp1110.Append(", "); }
          tmp1110.Append("E: ");
          E.ToString(tmp1110);
        }
        tmp1110.Append(')');
        return tmp1110.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp1112 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1112.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1112.__isset.spec = this.__isset.spec;
        return tmp1112;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1113 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp1113, cancellationToken);
          var tmp1114 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1114.Name = "spec";
            tmp1114.Type = TType.Struct;
            tmp1114.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1114, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1115 = new StringBuilder("list_columns_args(");
        int tmp1116 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1116++) { tmp1115.Append(", "); }
          tmp1115.Append("Spec: ");
          Spec.ToString(tmp1115);
        }
        tmp1115.Append(')');
        return tmp1115.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp1117 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1117.Success = this.Success.DeepCopy();
        }
        tmp1117.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1117.E = (Exception)this.E.DeepCopy();
        }
        tmp1117.__isset.e = this.__isset.e;
        return tmp1117;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1118 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list1118.Count);
                    for(int _i1119 = 0; _i1119 < _list1118.Count; ++_i1119)
                    {
                      Schema _elem1120;
                      _elem1120 = new Schema();
                      await _elem1120.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1120);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1121 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp1121, cancellationToken);
          var tmp1122 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1122.Name = "Success";
              tmp1122.Type = TType.List;
              tmp1122.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1122, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter1123 in Success)
              {
                await _iter1123.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1122.Name = "E";
              tmp1122.Type = TType.Struct;
              tmp1122.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1122, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1124 = new StringBuilder("list_columns_result(");
        int tmp1125 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1125++) { tmp1124.Append(", "); }
          tmp1124.Append("Success: ");
          Success.ToString(tmp1124);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1125++) { tmp1124.Append(", "); }
          tmp1124.Append("E: ");
          E.ToString(tmp1124);
        }
        tmp1124.Append(')');
        return tmp1124.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp1126 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1126.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1126.__isset.spec = this.__isset.spec;
        return tmp1126;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1127 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp1127, cancellationToken);
          var tmp1128 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1128.Name = "spec";
            tmp1128.Type = TType.Struct;
            tmp1128.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1128, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1129 = new StringBuilder("compact_columns_args(");
        int tmp1130 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1130++) { tmp1129.Append(", "); }
          tmp1129.Append("Spec: ");
          Spec.ToString(tmp1129);
        }
        tmp1129.Append(')');
        return tmp1129.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp1131 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1131.Success = this.Success.DeepCopy();
        }
        tmp1131.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1131.E = (Exception)this.E.DeepCopy();
        }
        tmp1131.__isset.e = this.__isset.e;
        return tmp1131;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1132 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list1132.Count);
                    for(int _i1133 = 0; _i1133 < _list1132.Count; ++_i1133)
                    {
                      CompactResult _elem1134;
                      _elem1134 = new CompactResult();
                      await _elem1134.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1134);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1135 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp1135, cancellationToken);
          var tmp1136 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1136.Name = "Success";
              tmp1136.Type = TType.List;
              tmp1136.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1136, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter1137 in Success)
              {
                await _iter1137.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1136.Name = "E";
              tmp1136.Type = TType.Struct;
              tmp1136.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1136, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1138 = new StringBuilder("compact_columns_result(");
        int tmp1139 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1139++) { tmp1138.Append(", "); }
          tmp1138.Append("Success: ");
          Success.ToString(tmp1138);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1139++) { tmp1138.Append(", "); }
          tmp1138.Append("E: ");
          E.ToString(tmp1138);
        }
        tmp1138.Append(')');
        return tmp1138.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp1140 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1140.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1140.__isset.spec = this.__isset.spec;
        return tmp1140;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1141 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp1141, cancellationToken);
          var tmp1142 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1142.Name = "spec";
            tmp1142.Type = TType.Struct;
            tmp1142.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1142, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1143 = new StringBuilder("scan_args(");
        int tmp1144 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1144++) { tmp1143.Append(", "); }
          tmp1143.Append("Spec: ");
          Spec.ToString(tmp1143);
        }
        tmp1143.Append(')');
        return tmp1143.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp1145 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp1145.Success = (Cells)this.Success.DeepCopy();
        }
        tmp1145.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1145.E = (Exception)this.E.DeepCopy();
        }
        tmp1145.__isset.e = this.__isset.e;
        return tmp1145;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1146 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp1146, cancellationToken);
          var tmp1147 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1147.Name = "Success";
              tmp1147.Type = TType.Struct;
              tmp1147.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1147, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1147.Name = "E";
              tmp1147.Type = TType.Struct;
              tmp1147.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1147, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1148 = new StringBuilder("scan_result(");
        int tmp1149 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1149++) { tmp1148.Append(", "); }
          tmp1148.Append("Success: ");
          Success.ToString(tmp1148);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1149++) { tmp1148.Append(", "); }
          tmp1148.Append("E: ");
          E.ToString(tmp1148);
        }
        tmp1148.Append(')');
        return tmp1148.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp1150 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1150.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1150.__isset.spec = this.__isset.spec;
        return tmp1150;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1151 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp1151, cancellationToken);
          var tmp1152 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1152.Name = "spec";
            tmp1152.Type = TType.Struct;
            tmp1152.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1152, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1153 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp1154 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1154++) { tmp1153.Append(", "); }
          tmp1153.Append("Spec: ");
          Spec.ToString(tmp1153);
        }
        tmp1153.Append(')');
        return tmp1153.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp1155 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp1155.Success = this.Success.DeepCopy();
        }
        tmp1155.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1155.E = (Exception)this.E.DeepCopy();
        }
        tmp1155.__isset.e = this.__isset.e;
        return tmp1155;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1156 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map1156.Count);
                    for(int _i1157 = 0; _i1157 < _map1156.Count; ++_i1157)
                    {
                      string _key1158;
                      ColCells _val1159;
                      _key1158 = await iprot.ReadStringAsync(cancellationToken);
                      _val1159 = new ColCells();
                      await _val1159.ReadAsync(iprot, cancellationToken);
                      Success[_key1158] = _val1159;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1160 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp1160, cancellationToken);
          var tmp1161 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1161.Name = "Success";
              tmp1161.Type = TType.Map;
              tmp1161.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1161, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter1162 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter1162, cancellationToken);
                await Success[_iter1162].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1161.Name = "E";
              tmp1161.Type = TType.Struct;
              tmp1161.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1161, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1163 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp1164 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1164++) { tmp1163.Append(", "); }
          tmp1163.Append("Success: ");
          Success.ToString(tmp1163);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1164++) { tmp1163.Append(", "); }
          tmp1163.Append("E: ");
          E.ToString(tmp1163);
        }
        tmp1163.Append(')');
        return tmp1163.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp1165 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1165.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1165.__isset.spec = this.__isset.spec;
        return tmp1165;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1166 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp1166, cancellationToken);
          var tmp1167 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1167.Name = "spec";
            tmp1167.Type = TType.Struct;
            tmp1167.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1167, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1168 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp1169 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1169++) { tmp1168.Append(", "); }
          tmp1168.Append("Spec: ");
          Spec.ToString(tmp1168);
        }
        tmp1168.Append(')');
        return tmp1168.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp1170 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp1170.Success = this.Success.DeepCopy();
        }
        tmp1170.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1170.E = (Exception)this.E.DeepCopy();
        }
        tmp1170.__isset.e = this.__isset.e;
        return tmp1170;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1171 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list1171.Count);
                    for(int _i1172 = 0; _i1172 < _list1171.Count; ++_i1172)
                    {
                      kCells _elem1173;
                      _elem1173 = new kCells();
                      await _elem1173.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1173);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1174 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp1174, cancellationToken);
          var tmp1175 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1175.Name = "Success";
              tmp1175.Type = TType.List;
              tmp1175.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter1176 in Success)
              {
                await _iter1176.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1175.Name = "E";
              tmp1175.Type = TType.Struct;
              tmp1175.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1175, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1177 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp1178 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1178++) { tmp1177.Append(", "); }
          tmp1177.Append("Success: ");
          Success.ToString(tmp1177);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1178++) { tmp1177.Append(", "); }
          tmp1177.Append("E: ");
          E.ToString(tmp1177);
        }
        tmp1177.Append(')');
        return tmp1177.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp1179 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1179.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1179.__isset.spec = this.__isset.spec;
        return tmp1179;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1180 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp1180, cancellationToken);
          var tmp1181 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1181.Name = "spec";
            tmp1181.Type = TType.Struct;
            tmp1181.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1181, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1182 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp1183 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1183++) { tmp1182.Append(", "); }
          tmp1182.Append("Spec: ");
          Spec.ToString(tmp1182);
        }
        tmp1182.Append(')');
        return tmp1182.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp1184 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp1184.Success = (FCells)this.Success.DeepCopy();
        }
        tmp1184.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1184.E = (Exception)this.E.DeepCopy();
        }
        tmp1184.__isset.e = this.__isset.e;
        return tmp1184;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1185 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp1185, cancellationToken);
          var tmp1186 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1186.Name = "Success";
              tmp1186.Type = TType.Struct;
              tmp1186.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1186, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1186.Name = "E";
              tmp1186.Type = TType.Struct;
              tmp1186.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1186, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1187 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp1188 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1188++) { tmp1187.Append(", "); }
          tmp1187.Append("Success: ");
          Success.ToString(tmp1187);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1188++) { tmp1187.Append(", "); }
          tmp1187.Append("E: ");
          E.ToString(tmp1187);
        }
        tmp1187.Append(')');
        return tmp1187.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp1189 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1189.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1189.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp1189.Rslt = this.Rslt;
        }
        tmp1189.__isset.rslt = this.__isset.rslt;
        return tmp1189;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1190 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp1190, cancellationToken);
          var tmp1191 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1191.Name = "spec";
            tmp1191.Type = TType.Struct;
            tmp1191.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1191, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp1191.Name = "rslt";
            tmp1191.Type = TType.I32;
            tmp1191.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1191, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1192 = new StringBuilder("scan_rslt_on_args(");
        int tmp1193 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1193++) { tmp1192.Append(", "); }
          tmp1192.Append("Spec: ");
          Spec.ToString(tmp1192);
        }
        if(__isset.rslt)
        {
          if(0 < tmp1193++) { tmp1192.Append(", "); }
          tmp1192.Append("Rslt: ");
          Rslt.ToString(tmp1192);
        }
        tmp1192.Append(')');
        return tmp1192.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp1194 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp1194.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp1194.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1194.E = (Exception)this.E.DeepCopy();
        }
        tmp1194.__isset.e = this.__isset.e;
        return tmp1194;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1195 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp1195, cancellationToken);
          var tmp1196 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1196.Name = "Success";
              tmp1196.Type = TType.Struct;
              tmp1196.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1196, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1196.Name = "E";
              tmp1196.Type = TType.Struct;
              tmp1196.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1196, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1197 = new StringBuilder("scan_rslt_on_result(");
        int tmp1198 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1198++) { tmp1197.Append(", "); }
          tmp1197.Append("Success: ");
          Success.ToString(tmp1197);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1198++) { tmp1197.Append(", "); }
          tmp1197.Append("E: ");
          E.ToString(tmp1197);
        }
        tmp1197.Append(')');
        return tmp1197.ToString();
      }
    }

  }

}
