/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsPlain.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsCounter.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsSerial.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Plain,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Counter,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Counter Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method is to update cells by several Column-Types,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="plain">The PLAIN Cells to update</param>
    /// <param name="counter">The COUNTER Cells to update</param>
    /// <param name="serial">The SERIAL Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp581 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp581.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp582 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp582.Type == TMessageType.Exception)
      {
        var tmp583 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp583;
      }

      var tmp584 = new InternalStructs.sql_mng_column_result();
      await tmp584.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp584.__isset.e)
      {
        throw tmp584.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp585 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp585.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp586 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp586.Type == TMessageType.Exception)
      {
        var tmp587 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp587;
      }

      var tmp588 = new InternalStructs.sql_list_columns_result();
      await tmp588.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp588.__isset.success)
      {
        return tmp588.Success;
      }
      if (tmp588.__isset.e)
      {
        throw tmp588.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp589 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp589.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp590 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp590.Type == TMessageType.Exception)
      {
        var tmp591 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp591;
      }

      var tmp592 = new InternalStructs.sql_compact_columns_result();
      await tmp592.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp592.__isset.success)
      {
        return tmp592.Success;
      }
      if (tmp592.__isset.e)
      {
        throw tmp592.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_plain(sql, cancellationToken);
      return await recv_sql_select_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp593 = new InternalStructs.sql_select_plain_args() {
        Sql = sql,
      };
      
      await tmp593.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> recv_sql_select_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp594 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp594.Type == TMessageType.Exception)
      {
        var tmp595 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp595;
      }

      var tmp596 = new InternalStructs.sql_select_plain_result();
      await tmp596.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp596.__isset.success)
      {
        return tmp596.Success;
      }
      if (tmp596.__isset.e)
      {
        throw tmp596.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_plain failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_counter(sql, cancellationToken);
      return await recv_sql_select_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp597 = new InternalStructs.sql_select_counter_args() {
        Sql = sql,
      };
      
      await tmp597.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> recv_sql_select_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp598 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp598.Type == TMessageType.Exception)
      {
        var tmp599 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp599;
      }

      var tmp600 = new InternalStructs.sql_select_counter_result();
      await tmp600.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp600.__isset.success)
      {
        return tmp600.Success;
      }
      if (tmp600.__isset.e)
      {
        throw tmp600.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_counter failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_serial(sql, cancellationToken);
      return await recv_sql_select_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp601 = new InternalStructs.sql_select_serial_args() {
        Sql = sql,
      };
      
      await tmp601.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> recv_sql_select_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp602 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp602.Type == TMessageType.Exception)
      {
        var tmp603 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp603;
      }

      var tmp604 = new InternalStructs.sql_select_serial_result();
      await tmp604.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp604.__isset.success)
      {
        return tmp604.Success;
      }
      if (tmp604.__isset.e)
      {
        throw tmp604.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_serial failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp605 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp605.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp606 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp606.Type == TMessageType.Exception)
      {
        var tmp607 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp607;
      }

      var tmp608 = new InternalStructs.sql_select_result();
      await tmp608.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp608.__isset.success)
      {
        return tmp608.Success;
      }
      if (tmp608.__isset.e)
      {
        throw tmp608.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp609 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp609.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp610 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp610.Type == TMessageType.Exception)
      {
        var tmp611 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp611;
      }

      var tmp612 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp612.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp612.__isset.success)
      {
        return tmp612.Success;
      }
      if (tmp612.__isset.e)
      {
        throw tmp612.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp613 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp613.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp614 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp614.Type == TMessageType.Exception)
      {
        var tmp615 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp615;
      }

      var tmp616 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp616.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp616.__isset.success)
      {
        return tmp616.Success;
      }
      if (tmp616.__isset.e)
      {
        throw tmp616.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp617 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp617.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp618 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp618.Type == TMessageType.Exception)
      {
        var tmp619 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp619;
      }

      var tmp620 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp620.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp620.__isset.success)
      {
        return tmp620.Success;
      }
      if (tmp620.__isset.e)
      {
        throw tmp620.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp621 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp621.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp622 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp622.Type == TMessageType.Exception)
      {
        var tmp623 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp623;
      }

      var tmp624 = new InternalStructs.sql_query_result();
      await tmp624.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp624.__isset.success)
      {
        return tmp624.Success;
      }
      if (tmp624.__isset.e)
      {
        throw tmp624.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp625 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp625.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp626 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp626.Type == TMessageType.Exception)
      {
        var tmp627 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp627;
      }

      var tmp628 = new InternalStructs.sql_update_result();
      await tmp628.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp628.__isset.e)
      {
        throw tmp628.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp629 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp629.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp630 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp630.Type == TMessageType.Exception)
      {
        var tmp631 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp631;
      }

      var tmp632 = new InternalStructs.exec_sql_result();
      await tmp632.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp632.__isset.success)
      {
        return tmp632.Success;
      }
      if (tmp632.__isset.e)
      {
        throw tmp632.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp633 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp633.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp634 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp634.Type == TMessageType.Exception)
      {
        var tmp635 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp635;
      }

      var tmp636 = new InternalStructs.updater_create_result();
      await tmp636.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp636.__isset.success)
      {
        return tmp636.Success;
      }
      if (tmp636.__isset.e)
      {
        throw tmp636.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp637 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp637.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp638 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp638.Type == TMessageType.Exception)
      {
        var tmp639 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp639;
      }

      var tmp640 = new InternalStructs.updater_close_result();
      await tmp640.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp640.__isset.e)
      {
        throw tmp640.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_plain(cells, updater_id, cancellationToken);
      await recv_update_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp641 = new InternalStructs.update_plain_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp641.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp642 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp642.Type == TMessageType.Exception)
      {
        var tmp643 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp643;
      }

      var tmp644 = new InternalStructs.update_plain_result();
      await tmp644.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp644.__isset.e)
      {
        throw tmp644.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_counter(cells, updater_id, cancellationToken);
      await recv_update_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp645 = new InternalStructs.update_counter_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp645.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp646 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp646.Type == TMessageType.Exception)
      {
        var tmp647 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp647;
      }

      var tmp648 = new InternalStructs.update_counter_result();
      await tmp648.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp648.__isset.e)
      {
        throw tmp648.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp649 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp649.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp650 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp650.Type == TMessageType.Exception)
      {
        var tmp651 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp651;
      }

      var tmp652 = new InternalStructs.update_serial_result();
      await tmp652.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp652.__isset.e)
      {
        throw tmp652.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_by_types(plain, counter, serial, updater_id, cancellationToken);
      await recv_update_by_types(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp653 = new InternalStructs.update_by_types_args() {
        Plain = plain,
        Counter = counter,
        Serial = serial,
        Updater_id = updater_id,
      };
      
      await tmp653.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_by_types(CancellationToken cancellationToken = default)
    {
      
      var tmp654 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp654.Type == TMessageType.Exception)
      {
        var tmp655 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp655;
      }

      var tmp656 = new InternalStructs.update_by_types_result();
      await tmp656.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp656.__isset.e)
      {
        throw tmp656.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp657 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp657.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp658 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp658.Type == TMessageType.Exception)
      {
        var tmp659 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp659;
      }

      var tmp660 = new InternalStructs.mng_column_result();
      await tmp660.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp660.__isset.e)
      {
        throw tmp660.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp661 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp661.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp662 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp662.Type == TMessageType.Exception)
      {
        var tmp663 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp663;
      }

      var tmp664 = new InternalStructs.list_columns_result();
      await tmp664.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp664.__isset.success)
      {
        return tmp664.Success;
      }
      if (tmp664.__isset.e)
      {
        throw tmp664.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp665 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp665.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp666 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp666.Type == TMessageType.Exception)
      {
        var tmp667 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp667;
      }

      var tmp668 = new InternalStructs.compact_columns_result();
      await tmp668.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp668.__isset.success)
      {
        return tmp668.Success;
      }
      if (tmp668.__isset.e)
      {
        throw tmp668.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp669 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp669.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp670 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp670.Type == TMessageType.Exception)
      {
        var tmp671 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp671;
      }

      var tmp672 = new InternalStructs.scan_result();
      await tmp672.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp672.__isset.success)
      {
        return tmp672.Success;
      }
      if (tmp672.__isset.e)
      {
        throw tmp672.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp673 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp673.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp674 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp674.Type == TMessageType.Exception)
      {
        var tmp675 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp675;
      }

      var tmp676 = new InternalStructs.scan_rslt_on_column_result();
      await tmp676.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp676.__isset.success)
      {
        return tmp676.Success;
      }
      if (tmp676.__isset.e)
      {
        throw tmp676.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp677 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp677.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp678 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp678.Type == TMessageType.Exception)
      {
        var tmp679 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp679;
      }

      var tmp680 = new InternalStructs.scan_rslt_on_key_result();
      await tmp680.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp680.__isset.success)
      {
        return tmp680.Success;
      }
      if (tmp680.__isset.e)
      {
        throw tmp680.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp681 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp681.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp682 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp682.Type == TMessageType.Exception)
      {
        var tmp683 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp683;
      }

      var tmp684 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp684.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp684.__isset.success)
      {
        return tmp684.Success;
      }
      if (tmp684.__isset.e)
      {
        throw tmp684.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp685 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp685.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp686 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp686.Type == TMessageType.Exception)
      {
        var tmp687 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp687;
      }

      var tmp688 = new InternalStructs.scan_rslt_on_result();
      await tmp688.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp688.__isset.success)
      {
        return tmp688.Success;
      }
      if (tmp688.__isset.e)
      {
        throw tmp688.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select_plain"] = sql_select_plain_ProcessAsync;
      processMap_["sql_select_counter"] = sql_select_counter_ProcessAsync;
      processMap_["sql_select_serial"] = sql_select_serial_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update_plain"] = update_plain_ProcessAsync;
      processMap_["update_counter"] = update_counter_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["update_by_types"] = update_by_types_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp689 = new InternalStructs.sql_mng_column_args();
      await tmp689.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp690 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp689.Sql, cancellationToken);
        }
        catch (Exception tmp691)
        {
          tmp690.E = tmp691;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp690.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp692)
      {
        var tmp693 = $"Error occurred in {GetType().FullName}: {tmp692.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp692, tmp693);
        else
          Console.Error.WriteLine(tmp693);
        var tmp694 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp694.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp695 = new InternalStructs.sql_list_columns_args();
      await tmp695.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp696 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp696.Success = await _iAsync.sql_list_columns(tmp695.Sql, cancellationToken);
        }
        catch (Exception tmp697)
        {
          tmp696.E = tmp697;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp696.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp698)
      {
        var tmp699 = $"Error occurred in {GetType().FullName}: {tmp698.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp698, tmp699);
        else
          Console.Error.WriteLine(tmp699);
        var tmp700 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp700.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp701 = new InternalStructs.sql_compact_columns_args();
      await tmp701.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp702 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp702.Success = await _iAsync.sql_compact_columns(tmp701.Sql, cancellationToken);
        }
        catch (Exception tmp703)
        {
          tmp702.E = tmp703;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp702.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp704)
      {
        var tmp705 = $"Error occurred in {GetType().FullName}: {tmp704.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp704, tmp705);
        else
          Console.Error.WriteLine(tmp705);
        var tmp706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp706.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp707 = new InternalStructs.sql_select_plain_args();
      await tmp707.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp708 = new InternalStructs.sql_select_plain_result();
      try
      {
        try
        {
          tmp708.Success = await _iAsync.sql_select_plain(tmp707.Sql, cancellationToken);
        }
        catch (Exception tmp709)
        {
          tmp708.E = tmp709;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp708.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp710)
      {
        var tmp711 = $"Error occurred in {GetType().FullName}: {tmp710.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp710, tmp711);
        else
          Console.Error.WriteLine(tmp711);
        var tmp712 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp712.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp713 = new InternalStructs.sql_select_counter_args();
      await tmp713.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp714 = new InternalStructs.sql_select_counter_result();
      try
      {
        try
        {
          tmp714.Success = await _iAsync.sql_select_counter(tmp713.Sql, cancellationToken);
        }
        catch (Exception tmp715)
        {
          tmp714.E = tmp715;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp714.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp716)
      {
        var tmp717 = $"Error occurred in {GetType().FullName}: {tmp716.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp716, tmp717);
        else
          Console.Error.WriteLine(tmp717);
        var tmp718 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp718.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp719 = new InternalStructs.sql_select_serial_args();
      await tmp719.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp720 = new InternalStructs.sql_select_serial_result();
      try
      {
        try
        {
          tmp720.Success = await _iAsync.sql_select_serial(tmp719.Sql, cancellationToken);
        }
        catch (Exception tmp721)
        {
          tmp720.E = tmp721;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp720.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp722)
      {
        var tmp723 = $"Error occurred in {GetType().FullName}: {tmp722.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp722, tmp723);
        else
          Console.Error.WriteLine(tmp723);
        var tmp724 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp724.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp725 = new InternalStructs.sql_select_args();
      await tmp725.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp726 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp726.Success = await _iAsync.sql_select(tmp725.Sql, cancellationToken);
        }
        catch (Exception tmp727)
        {
          tmp726.E = tmp727;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp726.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp728)
      {
        var tmp729 = $"Error occurred in {GetType().FullName}: {tmp728.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp728, tmp729);
        else
          Console.Error.WriteLine(tmp729);
        var tmp730 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp730.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp731 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp731.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp732 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp732.Success = await _iAsync.sql_select_rslt_on_column(tmp731.Sql, cancellationToken);
        }
        catch (Exception tmp733)
        {
          tmp732.E = tmp733;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp732.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp734)
      {
        var tmp735 = $"Error occurred in {GetType().FullName}: {tmp734.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp734, tmp735);
        else
          Console.Error.WriteLine(tmp735);
        var tmp736 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp736.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp737 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp737.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp738 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp738.Success = await _iAsync.sql_select_rslt_on_key(tmp737.Sql, cancellationToken);
        }
        catch (Exception tmp739)
        {
          tmp738.E = tmp739;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp738.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp740)
      {
        var tmp741 = $"Error occurred in {GetType().FullName}: {tmp740.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp740, tmp741);
        else
          Console.Error.WriteLine(tmp741);
        var tmp742 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp742.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp743 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp743.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp744 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp744.Success = await _iAsync.sql_select_rslt_on_fraction(tmp743.Sql, cancellationToken);
        }
        catch (Exception tmp745)
        {
          tmp744.E = tmp745;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp744.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp746)
      {
        var tmp747 = $"Error occurred in {GetType().FullName}: {tmp746.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp746, tmp747);
        else
          Console.Error.WriteLine(tmp747);
        var tmp748 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp748.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp749 = new InternalStructs.sql_query_args();
      await tmp749.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp750 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp750.Success = await _iAsync.sql_query(tmp749.Sql, tmp749.Rslt, cancellationToken);
        }
        catch (Exception tmp751)
        {
          tmp750.E = tmp751;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp750.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp752)
      {
        var tmp753 = $"Error occurred in {GetType().FullName}: {tmp752.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp752, tmp753);
        else
          Console.Error.WriteLine(tmp753);
        var tmp754 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp754.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp755 = new InternalStructs.sql_update_args();
      await tmp755.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp756 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp755.Sql, tmp755.Updater_id, cancellationToken);
        }
        catch (Exception tmp757)
        {
          tmp756.E = tmp757;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp756.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp758)
      {
        var tmp759 = $"Error occurred in {GetType().FullName}: {tmp758.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp758, tmp759);
        else
          Console.Error.WriteLine(tmp759);
        var tmp760 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp760.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp761 = new InternalStructs.exec_sql_args();
      await tmp761.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp762 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp762.Success = await _iAsync.exec_sql(tmp761.Sql, cancellationToken);
        }
        catch (Exception tmp763)
        {
          tmp762.E = tmp763;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp762.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp764)
      {
        var tmp765 = $"Error occurred in {GetType().FullName}: {tmp764.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp764, tmp765);
        else
          Console.Error.WriteLine(tmp765);
        var tmp766 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp766.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp767 = new InternalStructs.updater_create_args();
      await tmp767.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp768 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp768.Success = await _iAsync.updater_create(tmp767.Buffer_size, cancellationToken);
        }
        catch (Exception tmp769)
        {
          tmp768.E = tmp769;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp768.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp770)
      {
        var tmp771 = $"Error occurred in {GetType().FullName}: {tmp770.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp770, tmp771);
        else
          Console.Error.WriteLine(tmp771);
        var tmp772 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp772.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp773 = new InternalStructs.updater_close_args();
      await tmp773.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp774 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp773.Id, cancellationToken);
        }
        catch (Exception tmp775)
        {
          tmp774.E = tmp775;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp774.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp776)
      {
        var tmp777 = $"Error occurred in {GetType().FullName}: {tmp776.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp776, tmp777);
        else
          Console.Error.WriteLine(tmp777);
        var tmp778 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp778.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp779 = new InternalStructs.update_plain_args();
      await tmp779.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp780 = new InternalStructs.update_plain_result();
      try
      {
        try
        {
          await _iAsync.update_plain(tmp779.Cells, tmp779.Updater_id, cancellationToken);
        }
        catch (Exception tmp781)
        {
          tmp780.E = tmp781;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp780.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp782)
      {
        var tmp783 = $"Error occurred in {GetType().FullName}: {tmp782.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp782, tmp783);
        else
          Console.Error.WriteLine(tmp783);
        var tmp784 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp784.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp785 = new InternalStructs.update_counter_args();
      await tmp785.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp786 = new InternalStructs.update_counter_result();
      try
      {
        try
        {
          await _iAsync.update_counter(tmp785.Cells, tmp785.Updater_id, cancellationToken);
        }
        catch (Exception tmp787)
        {
          tmp786.E = tmp787;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp786.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp788)
      {
        var tmp789 = $"Error occurred in {GetType().FullName}: {tmp788.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp788, tmp789);
        else
          Console.Error.WriteLine(tmp789);
        var tmp790 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp790.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp791 = new InternalStructs.update_serial_args();
      await tmp791.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp792 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp791.Cells, tmp791.Updater_id, cancellationToken);
        }
        catch (Exception tmp793)
        {
          tmp792.E = tmp793;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp792.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp794)
      {
        var tmp795 = $"Error occurred in {GetType().FullName}: {tmp794.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp794, tmp795);
        else
          Console.Error.WriteLine(tmp795);
        var tmp796 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp796.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_by_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp797 = new InternalStructs.update_by_types_args();
      await tmp797.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp798 = new InternalStructs.update_by_types_result();
      try
      {
        try
        {
          await _iAsync.update_by_types(tmp797.Plain, tmp797.Counter, tmp797.Serial, tmp797.Updater_id, cancellationToken);
        }
        catch (Exception tmp799)
        {
          tmp798.E = tmp799;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Reply, seqid), cancellationToken); 
        await tmp798.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp800)
      {
        var tmp801 = $"Error occurred in {GetType().FullName}: {tmp800.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp800, tmp801);
        else
          Console.Error.WriteLine(tmp801);
        var tmp802 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Exception, seqid), cancellationToken);
        await tmp802.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp803 = new InternalStructs.mng_column_args();
      await tmp803.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp804 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp803.Func, tmp803.Schema, cancellationToken);
        }
        catch (Exception tmp805)
        {
          tmp804.E = tmp805;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp804.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp806)
      {
        var tmp807 = $"Error occurred in {GetType().FullName}: {tmp806.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp806, tmp807);
        else
          Console.Error.WriteLine(tmp807);
        var tmp808 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp808.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp809 = new InternalStructs.list_columns_args();
      await tmp809.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp810 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp810.Success = await _iAsync.list_columns(tmp809.Spec, cancellationToken);
        }
        catch (Exception tmp811)
        {
          tmp810.E = tmp811;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp810.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp812)
      {
        var tmp813 = $"Error occurred in {GetType().FullName}: {tmp812.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp812, tmp813);
        else
          Console.Error.WriteLine(tmp813);
        var tmp814 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp814.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp815 = new InternalStructs.compact_columns_args();
      await tmp815.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp816 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp816.Success = await _iAsync.compact_columns(tmp815.Spec, cancellationToken);
        }
        catch (Exception tmp817)
        {
          tmp816.E = tmp817;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp816.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp818)
      {
        var tmp819 = $"Error occurred in {GetType().FullName}: {tmp818.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp818, tmp819);
        else
          Console.Error.WriteLine(tmp819);
        var tmp820 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp820.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp821 = new InternalStructs.scan_args();
      await tmp821.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp822 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp822.Success = await _iAsync.scan(tmp821.Spec, cancellationToken);
        }
        catch (Exception tmp823)
        {
          tmp822.E = tmp823;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp822.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp824)
      {
        var tmp825 = $"Error occurred in {GetType().FullName}: {tmp824.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp824, tmp825);
        else
          Console.Error.WriteLine(tmp825);
        var tmp826 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp826.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp827 = new InternalStructs.scan_rslt_on_column_args();
      await tmp827.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp828 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp828.Success = await _iAsync.scan_rslt_on_column(tmp827.Spec, cancellationToken);
        }
        catch (Exception tmp829)
        {
          tmp828.E = tmp829;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp828.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp830)
      {
        var tmp831 = $"Error occurred in {GetType().FullName}: {tmp830.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp830, tmp831);
        else
          Console.Error.WriteLine(tmp831);
        var tmp832 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp832.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp833 = new InternalStructs.scan_rslt_on_key_args();
      await tmp833.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp834 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp834.Success = await _iAsync.scan_rslt_on_key(tmp833.Spec, cancellationToken);
        }
        catch (Exception tmp835)
        {
          tmp834.E = tmp835;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp834.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp836)
      {
        var tmp837 = $"Error occurred in {GetType().FullName}: {tmp836.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp836, tmp837);
        else
          Console.Error.WriteLine(tmp837);
        var tmp838 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp838.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp839 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp839.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp840 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp840.Success = await _iAsync.scan_rslt_on_fraction(tmp839.Spec, cancellationToken);
        }
        catch (Exception tmp841)
        {
          tmp840.E = tmp841;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp840.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp842)
      {
        var tmp843 = $"Error occurred in {GetType().FullName}: {tmp842.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp842, tmp843);
        else
          Console.Error.WriteLine(tmp843);
        var tmp844 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp844.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp845 = new InternalStructs.scan_rslt_on_args();
      await tmp845.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp846 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp846.Success = await _iAsync.scan_rslt_on(tmp845.Spec, tmp845.Rslt, cancellationToken);
        }
        catch (Exception tmp847)
        {
          tmp846.E = tmp847;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp846.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp848)
      {
        var tmp849 = $"Error occurred in {GetType().FullName}: {tmp848.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp848, tmp849);
        else
          Console.Error.WriteLine(tmp849);
        var tmp850 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp850.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp851 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp851.Sql = this.Sql;
        }
        tmp851.__isset.sql = this.__isset.sql;
        return tmp851;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp852 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp852, cancellationToken);
          var tmp853 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp853.Name = "sql";
            tmp853.Type = TType.String;
            tmp853.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp854 = new StringBuilder("sql_mng_column_args(");
        int tmp855 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp855++) { tmp854.Append(", "); }
          tmp854.Append("Sql: ");
          Sql.ToString(tmp854);
        }
        tmp854.Append(')');
        return tmp854.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp856 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp856.E = (Exception)this.E.DeepCopy();
        }
        tmp856.__isset.e = this.__isset.e;
        return tmp856;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp857 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp857, cancellationToken);
          var tmp858 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp858.Name = "E";
              tmp858.Type = TType.Struct;
              tmp858.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp858, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp859 = new StringBuilder("sql_mng_column_result(");
        int tmp860 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp860++) { tmp859.Append(", "); }
          tmp859.Append("E: ");
          E.ToString(tmp859);
        }
        tmp859.Append(')');
        return tmp859.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp861 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp861.Sql = this.Sql;
        }
        tmp861.__isset.sql = this.__isset.sql;
        return tmp861;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp862 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp862, cancellationToken);
          var tmp863 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp863.Name = "sql";
            tmp863.Type = TType.String;
            tmp863.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp863, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp864 = new StringBuilder("sql_list_columns_args(");
        int tmp865 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp865++) { tmp864.Append(", "); }
          tmp864.Append("Sql: ");
          Sql.ToString(tmp864);
        }
        tmp864.Append(')');
        return tmp864.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp866 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp866.Success = this.Success.DeepCopy();
        }
        tmp866.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp866.E = (Exception)this.E.DeepCopy();
        }
        tmp866.__isset.e = this.__isset.e;
        return tmp866;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list867 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list867.Count);
                    for(int _i868 = 0; _i868 < _list867.Count; ++_i868)
                    {
                      Schema _elem869;
                      _elem869 = new Schema();
                      await _elem869.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem869);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp870 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp870, cancellationToken);
          var tmp871 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp871.Name = "Success";
              tmp871.Type = TType.List;
              tmp871.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp871, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter872 in Success)
              {
                await _iter872.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp871.Name = "E";
              tmp871.Type = TType.Struct;
              tmp871.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp871, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp873 = new StringBuilder("sql_list_columns_result(");
        int tmp874 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp874++) { tmp873.Append(", "); }
          tmp873.Append("Success: ");
          Success.ToString(tmp873);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp874++) { tmp873.Append(", "); }
          tmp873.Append("E: ");
          E.ToString(tmp873);
        }
        tmp873.Append(')');
        return tmp873.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp875 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp875.Sql = this.Sql;
        }
        tmp875.__isset.sql = this.__isset.sql;
        return tmp875;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp876 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp876, cancellationToken);
          var tmp877 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp877.Name = "sql";
            tmp877.Type = TType.String;
            tmp877.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp877, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp878 = new StringBuilder("sql_compact_columns_args(");
        int tmp879 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp879++) { tmp878.Append(", "); }
          tmp878.Append("Sql: ");
          Sql.ToString(tmp878);
        }
        tmp878.Append(')');
        return tmp878.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp880 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp880.Success = this.Success.DeepCopy();
        }
        tmp880.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp880.E = (Exception)this.E.DeepCopy();
        }
        tmp880.__isset.e = this.__isset.e;
        return tmp880;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list881 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list881.Count);
                    for(int _i882 = 0; _i882 < _list881.Count; ++_i882)
                    {
                      CompactResult _elem883;
                      _elem883 = new CompactResult();
                      await _elem883.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem883);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp884 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp884, cancellationToken);
          var tmp885 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp885.Name = "Success";
              tmp885.Type = TType.List;
              tmp885.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp885, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter886 in Success)
              {
                await _iter886.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp885.Name = "E";
              tmp885.Type = TType.Struct;
              tmp885.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp885, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp887 = new StringBuilder("sql_compact_columns_result(");
        int tmp888 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp888++) { tmp887.Append(", "); }
          tmp887.Append("Success: ");
          Success.ToString(tmp887);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp888++) { tmp887.Append(", "); }
          tmp887.Append("E: ");
          E.ToString(tmp887);
        }
        tmp887.Append(')');
        return tmp887.ToString();
      }
    }


    public partial class sql_select_plain_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_plain_args()
      {
      }

      public sql_select_plain_args DeepCopy()
      {
        var tmp889 = new sql_select_plain_args();
        if((Sql != null) && __isset.sql)
        {
          tmp889.Sql = this.Sql;
        }
        tmp889.__isset.sql = this.__isset.sql;
        return tmp889;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp890 = new TStruct("sql_select_plain_args");
          await oprot.WriteStructBeginAsync(tmp890, cancellationToken);
          var tmp891 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp891.Name = "sql";
            tmp891.Type = TType.String;
            tmp891.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp892 = new StringBuilder("sql_select_plain_args(");
        int tmp893 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp893++) { tmp892.Append(", "); }
          tmp892.Append("Sql: ");
          Sql.ToString(tmp892);
        }
        tmp892.Append(')');
        return tmp892.ToString();
      }
    }


    public partial class sql_select_plain_result : TBase
    {
      private List<CellPlain> _success;
      private Exception _e;

      public List<CellPlain> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_plain_result()
      {
      }

      public sql_select_plain_result DeepCopy()
      {
        var tmp894 = new sql_select_plain_result();
        if((Success != null) && __isset.success)
        {
          tmp894.Success = this.Success.DeepCopy();
        }
        tmp894.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp894.E = (Exception)this.E.DeepCopy();
        }
        tmp894.__isset.e = this.__isset.e;
        return tmp894;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list895 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellPlain>(_list895.Count);
                    for(int _i896 = 0; _i896 < _list895.Count; ++_i896)
                    {
                      CellPlain _elem897;
                      _elem897 = new CellPlain();
                      await _elem897.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem897);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp898 = new TStruct("sql_select_plain_result");
          await oprot.WriteStructBeginAsync(tmp898, cancellationToken);
          var tmp899 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp899.Name = "Success";
              tmp899.Type = TType.List;
              tmp899.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp899, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellPlain _iter900 in Success)
              {
                await _iter900.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp899.Name = "E";
              tmp899.Type = TType.Struct;
              tmp899.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp899, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp901 = new StringBuilder("sql_select_plain_result(");
        int tmp902 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp902++) { tmp901.Append(", "); }
          tmp901.Append("Success: ");
          Success.ToString(tmp901);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp902++) { tmp901.Append(", "); }
          tmp901.Append("E: ");
          E.ToString(tmp901);
        }
        tmp901.Append(')');
        return tmp901.ToString();
      }
    }


    public partial class sql_select_counter_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_counter_args()
      {
      }

      public sql_select_counter_args DeepCopy()
      {
        var tmp903 = new sql_select_counter_args();
        if((Sql != null) && __isset.sql)
        {
          tmp903.Sql = this.Sql;
        }
        tmp903.__isset.sql = this.__isset.sql;
        return tmp903;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp904 = new TStruct("sql_select_counter_args");
          await oprot.WriteStructBeginAsync(tmp904, cancellationToken);
          var tmp905 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp905.Name = "sql";
            tmp905.Type = TType.String;
            tmp905.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp905, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp906 = new StringBuilder("sql_select_counter_args(");
        int tmp907 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp907++) { tmp906.Append(", "); }
          tmp906.Append("Sql: ");
          Sql.ToString(tmp906);
        }
        tmp906.Append(')');
        return tmp906.ToString();
      }
    }


    public partial class sql_select_counter_result : TBase
    {
      private List<CellCounter> _success;
      private Exception _e;

      public List<CellCounter> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_counter_result()
      {
      }

      public sql_select_counter_result DeepCopy()
      {
        var tmp908 = new sql_select_counter_result();
        if((Success != null) && __isset.success)
        {
          tmp908.Success = this.Success.DeepCopy();
        }
        tmp908.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp908.E = (Exception)this.E.DeepCopy();
        }
        tmp908.__isset.e = this.__isset.e;
        return tmp908;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list909 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellCounter>(_list909.Count);
                    for(int _i910 = 0; _i910 < _list909.Count; ++_i910)
                    {
                      CellCounter _elem911;
                      _elem911 = new CellCounter();
                      await _elem911.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem911);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp912 = new TStruct("sql_select_counter_result");
          await oprot.WriteStructBeginAsync(tmp912, cancellationToken);
          var tmp913 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp913.Name = "Success";
              tmp913.Type = TType.List;
              tmp913.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp913, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellCounter _iter914 in Success)
              {
                await _iter914.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp913.Name = "E";
              tmp913.Type = TType.Struct;
              tmp913.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp913, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp915 = new StringBuilder("sql_select_counter_result(");
        int tmp916 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("Success: ");
          Success.ToString(tmp915);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("E: ");
          E.ToString(tmp915);
        }
        tmp915.Append(')');
        return tmp915.ToString();
      }
    }


    public partial class sql_select_serial_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_serial_args()
      {
      }

      public sql_select_serial_args DeepCopy()
      {
        var tmp917 = new sql_select_serial_args();
        if((Sql != null) && __isset.sql)
        {
          tmp917.Sql = this.Sql;
        }
        tmp917.__isset.sql = this.__isset.sql;
        return tmp917;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp918 = new TStruct("sql_select_serial_args");
          await oprot.WriteStructBeginAsync(tmp918, cancellationToken);
          var tmp919 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp919.Name = "sql";
            tmp919.Type = TType.String;
            tmp919.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp919, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp920 = new StringBuilder("sql_select_serial_args(");
        int tmp921 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp921++) { tmp920.Append(", "); }
          tmp920.Append("Sql: ");
          Sql.ToString(tmp920);
        }
        tmp920.Append(')');
        return tmp920.ToString();
      }
    }


    public partial class sql_select_serial_result : TBase
    {
      private List<CellSerial> _success;
      private Exception _e;

      public List<CellSerial> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_serial_result()
      {
      }

      public sql_select_serial_result DeepCopy()
      {
        var tmp922 = new sql_select_serial_result();
        if((Success != null) && __isset.success)
        {
          tmp922.Success = this.Success.DeepCopy();
        }
        tmp922.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp922.E = (Exception)this.E.DeepCopy();
        }
        tmp922.__isset.e = this.__isset.e;
        return tmp922;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list923 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellSerial>(_list923.Count);
                    for(int _i924 = 0; _i924 < _list923.Count; ++_i924)
                    {
                      CellSerial _elem925;
                      _elem925 = new CellSerial();
                      await _elem925.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem925);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp926 = new TStruct("sql_select_serial_result");
          await oprot.WriteStructBeginAsync(tmp926, cancellationToken);
          var tmp927 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp927.Name = "Success";
              tmp927.Type = TType.List;
              tmp927.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellSerial _iter928 in Success)
              {
                await _iter928.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp927.Name = "E";
              tmp927.Type = TType.Struct;
              tmp927.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp929 = new StringBuilder("sql_select_serial_result(");
        int tmp930 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp930++) { tmp929.Append(", "); }
          tmp929.Append("Success: ");
          Success.ToString(tmp929);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp930++) { tmp929.Append(", "); }
          tmp929.Append("E: ");
          E.ToString(tmp929);
        }
        tmp929.Append(')');
        return tmp929.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp931 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp931.Sql = this.Sql;
        }
        tmp931.__isset.sql = this.__isset.sql;
        return tmp931;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp932 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp932, cancellationToken);
          var tmp933 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp933.Name = "sql";
            tmp933.Type = TType.String;
            tmp933.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp933, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp934 = new StringBuilder("sql_select_args(");
        int tmp935 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp935++) { tmp934.Append(", "); }
          tmp934.Append("Sql: ");
          Sql.ToString(tmp934);
        }
        tmp934.Append(')');
        return tmp934.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp936 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp936.Success = (Cells)this.Success.DeepCopy();
        }
        tmp936.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp936.E = (Exception)this.E.DeepCopy();
        }
        tmp936.__isset.e = this.__isset.e;
        return tmp936;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp937 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp937, cancellationToken);
          var tmp938 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp938.Name = "Success";
              tmp938.Type = TType.Struct;
              tmp938.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp938, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp938.Name = "E";
              tmp938.Type = TType.Struct;
              tmp938.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp938, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp939 = new StringBuilder("sql_select_result(");
        int tmp940 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp940++) { tmp939.Append(", "); }
          tmp939.Append("Success: ");
          Success.ToString(tmp939);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp940++) { tmp939.Append(", "); }
          tmp939.Append("E: ");
          E.ToString(tmp939);
        }
        tmp939.Append(')');
        return tmp939.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp941 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp941.Sql = this.Sql;
        }
        tmp941.__isset.sql = this.__isset.sql;
        return tmp941;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp942 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp942, cancellationToken);
          var tmp943 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp943.Name = "sql";
            tmp943.Type = TType.String;
            tmp943.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp943, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp944 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp945 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp945++) { tmp944.Append(", "); }
          tmp944.Append("Sql: ");
          Sql.ToString(tmp944);
        }
        tmp944.Append(')');
        return tmp944.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp946 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp946.Success = this.Success.DeepCopy();
        }
        tmp946.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp946.E = (Exception)this.E.DeepCopy();
        }
        tmp946.__isset.e = this.__isset.e;
        return tmp946;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map947 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map947.Count);
                    for(int _i948 = 0; _i948 < _map947.Count; ++_i948)
                    {
                      string _key949;
                      ColCells _val950;
                      _key949 = await iprot.ReadStringAsync(cancellationToken);
                      _val950 = new ColCells();
                      await _val950.ReadAsync(iprot, cancellationToken);
                      Success[_key949] = _val950;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp951 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp951, cancellationToken);
          var tmp952 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp952.Name = "Success";
              tmp952.Type = TType.Map;
              tmp952.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp952, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter953 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter953, cancellationToken);
                await Success[_iter953].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp952.Name = "E";
              tmp952.Type = TType.Struct;
              tmp952.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp952, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp954 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp955 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp955++) { tmp954.Append(", "); }
          tmp954.Append("Success: ");
          Success.ToString(tmp954);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp955++) { tmp954.Append(", "); }
          tmp954.Append("E: ");
          E.ToString(tmp954);
        }
        tmp954.Append(')');
        return tmp954.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp956 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp956.Sql = this.Sql;
        }
        tmp956.__isset.sql = this.__isset.sql;
        return tmp956;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp957 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp957, cancellationToken);
          var tmp958 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp958.Name = "sql";
            tmp958.Type = TType.String;
            tmp958.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp958, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp959 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp960 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp960++) { tmp959.Append(", "); }
          tmp959.Append("Sql: ");
          Sql.ToString(tmp959);
        }
        tmp959.Append(')');
        return tmp959.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp961 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp961.Success = this.Success.DeepCopy();
        }
        tmp961.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp961.E = (Exception)this.E.DeepCopy();
        }
        tmp961.__isset.e = this.__isset.e;
        return tmp961;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list962 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list962.Count);
                    for(int _i963 = 0; _i963 < _list962.Count; ++_i963)
                    {
                      kCells _elem964;
                      _elem964 = new kCells();
                      await _elem964.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem964);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp965 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp965, cancellationToken);
          var tmp966 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp966.Name = "Success";
              tmp966.Type = TType.List;
              tmp966.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp966, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter967 in Success)
              {
                await _iter967.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp966.Name = "E";
              tmp966.Type = TType.Struct;
              tmp966.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp966, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp968 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp969 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp969++) { tmp968.Append(", "); }
          tmp968.Append("Success: ");
          Success.ToString(tmp968);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp969++) { tmp968.Append(", "); }
          tmp968.Append("E: ");
          E.ToString(tmp968);
        }
        tmp968.Append(')');
        return tmp968.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp970 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp970.Sql = this.Sql;
        }
        tmp970.__isset.sql = this.__isset.sql;
        return tmp970;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp971 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp971, cancellationToken);
          var tmp972 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp972.Name = "sql";
            tmp972.Type = TType.String;
            tmp972.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp972, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp973 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp974 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp974++) { tmp973.Append(", "); }
          tmp973.Append("Sql: ");
          Sql.ToString(tmp973);
        }
        tmp973.Append(')');
        return tmp973.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp975 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp975.Success = (FCells)this.Success.DeepCopy();
        }
        tmp975.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp975.E = (Exception)this.E.DeepCopy();
        }
        tmp975.__isset.e = this.__isset.e;
        return tmp975;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp976 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp976, cancellationToken);
          var tmp977 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp977.Name = "Success";
              tmp977.Type = TType.Struct;
              tmp977.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp977, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp977.Name = "E";
              tmp977.Type = TType.Struct;
              tmp977.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp977, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp978 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp979 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp979++) { tmp978.Append(", "); }
          tmp978.Append("Success: ");
          Success.ToString(tmp978);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp979++) { tmp978.Append(", "); }
          tmp978.Append("E: ");
          E.ToString(tmp978);
        }
        tmp978.Append(')');
        return tmp978.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp980 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp980.Sql = this.Sql;
        }
        tmp980.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp980.Rslt = this.Rslt;
        }
        tmp980.__isset.rslt = this.__isset.rslt;
        return tmp980;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp981 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp981, cancellationToken);
          var tmp982 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp982.Name = "sql";
            tmp982.Type = TType.String;
            tmp982.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp982, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp982.Name = "rslt";
            tmp982.Type = TType.I32;
            tmp982.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp982, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp983 = new StringBuilder("sql_query_args(");
        int tmp984 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp984++) { tmp983.Append(", "); }
          tmp983.Append("Sql: ");
          Sql.ToString(tmp983);
        }
        if(__isset.rslt)
        {
          if(0 < tmp984++) { tmp983.Append(", "); }
          tmp983.Append("Rslt: ");
          Rslt.ToString(tmp983);
        }
        tmp983.Append(')');
        return tmp983.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp985 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp985.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp985.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp985.E = (Exception)this.E.DeepCopy();
        }
        tmp985.__isset.e = this.__isset.e;
        return tmp985;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp986 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp986, cancellationToken);
          var tmp987 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp987.Name = "Success";
              tmp987.Type = TType.Struct;
              tmp987.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp987, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp987.Name = "E";
              tmp987.Type = TType.Struct;
              tmp987.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp987, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp988 = new StringBuilder("sql_query_result(");
        int tmp989 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp989++) { tmp988.Append(", "); }
          tmp988.Append("Success: ");
          Success.ToString(tmp988);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp989++) { tmp988.Append(", "); }
          tmp988.Append("E: ");
          E.ToString(tmp988);
        }
        tmp988.Append(')');
        return tmp988.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp990 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp990.Sql = this.Sql;
        }
        tmp990.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp990.Updater_id = this.Updater_id;
        }
        tmp990.__isset.updater_id = this.__isset.updater_id;
        return tmp990;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp991 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp991, cancellationToken);
          var tmp992 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp992.Name = "sql";
            tmp992.Type = TType.String;
            tmp992.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp992, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp992.Name = "updater_id";
            tmp992.Type = TType.I64;
            tmp992.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp992, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp993 = new StringBuilder("sql_update_args(");
        int tmp994 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp994++) { tmp993.Append(", "); }
          tmp993.Append("Sql: ");
          Sql.ToString(tmp993);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp994++) { tmp993.Append(", "); }
          tmp993.Append("Updater_id: ");
          Updater_id.ToString(tmp993);
        }
        tmp993.Append(')');
        return tmp993.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp995 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp995.E = (Exception)this.E.DeepCopy();
        }
        tmp995.__isset.e = this.__isset.e;
        return tmp995;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp996 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp996, cancellationToken);
          var tmp997 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp997.Name = "E";
              tmp997.Type = TType.Struct;
              tmp997.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp997, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp998 = new StringBuilder("sql_update_result(");
        int tmp999 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp999++) { tmp998.Append(", "); }
          tmp998.Append("E: ");
          E.ToString(tmp998);
        }
        tmp998.Append(')');
        return tmp998.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp1000 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp1000.Sql = this.Sql;
        }
        tmp1000.__isset.sql = this.__isset.sql;
        return tmp1000;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1001 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp1001, cancellationToken);
          var tmp1002 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp1002.Name = "sql";
            tmp1002.Type = TType.String;
            tmp1002.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1002, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1003 = new StringBuilder("exec_sql_args(");
        int tmp1004 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp1004++) { tmp1003.Append(", "); }
          tmp1003.Append("Sql: ");
          Sql.ToString(tmp1003);
        }
        tmp1003.Append(')');
        return tmp1003.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp1005 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp1005.Success = (Result)this.Success.DeepCopy();
        }
        tmp1005.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1005.E = (Exception)this.E.DeepCopy();
        }
        tmp1005.__isset.e = this.__isset.e;
        return tmp1005;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1006 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp1006, cancellationToken);
          var tmp1007 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1007.Name = "Success";
              tmp1007.Type = TType.Struct;
              tmp1007.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1007.Name = "E";
              tmp1007.Type = TType.Struct;
              tmp1007.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1008 = new StringBuilder("exec_sql_result(");
        int tmp1009 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1009++) { tmp1008.Append(", "); }
          tmp1008.Append("Success: ");
          Success.ToString(tmp1008);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1009++) { tmp1008.Append(", "); }
          tmp1008.Append("E: ");
          E.ToString(tmp1008);
        }
        tmp1008.Append(')');
        return tmp1008.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp1010 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp1010.Buffer_size = this.Buffer_size;
        }
        tmp1010.__isset.buffer_size = this.__isset.buffer_size;
        return tmp1010;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1011 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp1011, cancellationToken);
          var tmp1012 = new TField();
          if(__isset.buffer_size)
          {
            tmp1012.Name = "buffer_size";
            tmp1012.Type = TType.I32;
            tmp1012.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1012, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1013 = new StringBuilder("updater_create_args(");
        int tmp1014 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp1014++) { tmp1013.Append(", "); }
          tmp1013.Append("Buffer_size: ");
          Buffer_size.ToString(tmp1013);
        }
        tmp1013.Append(')');
        return tmp1013.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp1015 = new updater_create_result();
        if(__isset.success)
        {
          tmp1015.Success = this.Success;
        }
        tmp1015.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1015.E = (Exception)this.E.DeepCopy();
        }
        tmp1015.__isset.e = this.__isset.e;
        return tmp1015;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1016 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp1016, cancellationToken);
          var tmp1017 = new TField();

          if(this.__isset.success)
          {
            tmp1017.Name = "Success";
            tmp1017.Type = TType.I64;
            tmp1017.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp1017, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1017.Name = "E";
              tmp1017.Type = TType.Struct;
              tmp1017.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1017, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1018 = new StringBuilder("updater_create_result(");
        int tmp1019 = 0;
        if(__isset.success)
        {
          if(0 < tmp1019++) { tmp1018.Append(", "); }
          tmp1018.Append("Success: ");
          Success.ToString(tmp1018);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1019++) { tmp1018.Append(", "); }
          tmp1018.Append("E: ");
          E.ToString(tmp1018);
        }
        tmp1018.Append(')');
        return tmp1018.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp1020 = new updater_close_args();
        if(__isset.id)
        {
          tmp1020.Id = this.Id;
        }
        tmp1020.__isset.id = this.__isset.id;
        return tmp1020;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1021 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp1021, cancellationToken);
          var tmp1022 = new TField();
          if(__isset.id)
          {
            tmp1022.Name = "id";
            tmp1022.Type = TType.I64;
            tmp1022.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1022, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1023 = new StringBuilder("updater_close_args(");
        int tmp1024 = 0;
        if(__isset.id)
        {
          if(0 < tmp1024++) { tmp1023.Append(", "); }
          tmp1023.Append("Id: ");
          Id.ToString(tmp1023);
        }
        tmp1023.Append(')');
        return tmp1023.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp1025 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp1025.E = (Exception)this.E.DeepCopy();
        }
        tmp1025.__isset.e = this.__isset.e;
        return tmp1025;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1026 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp1026, cancellationToken);
          var tmp1027 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1027.Name = "E";
              tmp1027.Type = TType.Struct;
              tmp1027.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1027, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1028 = new StringBuilder("updater_close_result(");
        int tmp1029 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1029++) { tmp1028.Append(", "); }
          tmp1028.Append("E: ");
          E.ToString(tmp1028);
        }
        tmp1028.Append(')');
        return tmp1028.ToString();
      }
    }


    public partial class update_plain_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_plain_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_plain_args DeepCopy()
      {
        var tmp1030 = new update_plain_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1030.Cells = this.Cells.DeepCopy();
        }
        tmp1030.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1030.Updater_id = this.Updater_id;
        }
        tmp1030.__isset.updater_id = this.__isset.updater_id;
        return tmp1030;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1031 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellPlain>>(_map1031.Count);
                    for(int _i1032 = 0; _i1032 < _map1031.Count; ++_i1032)
                    {
                      long _key1033;
                      List<UCellPlain> _val1034;
                      _key1033 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1035 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1034 = new List<UCellPlain>(_list1035.Count);
                        for(int _i1036 = 0; _i1036 < _list1035.Count; ++_i1036)
                        {
                          UCellPlain _elem1037;
                          _elem1037 = new UCellPlain();
                          await _elem1037.ReadAsync(iprot, cancellationToken);
                          _val1034.Add(_elem1037);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1033] = _val1034;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1038 = new TStruct("update_plain_args");
          await oprot.WriteStructBeginAsync(tmp1038, cancellationToken);
          var tmp1039 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1039.Name = "cells";
            tmp1039.Type = TType.Map;
            tmp1039.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1039, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1040 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1040, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1040].Count), cancellationToken);
              foreach (UCellPlain _iter1041 in Cells[_iter1040])
              {
                await _iter1041.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1039.Name = "updater_id";
            tmp1039.Type = TType.I64;
            tmp1039.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1039, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1042 = new StringBuilder("update_plain_args(");
        int tmp1043 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1043++) { tmp1042.Append(", "); }
          tmp1042.Append("Cells: ");
          Cells.ToString(tmp1042);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1043++) { tmp1042.Append(", "); }
          tmp1042.Append("Updater_id: ");
          Updater_id.ToString(tmp1042);
        }
        tmp1042.Append(')');
        return tmp1042.ToString();
      }
    }


    public partial class update_plain_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_plain_result()
      {
      }

      public update_plain_result DeepCopy()
      {
        var tmp1044 = new update_plain_result();
        if((E != null) && __isset.e)
        {
          tmp1044.E = (Exception)this.E.DeepCopy();
        }
        tmp1044.__isset.e = this.__isset.e;
        return tmp1044;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1045 = new TStruct("update_plain_result");
          await oprot.WriteStructBeginAsync(tmp1045, cancellationToken);
          var tmp1046 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1046.Name = "E";
              tmp1046.Type = TType.Struct;
              tmp1046.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1046, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1047 = new StringBuilder("update_plain_result(");
        int tmp1048 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1048++) { tmp1047.Append(", "); }
          tmp1047.Append("E: ");
          E.ToString(tmp1047);
        }
        tmp1047.Append(')');
        return tmp1047.ToString();
      }
    }


    public partial class update_counter_args : TBase
    {
      private Dictionary<long, List<UCellCounter>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Counter Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_counter_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_counter_args DeepCopy()
      {
        var tmp1049 = new update_counter_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1049.Cells = this.Cells.DeepCopy();
        }
        tmp1049.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1049.Updater_id = this.Updater_id;
        }
        tmp1049.__isset.updater_id = this.__isset.updater_id;
        return tmp1049;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1050 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellCounter>>(_map1050.Count);
                    for(int _i1051 = 0; _i1051 < _map1050.Count; ++_i1051)
                    {
                      long _key1052;
                      List<UCellCounter> _val1053;
                      _key1052 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1054 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1053 = new List<UCellCounter>(_list1054.Count);
                        for(int _i1055 = 0; _i1055 < _list1054.Count; ++_i1055)
                        {
                          UCellCounter _elem1056;
                          _elem1056 = new UCellCounter();
                          await _elem1056.ReadAsync(iprot, cancellationToken);
                          _val1053.Add(_elem1056);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1052] = _val1053;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1057 = new TStruct("update_counter_args");
          await oprot.WriteStructBeginAsync(tmp1057, cancellationToken);
          var tmp1058 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1058.Name = "cells";
            tmp1058.Type = TType.Map;
            tmp1058.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1058, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1059 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1059, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1059].Count), cancellationToken);
              foreach (UCellCounter _iter1060 in Cells[_iter1059])
              {
                await _iter1060.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1058.Name = "updater_id";
            tmp1058.Type = TType.I64;
            tmp1058.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1058, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1061 = new StringBuilder("update_counter_args(");
        int tmp1062 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1062++) { tmp1061.Append(", "); }
          tmp1061.Append("Cells: ");
          Cells.ToString(tmp1061);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1062++) { tmp1061.Append(", "); }
          tmp1061.Append("Updater_id: ");
          Updater_id.ToString(tmp1061);
        }
        tmp1061.Append(')');
        return tmp1061.ToString();
      }
    }


    public partial class update_counter_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_counter_result()
      {
      }

      public update_counter_result DeepCopy()
      {
        var tmp1063 = new update_counter_result();
        if((E != null) && __isset.e)
        {
          tmp1063.E = (Exception)this.E.DeepCopy();
        }
        tmp1063.__isset.e = this.__isset.e;
        return tmp1063;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1064 = new TStruct("update_counter_result");
          await oprot.WriteStructBeginAsync(tmp1064, cancellationToken);
          var tmp1065 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1065.Name = "E";
              tmp1065.Type = TType.Struct;
              tmp1065.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1065, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1066 = new StringBuilder("update_counter_result(");
        int tmp1067 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1067++) { tmp1066.Append(", "); }
          tmp1066.Append("E: ");
          E.ToString(tmp1066);
        }
        tmp1066.Append(')');
        return tmp1066.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp1068 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp1068.Cells = this.Cells.DeepCopy();
        }
        tmp1068.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp1068.Updater_id = this.Updater_id;
        }
        tmp1068.__isset.updater_id = this.__isset.updater_id;
        return tmp1068;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1069 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map1069.Count);
                    for(int _i1070 = 0; _i1070 < _map1069.Count; ++_i1070)
                    {
                      long _key1071;
                      List<UCellSerial> _val1072;
                      _key1071 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1073 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1072 = new List<UCellSerial>(_list1073.Count);
                        for(int _i1074 = 0; _i1074 < _list1073.Count; ++_i1074)
                        {
                          UCellSerial _elem1075;
                          _elem1075 = new UCellSerial();
                          await _elem1075.ReadAsync(iprot, cancellationToken);
                          _val1072.Add(_elem1075);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1071] = _val1072;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1076 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp1076, cancellationToken);
          var tmp1077 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1077.Name = "cells";
            tmp1077.Type = TType.Map;
            tmp1077.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1077, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1078 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1078, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1078].Count), cancellationToken);
              foreach (UCellSerial _iter1079 in Cells[_iter1078])
              {
                await _iter1079.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1077.Name = "updater_id";
            tmp1077.Type = TType.I64;
            tmp1077.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1077, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1080 = new StringBuilder("update_serial_args(");
        int tmp1081 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1081++) { tmp1080.Append(", "); }
          tmp1080.Append("Cells: ");
          Cells.ToString(tmp1080);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1081++) { tmp1080.Append(", "); }
          tmp1080.Append("Updater_id: ");
          Updater_id.ToString(tmp1080);
        }
        tmp1080.Append(')');
        return tmp1080.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp1082 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp1082.E = (Exception)this.E.DeepCopy();
        }
        tmp1082.__isset.e = this.__isset.e;
        return tmp1082;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1083 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp1083, cancellationToken);
          var tmp1084 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1084.Name = "E";
              tmp1084.Type = TType.Struct;
              tmp1084.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1084, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1085 = new StringBuilder("update_serial_result(");
        int tmp1086 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1086++) { tmp1085.Append(", "); }
          tmp1085.Append("E: ");
          E.ToString(tmp1085);
        }
        tmp1085.Append(')');
        return tmp1085.ToString();
      }
    }


    public partial class update_by_types_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _plain;
      private Dictionary<long, List<UCellCounter>> _counter;
      private Dictionary<long, List<UCellSerial>> _serial;
      private long _updater_id;

      /// <summary>
      /// The PLAIN Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Plain
      {
        get
        {
          return _plain;
        }
        set
        {
          __isset.plain = true;
          this._plain = value;
        }
      }

      /// <summary>
      /// The COUNTER Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Counter
      {
        get
        {
          return _counter;
        }
        set
        {
          __isset.counter = true;
          this._counter = value;
        }
      }

      /// <summary>
      /// The SERIAL Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Serial
      {
        get
        {
          return _serial;
        }
        set
        {
          __isset.serial = true;
          this._serial = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool plain;
        public bool counter;
        public bool serial;
        public bool updater_id;
      }

      public update_by_types_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_by_types_args DeepCopy()
      {
        var tmp1087 = new update_by_types_args();
        if((Plain != null) && __isset.plain)
        {
          tmp1087.Plain = this.Plain.DeepCopy();
        }
        tmp1087.__isset.plain = this.__isset.plain;
        if((Counter != null) && __isset.counter)
        {
          tmp1087.Counter = this.Counter.DeepCopy();
        }
        tmp1087.__isset.counter = this.__isset.counter;
        if((Serial != null) && __isset.serial)
        {
          tmp1087.Serial = this.Serial.DeepCopy();
        }
        tmp1087.__isset.serial = this.__isset.serial;
        if(__isset.updater_id)
        {
          tmp1087.Updater_id = this.Updater_id;
        }
        tmp1087.__isset.updater_id = this.__isset.updater_id;
        return tmp1087;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1088 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Plain = new Dictionary<long, List<UCellPlain>>(_map1088.Count);
                    for(int _i1089 = 0; _i1089 < _map1088.Count; ++_i1089)
                    {
                      long _key1090;
                      List<UCellPlain> _val1091;
                      _key1090 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1092 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1091 = new List<UCellPlain>(_list1092.Count);
                        for(int _i1093 = 0; _i1093 < _list1092.Count; ++_i1093)
                        {
                          UCellPlain _elem1094;
                          _elem1094 = new UCellPlain();
                          await _elem1094.ReadAsync(iprot, cancellationToken);
                          _val1091.Add(_elem1094);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Plain[_key1090] = _val1091;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1095 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Counter = new Dictionary<long, List<UCellCounter>>(_map1095.Count);
                    for(int _i1096 = 0; _i1096 < _map1095.Count; ++_i1096)
                    {
                      long _key1097;
                      List<UCellCounter> _val1098;
                      _key1097 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1099 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1098 = new List<UCellCounter>(_list1099.Count);
                        for(int _i1100 = 0; _i1100 < _list1099.Count; ++_i1100)
                        {
                          UCellCounter _elem1101;
                          _elem1101 = new UCellCounter();
                          await _elem1101.ReadAsync(iprot, cancellationToken);
                          _val1098.Add(_elem1101);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Counter[_key1097] = _val1098;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1102 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Serial = new Dictionary<long, List<UCellSerial>>(_map1102.Count);
                    for(int _i1103 = 0; _i1103 < _map1102.Count; ++_i1103)
                    {
                      long _key1104;
                      List<UCellSerial> _val1105;
                      _key1104 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1106 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1105 = new List<UCellSerial>(_list1106.Count);
                        for(int _i1107 = 0; _i1107 < _list1106.Count; ++_i1107)
                        {
                          UCellSerial _elem1108;
                          _elem1108 = new UCellSerial();
                          await _elem1108.ReadAsync(iprot, cancellationToken);
                          _val1105.Add(_elem1108);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Serial[_key1104] = _val1105;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1109 = new TStruct("update_by_types_args");
          await oprot.WriteStructBeginAsync(tmp1109, cancellationToken);
          var tmp1110 = new TField();
          if((Plain != null) && __isset.plain)
          {
            tmp1110.Name = "plain";
            tmp1110.Type = TType.Map;
            tmp1110.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1110, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Plain.Count), cancellationToken);
            foreach (long _iter1111 in Plain.Keys)
            {
              await oprot.WriteI64Async(_iter1111, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain[_iter1111].Count), cancellationToken);
              foreach (UCellPlain _iter1112 in Plain[_iter1111])
              {
                await _iter1112.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Counter != null) && __isset.counter)
          {
            tmp1110.Name = "counter";
            tmp1110.Type = TType.Map;
            tmp1110.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1110, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Counter.Count), cancellationToken);
            foreach (long _iter1113 in Counter.Keys)
            {
              await oprot.WriteI64Async(_iter1113, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter[_iter1113].Count), cancellationToken);
              foreach (UCellCounter _iter1114 in Counter[_iter1113])
              {
                await _iter1114.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Serial != null) && __isset.serial)
          {
            tmp1110.Name = "serial";
            tmp1110.Type = TType.Map;
            tmp1110.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp1110, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Serial.Count), cancellationToken);
            foreach (long _iter1115 in Serial.Keys)
            {
              await oprot.WriteI64Async(_iter1115, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial[_iter1115].Count), cancellationToken);
              foreach (UCellSerial _iter1116 in Serial[_iter1115])
              {
                await _iter1116.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1110.Name = "updater_id";
            tmp1110.Type = TType.I64;
            tmp1110.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp1110, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.plain == other.__isset.plain) && ((!__isset.plain) || (global::System.Object.Equals(Plain, other.Plain))))
          && ((__isset.counter == other.__isset.counter) && ((!__isset.counter) || (global::System.Object.Equals(Counter, other.Counter))))
          && ((__isset.serial == other.__isset.serial) && ((!__isset.serial) || (global::System.Object.Equals(Serial, other.Serial))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Plain != null) && __isset.plain)
          {
            hashcode = (hashcode * 397) + Plain.GetHashCode();
          }
          if((Counter != null) && __isset.counter)
          {
            hashcode = (hashcode * 397) + Counter.GetHashCode();
          }
          if((Serial != null) && __isset.serial)
          {
            hashcode = (hashcode * 397) + Serial.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1117 = new StringBuilder("update_by_types_args(");
        int tmp1118 = 0;
        if((Plain != null) && __isset.plain)
        {
          if(0 < tmp1118++) { tmp1117.Append(", "); }
          tmp1117.Append("Plain: ");
          Plain.ToString(tmp1117);
        }
        if((Counter != null) && __isset.counter)
        {
          if(0 < tmp1118++) { tmp1117.Append(", "); }
          tmp1117.Append("Counter: ");
          Counter.ToString(tmp1117);
        }
        if((Serial != null) && __isset.serial)
        {
          if(0 < tmp1118++) { tmp1117.Append(", "); }
          tmp1117.Append("Serial: ");
          Serial.ToString(tmp1117);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1118++) { tmp1117.Append(", "); }
          tmp1117.Append("Updater_id: ");
          Updater_id.ToString(tmp1117);
        }
        tmp1117.Append(')');
        return tmp1117.ToString();
      }
    }


    public partial class update_by_types_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_by_types_result()
      {
      }

      public update_by_types_result DeepCopy()
      {
        var tmp1119 = new update_by_types_result();
        if((E != null) && __isset.e)
        {
          tmp1119.E = (Exception)this.E.DeepCopy();
        }
        tmp1119.__isset.e = this.__isset.e;
        return tmp1119;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1120 = new TStruct("update_by_types_result");
          await oprot.WriteStructBeginAsync(tmp1120, cancellationToken);
          var tmp1121 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1121.Name = "E";
              tmp1121.Type = TType.Struct;
              tmp1121.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1121, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1122 = new StringBuilder("update_by_types_result(");
        int tmp1123 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1123++) { tmp1122.Append(", "); }
          tmp1122.Append("E: ");
          E.ToString(tmp1122);
        }
        tmp1122.Append(')');
        return tmp1122.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp1124 = new mng_column_args();
        if(__isset.func)
        {
          tmp1124.Func = this.Func;
        }
        tmp1124.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp1124.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp1124.__isset.schema = this.__isset.schema;
        return tmp1124;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1125 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp1125, cancellationToken);
          var tmp1126 = new TField();
          if(__isset.func)
          {
            tmp1126.Name = "func";
            tmp1126.Type = TType.I32;
            tmp1126.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1126, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp1126.Name = "schema";
            tmp1126.Type = TType.Struct;
            tmp1126.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1126, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1127 = new StringBuilder("mng_column_args(");
        int tmp1128 = 0;
        if(__isset.func)
        {
          if(0 < tmp1128++) { tmp1127.Append(", "); }
          tmp1127.Append("Func: ");
          Func.ToString(tmp1127);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp1128++) { tmp1127.Append(", "); }
          tmp1127.Append("Schema: ");
          Schema.ToString(tmp1127);
        }
        tmp1127.Append(')');
        return tmp1127.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp1129 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp1129.E = (Exception)this.E.DeepCopy();
        }
        tmp1129.__isset.e = this.__isset.e;
        return tmp1129;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1130 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp1130, cancellationToken);
          var tmp1131 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1131.Name = "E";
              tmp1131.Type = TType.Struct;
              tmp1131.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1131, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1132 = new StringBuilder("mng_column_result(");
        int tmp1133 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1133++) { tmp1132.Append(", "); }
          tmp1132.Append("E: ");
          E.ToString(tmp1132);
        }
        tmp1132.Append(')');
        return tmp1132.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp1134 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1134.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1134.__isset.spec = this.__isset.spec;
        return tmp1134;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1135 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp1135, cancellationToken);
          var tmp1136 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1136.Name = "spec";
            tmp1136.Type = TType.Struct;
            tmp1136.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1136, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1137 = new StringBuilder("list_columns_args(");
        int tmp1138 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1138++) { tmp1137.Append(", "); }
          tmp1137.Append("Spec: ");
          Spec.ToString(tmp1137);
        }
        tmp1137.Append(')');
        return tmp1137.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp1139 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1139.Success = this.Success.DeepCopy();
        }
        tmp1139.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1139.E = (Exception)this.E.DeepCopy();
        }
        tmp1139.__isset.e = this.__isset.e;
        return tmp1139;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1140 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list1140.Count);
                    for(int _i1141 = 0; _i1141 < _list1140.Count; ++_i1141)
                    {
                      Schema _elem1142;
                      _elem1142 = new Schema();
                      await _elem1142.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1142);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1143 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp1143, cancellationToken);
          var tmp1144 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1144.Name = "Success";
              tmp1144.Type = TType.List;
              tmp1144.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1144, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter1145 in Success)
              {
                await _iter1145.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1144.Name = "E";
              tmp1144.Type = TType.Struct;
              tmp1144.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1144, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1146 = new StringBuilder("list_columns_result(");
        int tmp1147 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1147++) { tmp1146.Append(", "); }
          tmp1146.Append("Success: ");
          Success.ToString(tmp1146);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1147++) { tmp1146.Append(", "); }
          tmp1146.Append("E: ");
          E.ToString(tmp1146);
        }
        tmp1146.Append(')');
        return tmp1146.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp1148 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1148.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1148.__isset.spec = this.__isset.spec;
        return tmp1148;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1149 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp1149, cancellationToken);
          var tmp1150 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1150.Name = "spec";
            tmp1150.Type = TType.Struct;
            tmp1150.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1150, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1151 = new StringBuilder("compact_columns_args(");
        int tmp1152 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1152++) { tmp1151.Append(", "); }
          tmp1151.Append("Spec: ");
          Spec.ToString(tmp1151);
        }
        tmp1151.Append(')');
        return tmp1151.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp1153 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1153.Success = this.Success.DeepCopy();
        }
        tmp1153.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1153.E = (Exception)this.E.DeepCopy();
        }
        tmp1153.__isset.e = this.__isset.e;
        return tmp1153;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1154 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list1154.Count);
                    for(int _i1155 = 0; _i1155 < _list1154.Count; ++_i1155)
                    {
                      CompactResult _elem1156;
                      _elem1156 = new CompactResult();
                      await _elem1156.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1156);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1157 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp1157, cancellationToken);
          var tmp1158 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1158.Name = "Success";
              tmp1158.Type = TType.List;
              tmp1158.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1158, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter1159 in Success)
              {
                await _iter1159.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1158.Name = "E";
              tmp1158.Type = TType.Struct;
              tmp1158.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1158, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1160 = new StringBuilder("compact_columns_result(");
        int tmp1161 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1161++) { tmp1160.Append(", "); }
          tmp1160.Append("Success: ");
          Success.ToString(tmp1160);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1161++) { tmp1160.Append(", "); }
          tmp1160.Append("E: ");
          E.ToString(tmp1160);
        }
        tmp1160.Append(')');
        return tmp1160.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp1162 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1162.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1162.__isset.spec = this.__isset.spec;
        return tmp1162;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1163 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp1163, cancellationToken);
          var tmp1164 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1164.Name = "spec";
            tmp1164.Type = TType.Struct;
            tmp1164.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1164, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1165 = new StringBuilder("scan_args(");
        int tmp1166 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1166++) { tmp1165.Append(", "); }
          tmp1165.Append("Spec: ");
          Spec.ToString(tmp1165);
        }
        tmp1165.Append(')');
        return tmp1165.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp1167 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp1167.Success = (Cells)this.Success.DeepCopy();
        }
        tmp1167.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1167.E = (Exception)this.E.DeepCopy();
        }
        tmp1167.__isset.e = this.__isset.e;
        return tmp1167;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1168 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp1168, cancellationToken);
          var tmp1169 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1169.Name = "Success";
              tmp1169.Type = TType.Struct;
              tmp1169.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1169, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1169.Name = "E";
              tmp1169.Type = TType.Struct;
              tmp1169.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1169, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1170 = new StringBuilder("scan_result(");
        int tmp1171 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1171++) { tmp1170.Append(", "); }
          tmp1170.Append("Success: ");
          Success.ToString(tmp1170);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1171++) { tmp1170.Append(", "); }
          tmp1170.Append("E: ");
          E.ToString(tmp1170);
        }
        tmp1170.Append(')');
        return tmp1170.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp1172 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1172.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1172.__isset.spec = this.__isset.spec;
        return tmp1172;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1173 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp1173, cancellationToken);
          var tmp1174 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1174.Name = "spec";
            tmp1174.Type = TType.Struct;
            tmp1174.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1174, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1175 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp1176 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1176++) { tmp1175.Append(", "); }
          tmp1175.Append("Spec: ");
          Spec.ToString(tmp1175);
        }
        tmp1175.Append(')');
        return tmp1175.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp1177 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp1177.Success = this.Success.DeepCopy();
        }
        tmp1177.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1177.E = (Exception)this.E.DeepCopy();
        }
        tmp1177.__isset.e = this.__isset.e;
        return tmp1177;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1178 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map1178.Count);
                    for(int _i1179 = 0; _i1179 < _map1178.Count; ++_i1179)
                    {
                      string _key1180;
                      ColCells _val1181;
                      _key1180 = await iprot.ReadStringAsync(cancellationToken);
                      _val1181 = new ColCells();
                      await _val1181.ReadAsync(iprot, cancellationToken);
                      Success[_key1180] = _val1181;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1182 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp1182, cancellationToken);
          var tmp1183 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1183.Name = "Success";
              tmp1183.Type = TType.Map;
              tmp1183.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1183, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter1184 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter1184, cancellationToken);
                await Success[_iter1184].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1183.Name = "E";
              tmp1183.Type = TType.Struct;
              tmp1183.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1183, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1185 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp1186 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1186++) { tmp1185.Append(", "); }
          tmp1185.Append("Success: ");
          Success.ToString(tmp1185);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1186++) { tmp1185.Append(", "); }
          tmp1185.Append("E: ");
          E.ToString(tmp1185);
        }
        tmp1185.Append(')');
        return tmp1185.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp1187 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1187.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1187.__isset.spec = this.__isset.spec;
        return tmp1187;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1188 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp1188, cancellationToken);
          var tmp1189 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1189.Name = "spec";
            tmp1189.Type = TType.Struct;
            tmp1189.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1189, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1190 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp1191 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1191++) { tmp1190.Append(", "); }
          tmp1190.Append("Spec: ");
          Spec.ToString(tmp1190);
        }
        tmp1190.Append(')');
        return tmp1190.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp1192 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp1192.Success = this.Success.DeepCopy();
        }
        tmp1192.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1192.E = (Exception)this.E.DeepCopy();
        }
        tmp1192.__isset.e = this.__isset.e;
        return tmp1192;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1193 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list1193.Count);
                    for(int _i1194 = 0; _i1194 < _list1193.Count; ++_i1194)
                    {
                      kCells _elem1195;
                      _elem1195 = new kCells();
                      await _elem1195.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1195);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1196 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp1196, cancellationToken);
          var tmp1197 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1197.Name = "Success";
              tmp1197.Type = TType.List;
              tmp1197.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1197, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter1198 in Success)
              {
                await _iter1198.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1197.Name = "E";
              tmp1197.Type = TType.Struct;
              tmp1197.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1197, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1199 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp1200 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1200++) { tmp1199.Append(", "); }
          tmp1199.Append("Success: ");
          Success.ToString(tmp1199);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1200++) { tmp1199.Append(", "); }
          tmp1199.Append("E: ");
          E.ToString(tmp1199);
        }
        tmp1199.Append(')');
        return tmp1199.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp1201 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1201.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1201.__isset.spec = this.__isset.spec;
        return tmp1201;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1202 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp1202, cancellationToken);
          var tmp1203 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1203.Name = "spec";
            tmp1203.Type = TType.Struct;
            tmp1203.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1203, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1204 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp1205 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1205++) { tmp1204.Append(", "); }
          tmp1204.Append("Spec: ");
          Spec.ToString(tmp1204);
        }
        tmp1204.Append(')');
        return tmp1204.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp1206 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp1206.Success = (FCells)this.Success.DeepCopy();
        }
        tmp1206.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1206.E = (Exception)this.E.DeepCopy();
        }
        tmp1206.__isset.e = this.__isset.e;
        return tmp1206;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1207 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp1207, cancellationToken);
          var tmp1208 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1208.Name = "Success";
              tmp1208.Type = TType.Struct;
              tmp1208.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1208.Name = "E";
              tmp1208.Type = TType.Struct;
              tmp1208.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1208, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1209 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp1210 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1210++) { tmp1209.Append(", "); }
          tmp1209.Append("Success: ");
          Success.ToString(tmp1209);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1210++) { tmp1209.Append(", "); }
          tmp1209.Append("E: ");
          E.ToString(tmp1209);
        }
        tmp1209.Append(')');
        return tmp1209.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp1211 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1211.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1211.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp1211.Rslt = this.Rslt;
        }
        tmp1211.__isset.rslt = this.__isset.rslt;
        return tmp1211;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1212 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp1212, cancellationToken);
          var tmp1213 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1213.Name = "spec";
            tmp1213.Type = TType.Struct;
            tmp1213.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1213, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp1213.Name = "rslt";
            tmp1213.Type = TType.I32;
            tmp1213.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1213, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1214 = new StringBuilder("scan_rslt_on_args(");
        int tmp1215 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1215++) { tmp1214.Append(", "); }
          tmp1214.Append("Spec: ");
          Spec.ToString(tmp1214);
        }
        if(__isset.rslt)
        {
          if(0 < tmp1215++) { tmp1214.Append(", "); }
          tmp1214.Append("Rslt: ");
          Rslt.ToString(tmp1214);
        }
        tmp1214.Append(')');
        return tmp1214.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp1216 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp1216.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp1216.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1216.E = (Exception)this.E.DeepCopy();
        }
        tmp1216.__isset.e = this.__isset.e;
        return tmp1216;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1217 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp1217, cancellationToken);
          var tmp1218 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1218.Name = "Success";
              tmp1218.Type = TType.Struct;
              tmp1218.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1218, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1218.Name = "E";
              tmp1218.Type = TType.Struct;
              tmp1218.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1218, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1219 = new StringBuilder("scan_rslt_on_result(");
        int tmp1220 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1220++) { tmp1219.Append(", "); }
          tmp1219.Append("Success: ");
          Success.ToString(tmp1219);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1220++) { tmp1219.Append(", "); }
          tmp1219.Append("E: ");
          E.ToString(tmp1219);
        }
        tmp1219.Append(')');
        return tmp1219.ToString();
      }
    }

  }

}
