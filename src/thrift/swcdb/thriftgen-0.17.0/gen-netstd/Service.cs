/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsPlain.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsCounter.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in CellsSerial.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Plain,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Counter,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Counter Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method is to update cells by several Column-Types,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="plain">The PLAIN Cells to update</param>
    /// <param name="counter">The COUNTER Cells to update</param>
    /// <param name="serial">The SERIAL Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp511 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp511.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp512 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp512.Type == TMessageType.Exception)
      {
        var tmp513 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp513;
      }

      var tmp514 = new InternalStructs.sql_mng_column_result();
      await tmp514.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp514.__isset.e)
      {
        throw tmp514.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp515 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp515.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp516 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp516.Type == TMessageType.Exception)
      {
        var tmp517 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp517;
      }

      var tmp518 = new InternalStructs.sql_list_columns_result();
      await tmp518.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp518.__isset.success)
      {
        return tmp518.Success;
      }
      if (tmp518.__isset.e)
      {
        throw tmp518.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp519 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp519.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp520 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp520.Type == TMessageType.Exception)
      {
        var tmp521 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp521;
      }

      var tmp522 = new InternalStructs.sql_compact_columns_result();
      await tmp522.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp522.__isset.success)
      {
        return tmp522.Success;
      }
      if (tmp522.__isset.e)
      {
        throw tmp522.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp523 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp523.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp524 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp524.Type == TMessageType.Exception)
      {
        var tmp525 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp525;
      }

      var tmp526 = new InternalStructs.sql_select_result();
      await tmp526.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp526.__isset.success)
      {
        return tmp526.Success;
      }
      if (tmp526.__isset.e)
      {
        throw tmp526.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_plain(sql, cancellationToken);
      return await recv_sql_select_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_plain(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp527 = new InternalStructs.sql_select_plain_args() {
        Sql = sql,
      };
      
      await tmp527.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellPlain>> recv_sql_select_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp528 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp528.Type == TMessageType.Exception)
      {
        var tmp529 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp529;
      }

      var tmp530 = new InternalStructs.sql_select_plain_result();
      await tmp530.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp530.__isset.success)
      {
        return tmp530.Success;
      }
      if (tmp530.__isset.e)
      {
        throw tmp530.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_plain failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_counter(sql, cancellationToken);
      return await recv_sql_select_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_counter(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp531 = new InternalStructs.sql_select_counter_args() {
        Sql = sql,
      };
      
      await tmp531.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellCounter>> recv_sql_select_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp532 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp532.Type == TMessageType.Exception)
      {
        var tmp533 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp533;
      }

      var tmp534 = new InternalStructs.sql_select_counter_result();
      await tmp534.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp534.__isset.success)
      {
        return tmp534.Success;
      }
      if (tmp534.__isset.e)
      {
        throw tmp534.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_counter failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_serial(sql, cancellationToken);
      return await recv_sql_select_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_serial(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp535 = new InternalStructs.sql_select_serial_args() {
        Sql = sql,
      };
      
      await tmp535.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CellSerial>> recv_sql_select_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp536 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp536.Type == TMessageType.Exception)
      {
        var tmp537 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp537;
      }

      var tmp538 = new InternalStructs.sql_select_serial_result();
      await tmp538.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp538.__isset.success)
      {
        return tmp538.Success;
      }
      if (tmp538.__isset.e)
      {
        throw tmp538.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_serial failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp539 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp539.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp540 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp540.Type == TMessageType.Exception)
      {
        var tmp541 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp541;
      }

      var tmp542 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp542.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp542.__isset.success)
      {
        return tmp542.Success;
      }
      if (tmp542.__isset.e)
      {
        throw tmp542.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp543 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp543.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp544 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp544.Type == TMessageType.Exception)
      {
        var tmp545 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp545;
      }

      var tmp546 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp546.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp546.__isset.success)
      {
        return tmp546.Success;
      }
      if (tmp546.__isset.e)
      {
        throw tmp546.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp547 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp547.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp548 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp548.Type == TMessageType.Exception)
      {
        var tmp549 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp549;
      }

      var tmp550 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp550.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp550.__isset.success)
      {
        return tmp550.Success;
      }
      if (tmp550.__isset.e)
      {
        throw tmp550.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp551 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp551.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp552 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp552.Type == TMessageType.Exception)
      {
        var tmp553 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp553;
      }

      var tmp554 = new InternalStructs.sql_query_result();
      await tmp554.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp554.__isset.success)
      {
        return tmp554.Success;
      }
      if (tmp554.__isset.e)
      {
        throw tmp554.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp555 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp555.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp556 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp556.Type == TMessageType.Exception)
      {
        var tmp557 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp557;
      }

      var tmp558 = new InternalStructs.sql_update_result();
      await tmp558.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp558.__isset.e)
      {
        throw tmp558.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp559 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp559.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp560 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp560.Type == TMessageType.Exception)
      {
        var tmp561 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp561;
      }

      var tmp562 = new InternalStructs.exec_sql_result();
      await tmp562.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp562.__isset.success)
      {
        return tmp562.Success;
      }
      if (tmp562.__isset.e)
      {
        throw tmp562.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp563 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp563.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp564 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp564.Type == TMessageType.Exception)
      {
        var tmp565 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp565;
      }

      var tmp566 = new InternalStructs.updater_create_result();
      await tmp566.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp566.__isset.success)
      {
        return tmp566.Success;
      }
      if (tmp566.__isset.e)
      {
        throw tmp566.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp567 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp567.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp568 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp568.Type == TMessageType.Exception)
      {
        var tmp569 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp569;
      }

      var tmp570 = new InternalStructs.updater_close_result();
      await tmp570.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp570.__isset.e)
      {
        throw tmp570.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_plain(cells, updater_id, cancellationToken);
      await recv_update_plain(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_plain(Dictionary<long, List<UCellPlain>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp571 = new InternalStructs.update_plain_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp571.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_plain(CancellationToken cancellationToken = default)
    {
      
      var tmp572 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp572.Type == TMessageType.Exception)
      {
        var tmp573 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp573;
      }

      var tmp574 = new InternalStructs.update_plain_result();
      await tmp574.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp574.__isset.e)
      {
        throw tmp574.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_counter(cells, updater_id, cancellationToken);
      await recv_update_counter(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_counter(Dictionary<long, List<UCellCounter>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp575 = new InternalStructs.update_counter_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp575.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_counter(CancellationToken cancellationToken = default)
    {
      
      var tmp576 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp576.Type == TMessageType.Exception)
      {
        var tmp577 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp577;
      }

      var tmp578 = new InternalStructs.update_counter_result();
      await tmp578.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp578.__isset.e)
      {
        throw tmp578.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp579 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp579.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp580 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp580.Type == TMessageType.Exception)
      {
        var tmp581 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp581;
      }

      var tmp582 = new InternalStructs.update_serial_result();
      await tmp582.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp582.__isset.e)
      {
        throw tmp582.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_by_types(plain, counter, serial, updater_id, cancellationToken);
      await recv_update_by_types(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_by_types(Dictionary<long, List<UCellPlain>> plain, Dictionary<long, List<UCellCounter>> counter, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp583 = new InternalStructs.update_by_types_args() {
        Plain = plain,
        Counter = counter,
        Serial = serial,
        Updater_id = updater_id,
      };
      
      await tmp583.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_by_types(CancellationToken cancellationToken = default)
    {
      
      var tmp584 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp584.Type == TMessageType.Exception)
      {
        var tmp585 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp585;
      }

      var tmp586 = new InternalStructs.update_by_types_result();
      await tmp586.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp586.__isset.e)
      {
        throw tmp586.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp587 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp587.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp588 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp588.Type == TMessageType.Exception)
      {
        var tmp589 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp589;
      }

      var tmp590 = new InternalStructs.mng_column_result();
      await tmp590.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp590.__isset.e)
      {
        throw tmp590.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp591 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp591.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp592 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp592.Type == TMessageType.Exception)
      {
        var tmp593 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp593;
      }

      var tmp594 = new InternalStructs.list_columns_result();
      await tmp594.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp594.__isset.success)
      {
        return tmp594.Success;
      }
      if (tmp594.__isset.e)
      {
        throw tmp594.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp595 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp595.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp596 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp596.Type == TMessageType.Exception)
      {
        var tmp597 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp597;
      }

      var tmp598 = new InternalStructs.compact_columns_result();
      await tmp598.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp598.__isset.success)
      {
        return tmp598.Success;
      }
      if (tmp598.__isset.e)
      {
        throw tmp598.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp599 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp599.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp600 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp600.Type == TMessageType.Exception)
      {
        var tmp601 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp601;
      }

      var tmp602 = new InternalStructs.scan_result();
      await tmp602.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp602.__isset.success)
      {
        return tmp602.Success;
      }
      if (tmp602.__isset.e)
      {
        throw tmp602.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp603 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp603.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp604 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp604.Type == TMessageType.Exception)
      {
        var tmp605 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp605;
      }

      var tmp606 = new InternalStructs.scan_rslt_on_column_result();
      await tmp606.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp606.__isset.success)
      {
        return tmp606.Success;
      }
      if (tmp606.__isset.e)
      {
        throw tmp606.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp607 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp607.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp608 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp608.Type == TMessageType.Exception)
      {
        var tmp609 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp609;
      }

      var tmp610 = new InternalStructs.scan_rslt_on_key_result();
      await tmp610.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp610.__isset.success)
      {
        return tmp610.Success;
      }
      if (tmp610.__isset.e)
      {
        throw tmp610.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp611 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp611.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp612 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp612.Type == TMessageType.Exception)
      {
        var tmp613 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp613;
      }

      var tmp614 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp614.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp614.__isset.success)
      {
        return tmp614.Success;
      }
      if (tmp614.__isset.e)
      {
        throw tmp614.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp615 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp615.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp616 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp616.Type == TMessageType.Exception)
      {
        var tmp617 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp617;
      }

      var tmp618 = new InternalStructs.scan_rslt_on_result();
      await tmp618.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp618.__isset.success)
      {
        return tmp618.Success;
      }
      if (tmp618.__isset.e)
      {
        throw tmp618.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_plain"] = sql_select_plain_ProcessAsync;
      processMap_["sql_select_counter"] = sql_select_counter_ProcessAsync;
      processMap_["sql_select_serial"] = sql_select_serial_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update_plain"] = update_plain_ProcessAsync;
      processMap_["update_counter"] = update_counter_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["update_by_types"] = update_by_types_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp619 = new InternalStructs.sql_mng_column_args();
      await tmp619.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp620 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp619.Sql, cancellationToken);
        }
        catch (Exception tmp621)
        {
          tmp620.E = tmp621;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp620.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp622)
      {
        var tmp623 = $"Error occurred in {GetType().FullName}: {tmp622.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp622, tmp623);
        else
          Console.Error.WriteLine(tmp623);
        var tmp624 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp624.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp625 = new InternalStructs.sql_list_columns_args();
      await tmp625.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp626 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp626.Success = await _iAsync.sql_list_columns(tmp625.Sql, cancellationToken);
        }
        catch (Exception tmp627)
        {
          tmp626.E = tmp627;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp626.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp628)
      {
        var tmp629 = $"Error occurred in {GetType().FullName}: {tmp628.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp628, tmp629);
        else
          Console.Error.WriteLine(tmp629);
        var tmp630 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp630.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp631 = new InternalStructs.sql_compact_columns_args();
      await tmp631.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp632 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp632.Success = await _iAsync.sql_compact_columns(tmp631.Sql, cancellationToken);
        }
        catch (Exception tmp633)
        {
          tmp632.E = tmp633;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp632.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp634)
      {
        var tmp635 = $"Error occurred in {GetType().FullName}: {tmp634.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp634, tmp635);
        else
          Console.Error.WriteLine(tmp635);
        var tmp636 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp636.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp637 = new InternalStructs.sql_select_args();
      await tmp637.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp638 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp638.Success = await _iAsync.sql_select(tmp637.Sql, cancellationToken);
        }
        catch (Exception tmp639)
        {
          tmp638.E = tmp639;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp638.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp640)
      {
        var tmp641 = $"Error occurred in {GetType().FullName}: {tmp640.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp640, tmp641);
        else
          Console.Error.WriteLine(tmp641);
        var tmp642 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp642.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp643 = new InternalStructs.sql_select_plain_args();
      await tmp643.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp644 = new InternalStructs.sql_select_plain_result();
      try
      {
        try
        {
          tmp644.Success = await _iAsync.sql_select_plain(tmp643.Sql, cancellationToken);
        }
        catch (Exception tmp645)
        {
          tmp644.E = tmp645;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp644.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp646)
      {
        var tmp647 = $"Error occurred in {GetType().FullName}: {tmp646.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp646, tmp647);
        else
          Console.Error.WriteLine(tmp647);
        var tmp648 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp648.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp649 = new InternalStructs.sql_select_counter_args();
      await tmp649.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp650 = new InternalStructs.sql_select_counter_result();
      try
      {
        try
        {
          tmp650.Success = await _iAsync.sql_select_counter(tmp649.Sql, cancellationToken);
        }
        catch (Exception tmp651)
        {
          tmp650.E = tmp651;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp650.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp652)
      {
        var tmp653 = $"Error occurred in {GetType().FullName}: {tmp652.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp652, tmp653);
        else
          Console.Error.WriteLine(tmp653);
        var tmp654 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp654.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp655 = new InternalStructs.sql_select_serial_args();
      await tmp655.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp656 = new InternalStructs.sql_select_serial_result();
      try
      {
        try
        {
          tmp656.Success = await _iAsync.sql_select_serial(tmp655.Sql, cancellationToken);
        }
        catch (Exception tmp657)
        {
          tmp656.E = tmp657;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp656.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp658)
      {
        var tmp659 = $"Error occurred in {GetType().FullName}: {tmp658.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp658, tmp659);
        else
          Console.Error.WriteLine(tmp659);
        var tmp660 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp660.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp661 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp661.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp662 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp662.Success = await _iAsync.sql_select_rslt_on_column(tmp661.Sql, cancellationToken);
        }
        catch (Exception tmp663)
        {
          tmp662.E = tmp663;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp662.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp664)
      {
        var tmp665 = $"Error occurred in {GetType().FullName}: {tmp664.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp664, tmp665);
        else
          Console.Error.WriteLine(tmp665);
        var tmp666 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp666.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp667 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp667.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp668 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp668.Success = await _iAsync.sql_select_rslt_on_key(tmp667.Sql, cancellationToken);
        }
        catch (Exception tmp669)
        {
          tmp668.E = tmp669;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp668.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp670)
      {
        var tmp671 = $"Error occurred in {GetType().FullName}: {tmp670.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp670, tmp671);
        else
          Console.Error.WriteLine(tmp671);
        var tmp672 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp672.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp673 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp673.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp674 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp674.Success = await _iAsync.sql_select_rslt_on_fraction(tmp673.Sql, cancellationToken);
        }
        catch (Exception tmp675)
        {
          tmp674.E = tmp675;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp674.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp676)
      {
        var tmp677 = $"Error occurred in {GetType().FullName}: {tmp676.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp676, tmp677);
        else
          Console.Error.WriteLine(tmp677);
        var tmp678 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp678.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp679 = new InternalStructs.sql_query_args();
      await tmp679.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp680 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp680.Success = await _iAsync.sql_query(tmp679.Sql, tmp679.Rslt, cancellationToken);
        }
        catch (Exception tmp681)
        {
          tmp680.E = tmp681;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp680.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp682)
      {
        var tmp683 = $"Error occurred in {GetType().FullName}: {tmp682.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp682, tmp683);
        else
          Console.Error.WriteLine(tmp683);
        var tmp684 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp684.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp685 = new InternalStructs.sql_update_args();
      await tmp685.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp686 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp685.Sql, tmp685.Updater_id, cancellationToken);
        }
        catch (Exception tmp687)
        {
          tmp686.E = tmp687;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp686.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp688)
      {
        var tmp689 = $"Error occurred in {GetType().FullName}: {tmp688.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp688, tmp689);
        else
          Console.Error.WriteLine(tmp689);
        var tmp690 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp690.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp691 = new InternalStructs.exec_sql_args();
      await tmp691.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp692 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp692.Success = await _iAsync.exec_sql(tmp691.Sql, cancellationToken);
        }
        catch (Exception tmp693)
        {
          tmp692.E = tmp693;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp692.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp694)
      {
        var tmp695 = $"Error occurred in {GetType().FullName}: {tmp694.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp694, tmp695);
        else
          Console.Error.WriteLine(tmp695);
        var tmp696 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp696.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp697 = new InternalStructs.updater_create_args();
      await tmp697.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp698 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp698.Success = await _iAsync.updater_create(tmp697.Buffer_size, cancellationToken);
        }
        catch (Exception tmp699)
        {
          tmp698.E = tmp699;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp698.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp700)
      {
        var tmp701 = $"Error occurred in {GetType().FullName}: {tmp700.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp700, tmp701);
        else
          Console.Error.WriteLine(tmp701);
        var tmp702 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp702.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp703 = new InternalStructs.updater_close_args();
      await tmp703.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp704 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp703.Id, cancellationToken);
        }
        catch (Exception tmp705)
        {
          tmp704.E = tmp705;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp704.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp706)
      {
        var tmp707 = $"Error occurred in {GetType().FullName}: {tmp706.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp706, tmp707);
        else
          Console.Error.WriteLine(tmp707);
        var tmp708 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp708.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_plain_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp709 = new InternalStructs.update_plain_args();
      await tmp709.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp710 = new InternalStructs.update_plain_result();
      try
      {
        try
        {
          await _iAsync.update_plain(tmp709.Cells, tmp709.Updater_id, cancellationToken);
        }
        catch (Exception tmp711)
        {
          tmp710.E = tmp711;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Reply, seqid), cancellationToken); 
        await tmp710.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp712)
      {
        var tmp713 = $"Error occurred in {GetType().FullName}: {tmp712.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp712, tmp713);
        else
          Console.Error.WriteLine(tmp713);
        var tmp714 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_plain", TMessageType.Exception, seqid), cancellationToken);
        await tmp714.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_counter_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp715 = new InternalStructs.update_counter_args();
      await tmp715.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp716 = new InternalStructs.update_counter_result();
      try
      {
        try
        {
          await _iAsync.update_counter(tmp715.Cells, tmp715.Updater_id, cancellationToken);
        }
        catch (Exception tmp717)
        {
          tmp716.E = tmp717;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Reply, seqid), cancellationToken); 
        await tmp716.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp718)
      {
        var tmp719 = $"Error occurred in {GetType().FullName}: {tmp718.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp718, tmp719);
        else
          Console.Error.WriteLine(tmp719);
        var tmp720 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_counter", TMessageType.Exception, seqid), cancellationToken);
        await tmp720.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp721 = new InternalStructs.update_serial_args();
      await tmp721.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp722 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp721.Cells, tmp721.Updater_id, cancellationToken);
        }
        catch (Exception tmp723)
        {
          tmp722.E = tmp723;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp722.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp724)
      {
        var tmp725 = $"Error occurred in {GetType().FullName}: {tmp724.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp724, tmp725);
        else
          Console.Error.WriteLine(tmp725);
        var tmp726 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp726.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_by_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp727 = new InternalStructs.update_by_types_args();
      await tmp727.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp728 = new InternalStructs.update_by_types_result();
      try
      {
        try
        {
          await _iAsync.update_by_types(tmp727.Plain, tmp727.Counter, tmp727.Serial, tmp727.Updater_id, cancellationToken);
        }
        catch (Exception tmp729)
        {
          tmp728.E = tmp729;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Reply, seqid), cancellationToken); 
        await tmp728.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp730)
      {
        var tmp731 = $"Error occurred in {GetType().FullName}: {tmp730.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp730, tmp731);
        else
          Console.Error.WriteLine(tmp731);
        var tmp732 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Exception, seqid), cancellationToken);
        await tmp732.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp733 = new InternalStructs.mng_column_args();
      await tmp733.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp734 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp733.Func, tmp733.Schema, cancellationToken);
        }
        catch (Exception tmp735)
        {
          tmp734.E = tmp735;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp734.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp736)
      {
        var tmp737 = $"Error occurred in {GetType().FullName}: {tmp736.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp736, tmp737);
        else
          Console.Error.WriteLine(tmp737);
        var tmp738 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp738.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp739 = new InternalStructs.list_columns_args();
      await tmp739.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp740 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp740.Success = await _iAsync.list_columns(tmp739.Spec, cancellationToken);
        }
        catch (Exception tmp741)
        {
          tmp740.E = tmp741;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp740.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp742)
      {
        var tmp743 = $"Error occurred in {GetType().FullName}: {tmp742.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp742, tmp743);
        else
          Console.Error.WriteLine(tmp743);
        var tmp744 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp744.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp745 = new InternalStructs.compact_columns_args();
      await tmp745.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp746 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp746.Success = await _iAsync.compact_columns(tmp745.Spec, cancellationToken);
        }
        catch (Exception tmp747)
        {
          tmp746.E = tmp747;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp746.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp748)
      {
        var tmp749 = $"Error occurred in {GetType().FullName}: {tmp748.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp748, tmp749);
        else
          Console.Error.WriteLine(tmp749);
        var tmp750 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp750.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp751 = new InternalStructs.scan_args();
      await tmp751.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp752 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp752.Success = await _iAsync.scan(tmp751.Spec, cancellationToken);
        }
        catch (Exception tmp753)
        {
          tmp752.E = tmp753;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp752.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp754)
      {
        var tmp755 = $"Error occurred in {GetType().FullName}: {tmp754.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp754, tmp755);
        else
          Console.Error.WriteLine(tmp755);
        var tmp756 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp756.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp757 = new InternalStructs.scan_rslt_on_column_args();
      await tmp757.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp758 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp758.Success = await _iAsync.scan_rslt_on_column(tmp757.Spec, cancellationToken);
        }
        catch (Exception tmp759)
        {
          tmp758.E = tmp759;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp758.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp760)
      {
        var tmp761 = $"Error occurred in {GetType().FullName}: {tmp760.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp760, tmp761);
        else
          Console.Error.WriteLine(tmp761);
        var tmp762 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp762.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp763 = new InternalStructs.scan_rslt_on_key_args();
      await tmp763.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp764 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp764.Success = await _iAsync.scan_rslt_on_key(tmp763.Spec, cancellationToken);
        }
        catch (Exception tmp765)
        {
          tmp764.E = tmp765;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp764.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp766)
      {
        var tmp767 = $"Error occurred in {GetType().FullName}: {tmp766.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp766, tmp767);
        else
          Console.Error.WriteLine(tmp767);
        var tmp768 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp768.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp769 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp769.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp770 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp770.Success = await _iAsync.scan_rslt_on_fraction(tmp769.Spec, cancellationToken);
        }
        catch (Exception tmp771)
        {
          tmp770.E = tmp771;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp770.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp772)
      {
        var tmp773 = $"Error occurred in {GetType().FullName}: {tmp772.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp772, tmp773);
        else
          Console.Error.WriteLine(tmp773);
        var tmp774 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp774.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp775 = new InternalStructs.scan_rslt_on_args();
      await tmp775.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp776 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp776.Success = await _iAsync.scan_rslt_on(tmp775.Spec, tmp775.Rslt, cancellationToken);
        }
        catch (Exception tmp777)
        {
          tmp776.E = tmp777;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp776.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp778)
      {
        var tmp779 = $"Error occurred in {GetType().FullName}: {tmp778.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp778, tmp779);
        else
          Console.Error.WriteLine(tmp779);
        var tmp780 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp780.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp781 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp781.Sql = this.Sql;
        }
        tmp781.__isset.sql = this.__isset.sql;
        return tmp781;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp782 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp782, cancellationToken);
          var tmp783 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp783.Name = "sql";
            tmp783.Type = TType.String;
            tmp783.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp783, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp784 = new StringBuilder("sql_mng_column_args(");
        int tmp785 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp785++) { tmp784.Append(", "); }
          tmp784.Append("Sql: ");
          Sql.ToString(tmp784);
        }
        tmp784.Append(')');
        return tmp784.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp786 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp786.E = (Exception)this.E.DeepCopy();
        }
        tmp786.__isset.e = this.__isset.e;
        return tmp786;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp787 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp787, cancellationToken);
          var tmp788 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp788.Name = "E";
              tmp788.Type = TType.Struct;
              tmp788.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp788, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp789 = new StringBuilder("sql_mng_column_result(");
        int tmp790 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp790++) { tmp789.Append(", "); }
          tmp789.Append("E: ");
          E.ToString(tmp789);
        }
        tmp789.Append(')');
        return tmp789.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp791 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp791.Sql = this.Sql;
        }
        tmp791.__isset.sql = this.__isset.sql;
        return tmp791;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp792 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp792, cancellationToken);
          var tmp793 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp793.Name = "sql";
            tmp793.Type = TType.String;
            tmp793.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp793, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp794 = new StringBuilder("sql_list_columns_args(");
        int tmp795 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp795++) { tmp794.Append(", "); }
          tmp794.Append("Sql: ");
          Sql.ToString(tmp794);
        }
        tmp794.Append(')');
        return tmp794.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp796 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp796.Success = this.Success.DeepCopy();
        }
        tmp796.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp796.E = (Exception)this.E.DeepCopy();
        }
        tmp796.__isset.e = this.__isset.e;
        return tmp796;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list797 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list797.Count);
                    for(int _i798 = 0; _i798 < _list797.Count; ++_i798)
                    {
                      Schema _elem799;
                      _elem799 = new Schema();
                      await _elem799.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem799);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp800 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp800, cancellationToken);
          var tmp801 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp801.Name = "Success";
              tmp801.Type = TType.List;
              tmp801.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp801, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter802 in Success)
              {
                await _iter802.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp801.Name = "E";
              tmp801.Type = TType.Struct;
              tmp801.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp801, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp803 = new StringBuilder("sql_list_columns_result(");
        int tmp804 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp804++) { tmp803.Append(", "); }
          tmp803.Append("Success: ");
          Success.ToString(tmp803);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp804++) { tmp803.Append(", "); }
          tmp803.Append("E: ");
          E.ToString(tmp803);
        }
        tmp803.Append(')');
        return tmp803.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp805 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp805.Sql = this.Sql;
        }
        tmp805.__isset.sql = this.__isset.sql;
        return tmp805;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp806 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp806, cancellationToken);
          var tmp807 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp807.Name = "sql";
            tmp807.Type = TType.String;
            tmp807.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp807, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp808 = new StringBuilder("sql_compact_columns_args(");
        int tmp809 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp809++) { tmp808.Append(", "); }
          tmp808.Append("Sql: ");
          Sql.ToString(tmp808);
        }
        tmp808.Append(')');
        return tmp808.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp810 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp810.Success = this.Success.DeepCopy();
        }
        tmp810.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp810.E = (Exception)this.E.DeepCopy();
        }
        tmp810.__isset.e = this.__isset.e;
        return tmp810;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list811 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list811.Count);
                    for(int _i812 = 0; _i812 < _list811.Count; ++_i812)
                    {
                      CompactResult _elem813;
                      _elem813 = new CompactResult();
                      await _elem813.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem813);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp814 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp814, cancellationToken);
          var tmp815 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp815.Name = "Success";
              tmp815.Type = TType.List;
              tmp815.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp815, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter816 in Success)
              {
                await _iter816.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp815.Name = "E";
              tmp815.Type = TType.Struct;
              tmp815.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp815, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp817 = new StringBuilder("sql_compact_columns_result(");
        int tmp818 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp818++) { tmp817.Append(", "); }
          tmp817.Append("Success: ");
          Success.ToString(tmp817);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp818++) { tmp817.Append(", "); }
          tmp817.Append("E: ");
          E.ToString(tmp817);
        }
        tmp817.Append(')');
        return tmp817.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp819 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp819.Sql = this.Sql;
        }
        tmp819.__isset.sql = this.__isset.sql;
        return tmp819;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp820 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp820, cancellationToken);
          var tmp821 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp821.Name = "sql";
            tmp821.Type = TType.String;
            tmp821.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp821, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp822 = new StringBuilder("sql_select_args(");
        int tmp823 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp823++) { tmp822.Append(", "); }
          tmp822.Append("Sql: ");
          Sql.ToString(tmp822);
        }
        tmp822.Append(')');
        return tmp822.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp824 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp824.Success = (Cells)this.Success.DeepCopy();
        }
        tmp824.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp824.E = (Exception)this.E.DeepCopy();
        }
        tmp824.__isset.e = this.__isset.e;
        return tmp824;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp825 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp825, cancellationToken);
          var tmp826 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp826.Name = "Success";
              tmp826.Type = TType.Struct;
              tmp826.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp826, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp826.Name = "E";
              tmp826.Type = TType.Struct;
              tmp826.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp826, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp827 = new StringBuilder("sql_select_result(");
        int tmp828 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp828++) { tmp827.Append(", "); }
          tmp827.Append("Success: ");
          Success.ToString(tmp827);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp828++) { tmp827.Append(", "); }
          tmp827.Append("E: ");
          E.ToString(tmp827);
        }
        tmp827.Append(')');
        return tmp827.ToString();
      }
    }


    public partial class sql_select_plain_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_plain_args()
      {
      }

      public sql_select_plain_args DeepCopy()
      {
        var tmp829 = new sql_select_plain_args();
        if((Sql != null) && __isset.sql)
        {
          tmp829.Sql = this.Sql;
        }
        tmp829.__isset.sql = this.__isset.sql;
        return tmp829;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp830 = new TStruct("sql_select_plain_args");
          await oprot.WriteStructBeginAsync(tmp830, cancellationToken);
          var tmp831 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp831.Name = "sql";
            tmp831.Type = TType.String;
            tmp831.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp831, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp832 = new StringBuilder("sql_select_plain_args(");
        int tmp833 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp833++) { tmp832.Append(", "); }
          tmp832.Append("Sql: ");
          Sql.ToString(tmp832);
        }
        tmp832.Append(')');
        return tmp832.ToString();
      }
    }


    public partial class sql_select_plain_result : TBase
    {
      private List<CellPlain> _success;
      private Exception _e;

      public List<CellPlain> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_plain_result()
      {
      }

      public sql_select_plain_result DeepCopy()
      {
        var tmp834 = new sql_select_plain_result();
        if((Success != null) && __isset.success)
        {
          tmp834.Success = this.Success.DeepCopy();
        }
        tmp834.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp834.E = (Exception)this.E.DeepCopy();
        }
        tmp834.__isset.e = this.__isset.e;
        return tmp834;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list835 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellPlain>(_list835.Count);
                    for(int _i836 = 0; _i836 < _list835.Count; ++_i836)
                    {
                      CellPlain _elem837;
                      _elem837 = new CellPlain();
                      await _elem837.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem837);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp838 = new TStruct("sql_select_plain_result");
          await oprot.WriteStructBeginAsync(tmp838, cancellationToken);
          var tmp839 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp839.Name = "Success";
              tmp839.Type = TType.List;
              tmp839.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellPlain _iter840 in Success)
              {
                await _iter840.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp839.Name = "E";
              tmp839.Type = TType.Struct;
              tmp839.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp841 = new StringBuilder("sql_select_plain_result(");
        int tmp842 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("Success: ");
          Success.ToString(tmp841);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("E: ");
          E.ToString(tmp841);
        }
        tmp841.Append(')');
        return tmp841.ToString();
      }
    }


    public partial class sql_select_counter_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_counter_args()
      {
      }

      public sql_select_counter_args DeepCopy()
      {
        var tmp843 = new sql_select_counter_args();
        if((Sql != null) && __isset.sql)
        {
          tmp843.Sql = this.Sql;
        }
        tmp843.__isset.sql = this.__isset.sql;
        return tmp843;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp844 = new TStruct("sql_select_counter_args");
          await oprot.WriteStructBeginAsync(tmp844, cancellationToken);
          var tmp845 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp845.Name = "sql";
            tmp845.Type = TType.String;
            tmp845.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp845, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp846 = new StringBuilder("sql_select_counter_args(");
        int tmp847 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp847++) { tmp846.Append(", "); }
          tmp846.Append("Sql: ");
          Sql.ToString(tmp846);
        }
        tmp846.Append(')');
        return tmp846.ToString();
      }
    }


    public partial class sql_select_counter_result : TBase
    {
      private List<CellCounter> _success;
      private Exception _e;

      public List<CellCounter> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_counter_result()
      {
      }

      public sql_select_counter_result DeepCopy()
      {
        var tmp848 = new sql_select_counter_result();
        if((Success != null) && __isset.success)
        {
          tmp848.Success = this.Success.DeepCopy();
        }
        tmp848.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp848.E = (Exception)this.E.DeepCopy();
        }
        tmp848.__isset.e = this.__isset.e;
        return tmp848;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list849 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellCounter>(_list849.Count);
                    for(int _i850 = 0; _i850 < _list849.Count; ++_i850)
                    {
                      CellCounter _elem851;
                      _elem851 = new CellCounter();
                      await _elem851.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem851);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp852 = new TStruct("sql_select_counter_result");
          await oprot.WriteStructBeginAsync(tmp852, cancellationToken);
          var tmp853 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp853.Name = "Success";
              tmp853.Type = TType.List;
              tmp853.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellCounter _iter854 in Success)
              {
                await _iter854.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp853.Name = "E";
              tmp853.Type = TType.Struct;
              tmp853.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp855 = new StringBuilder("sql_select_counter_result(");
        int tmp856 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp856++) { tmp855.Append(", "); }
          tmp855.Append("Success: ");
          Success.ToString(tmp855);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp856++) { tmp855.Append(", "); }
          tmp855.Append("E: ");
          E.ToString(tmp855);
        }
        tmp855.Append(')');
        return tmp855.ToString();
      }
    }


    public partial class sql_select_serial_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_serial_args()
      {
      }

      public sql_select_serial_args DeepCopy()
      {
        var tmp857 = new sql_select_serial_args();
        if((Sql != null) && __isset.sql)
        {
          tmp857.Sql = this.Sql;
        }
        tmp857.__isset.sql = this.__isset.sql;
        return tmp857;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp858 = new TStruct("sql_select_serial_args");
          await oprot.WriteStructBeginAsync(tmp858, cancellationToken);
          var tmp859 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp859.Name = "sql";
            tmp859.Type = TType.String;
            tmp859.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp859, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp860 = new StringBuilder("sql_select_serial_args(");
        int tmp861 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp861++) { tmp860.Append(", "); }
          tmp860.Append("Sql: ");
          Sql.ToString(tmp860);
        }
        tmp860.Append(')');
        return tmp860.ToString();
      }
    }


    public partial class sql_select_serial_result : TBase
    {
      private List<CellSerial> _success;
      private Exception _e;

      public List<CellSerial> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_serial_result()
      {
      }

      public sql_select_serial_result DeepCopy()
      {
        var tmp862 = new sql_select_serial_result();
        if((Success != null) && __isset.success)
        {
          tmp862.Success = this.Success.DeepCopy();
        }
        tmp862.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp862.E = (Exception)this.E.DeepCopy();
        }
        tmp862.__isset.e = this.__isset.e;
        return tmp862;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list863 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CellSerial>(_list863.Count);
                    for(int _i864 = 0; _i864 < _list863.Count; ++_i864)
                    {
                      CellSerial _elem865;
                      _elem865 = new CellSerial();
                      await _elem865.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem865);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp866 = new TStruct("sql_select_serial_result");
          await oprot.WriteStructBeginAsync(tmp866, cancellationToken);
          var tmp867 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp867.Name = "Success";
              tmp867.Type = TType.List;
              tmp867.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp867, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CellSerial _iter868 in Success)
              {
                await _iter868.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp867.Name = "E";
              tmp867.Type = TType.Struct;
              tmp867.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp867, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp869 = new StringBuilder("sql_select_serial_result(");
        int tmp870 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp870++) { tmp869.Append(", "); }
          tmp869.Append("Success: ");
          Success.ToString(tmp869);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp870++) { tmp869.Append(", "); }
          tmp869.Append("E: ");
          E.ToString(tmp869);
        }
        tmp869.Append(')');
        return tmp869.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp871 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp871.Sql = this.Sql;
        }
        tmp871.__isset.sql = this.__isset.sql;
        return tmp871;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp872 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp872, cancellationToken);
          var tmp873 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp873.Name = "sql";
            tmp873.Type = TType.String;
            tmp873.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp873, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp874 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp875 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp875++) { tmp874.Append(", "); }
          tmp874.Append("Sql: ");
          Sql.ToString(tmp874);
        }
        tmp874.Append(')');
        return tmp874.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp876 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp876.Success = this.Success.DeepCopy();
        }
        tmp876.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp876.E = (Exception)this.E.DeepCopy();
        }
        tmp876.__isset.e = this.__isset.e;
        return tmp876;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map877 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map877.Count);
                    for(int _i878 = 0; _i878 < _map877.Count; ++_i878)
                    {
                      string _key879;
                      ColCells _val880;
                      _key879 = await iprot.ReadStringAsync(cancellationToken);
                      _val880 = new ColCells();
                      await _val880.ReadAsync(iprot, cancellationToken);
                      Success[_key879] = _val880;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp881 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp881, cancellationToken);
          var tmp882 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp882.Name = "Success";
              tmp882.Type = TType.Map;
              tmp882.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp882, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter883 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter883, cancellationToken);
                await Success[_iter883].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp882.Name = "E";
              tmp882.Type = TType.Struct;
              tmp882.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp882, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp884 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp885 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp885++) { tmp884.Append(", "); }
          tmp884.Append("Success: ");
          Success.ToString(tmp884);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp885++) { tmp884.Append(", "); }
          tmp884.Append("E: ");
          E.ToString(tmp884);
        }
        tmp884.Append(')');
        return tmp884.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp886 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp886.Sql = this.Sql;
        }
        tmp886.__isset.sql = this.__isset.sql;
        return tmp886;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp887 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp887, cancellationToken);
          var tmp888 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp888.Name = "sql";
            tmp888.Type = TType.String;
            tmp888.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp888, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp889 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp890 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp890++) { tmp889.Append(", "); }
          tmp889.Append("Sql: ");
          Sql.ToString(tmp889);
        }
        tmp889.Append(')');
        return tmp889.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp891 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp891.Success = this.Success.DeepCopy();
        }
        tmp891.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp891.E = (Exception)this.E.DeepCopy();
        }
        tmp891.__isset.e = this.__isset.e;
        return tmp891;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list892 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list892.Count);
                    for(int _i893 = 0; _i893 < _list892.Count; ++_i893)
                    {
                      kCells _elem894;
                      _elem894 = new kCells();
                      await _elem894.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem894);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp895 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp895, cancellationToken);
          var tmp896 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp896.Name = "Success";
              tmp896.Type = TType.List;
              tmp896.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp896, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter897 in Success)
              {
                await _iter897.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp896.Name = "E";
              tmp896.Type = TType.Struct;
              tmp896.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp896, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp898 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp899 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp899++) { tmp898.Append(", "); }
          tmp898.Append("Success: ");
          Success.ToString(tmp898);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp899++) { tmp898.Append(", "); }
          tmp898.Append("E: ");
          E.ToString(tmp898);
        }
        tmp898.Append(')');
        return tmp898.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp900 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp900.Sql = this.Sql;
        }
        tmp900.__isset.sql = this.__isset.sql;
        return tmp900;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp901 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp901, cancellationToken);
          var tmp902 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp902.Name = "sql";
            tmp902.Type = TType.String;
            tmp902.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp902, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp903 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp904 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp904++) { tmp903.Append(", "); }
          tmp903.Append("Sql: ");
          Sql.ToString(tmp903);
        }
        tmp903.Append(')');
        return tmp903.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp905 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp905.Success = (FCells)this.Success.DeepCopy();
        }
        tmp905.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp905.E = (Exception)this.E.DeepCopy();
        }
        tmp905.__isset.e = this.__isset.e;
        return tmp905;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp906 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp906, cancellationToken);
          var tmp907 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp907.Name = "Success";
              tmp907.Type = TType.Struct;
              tmp907.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp907, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp907.Name = "E";
              tmp907.Type = TType.Struct;
              tmp907.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp907, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp908 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp909 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp909++) { tmp908.Append(", "); }
          tmp908.Append("Success: ");
          Success.ToString(tmp908);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp909++) { tmp908.Append(", "); }
          tmp908.Append("E: ");
          E.ToString(tmp908);
        }
        tmp908.Append(')');
        return tmp908.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp910 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp910.Sql = this.Sql;
        }
        tmp910.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp910.Rslt = this.Rslt;
        }
        tmp910.__isset.rslt = this.__isset.rslt;
        return tmp910;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp911 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp911, cancellationToken);
          var tmp912 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp912.Name = "sql";
            tmp912.Type = TType.String;
            tmp912.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp912, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp912.Name = "rslt";
            tmp912.Type = TType.I32;
            tmp912.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp912, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp913 = new StringBuilder("sql_query_args(");
        int tmp914 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp914++) { tmp913.Append(", "); }
          tmp913.Append("Sql: ");
          Sql.ToString(tmp913);
        }
        if(__isset.rslt)
        {
          if(0 < tmp914++) { tmp913.Append(", "); }
          tmp913.Append("Rslt: ");
          Rslt.ToString(tmp913);
        }
        tmp913.Append(')');
        return tmp913.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp915 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp915.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp915.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp915.E = (Exception)this.E.DeepCopy();
        }
        tmp915.__isset.e = this.__isset.e;
        return tmp915;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp916 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp916, cancellationToken);
          var tmp917 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp917.Name = "Success";
              tmp917.Type = TType.Struct;
              tmp917.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp917, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp917.Name = "E";
              tmp917.Type = TType.Struct;
              tmp917.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp917, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp918 = new StringBuilder("sql_query_result(");
        int tmp919 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp919++) { tmp918.Append(", "); }
          tmp918.Append("Success: ");
          Success.ToString(tmp918);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp919++) { tmp918.Append(", "); }
          tmp918.Append("E: ");
          E.ToString(tmp918);
        }
        tmp918.Append(')');
        return tmp918.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp920 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp920.Sql = this.Sql;
        }
        tmp920.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp920.Updater_id = this.Updater_id;
        }
        tmp920.__isset.updater_id = this.__isset.updater_id;
        return tmp920;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp921 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp921, cancellationToken);
          var tmp922 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp922.Name = "sql";
            tmp922.Type = TType.String;
            tmp922.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp922.Name = "updater_id";
            tmp922.Type = TType.I64;
            tmp922.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp922, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp923 = new StringBuilder("sql_update_args(");
        int tmp924 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp924++) { tmp923.Append(", "); }
          tmp923.Append("Sql: ");
          Sql.ToString(tmp923);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp924++) { tmp923.Append(", "); }
          tmp923.Append("Updater_id: ");
          Updater_id.ToString(tmp923);
        }
        tmp923.Append(')');
        return tmp923.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp925 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp925.E = (Exception)this.E.DeepCopy();
        }
        tmp925.__isset.e = this.__isset.e;
        return tmp925;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp926 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp926, cancellationToken);
          var tmp927 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp927.Name = "E";
              tmp927.Type = TType.Struct;
              tmp927.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp927, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp928 = new StringBuilder("sql_update_result(");
        int tmp929 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp929++) { tmp928.Append(", "); }
          tmp928.Append("E: ");
          E.ToString(tmp928);
        }
        tmp928.Append(')');
        return tmp928.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp930 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp930.Sql = this.Sql;
        }
        tmp930.__isset.sql = this.__isset.sql;
        return tmp930;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp931 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp931, cancellationToken);
          var tmp932 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp932.Name = "sql";
            tmp932.Type = TType.String;
            tmp932.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp932, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp933 = new StringBuilder("exec_sql_args(");
        int tmp934 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp934++) { tmp933.Append(", "); }
          tmp933.Append("Sql: ");
          Sql.ToString(tmp933);
        }
        tmp933.Append(')');
        return tmp933.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp935 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp935.Success = (Result)this.Success.DeepCopy();
        }
        tmp935.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp935.E = (Exception)this.E.DeepCopy();
        }
        tmp935.__isset.e = this.__isset.e;
        return tmp935;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp936 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp936, cancellationToken);
          var tmp937 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp937.Name = "Success";
              tmp937.Type = TType.Struct;
              tmp937.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp937, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp937.Name = "E";
              tmp937.Type = TType.Struct;
              tmp937.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp937, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp938 = new StringBuilder("exec_sql_result(");
        int tmp939 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp939++) { tmp938.Append(", "); }
          tmp938.Append("Success: ");
          Success.ToString(tmp938);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp939++) { tmp938.Append(", "); }
          tmp938.Append("E: ");
          E.ToString(tmp938);
        }
        tmp938.Append(')');
        return tmp938.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp940 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp940.Buffer_size = this.Buffer_size;
        }
        tmp940.__isset.buffer_size = this.__isset.buffer_size;
        return tmp940;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp941 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp941, cancellationToken);
          var tmp942 = new TField();
          if(__isset.buffer_size)
          {
            tmp942.Name = "buffer_size";
            tmp942.Type = TType.I32;
            tmp942.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp942, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp943 = new StringBuilder("updater_create_args(");
        int tmp944 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp944++) { tmp943.Append(", "); }
          tmp943.Append("Buffer_size: ");
          Buffer_size.ToString(tmp943);
        }
        tmp943.Append(')');
        return tmp943.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp945 = new updater_create_result();
        if(__isset.success)
        {
          tmp945.Success = this.Success;
        }
        tmp945.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp945.E = (Exception)this.E.DeepCopy();
        }
        tmp945.__isset.e = this.__isset.e;
        return tmp945;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp946 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp946, cancellationToken);
          var tmp947 = new TField();

          if(this.__isset.success)
          {
            tmp947.Name = "Success";
            tmp947.Type = TType.I64;
            tmp947.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp947.Name = "E";
              tmp947.Type = TType.Struct;
              tmp947.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp947, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp948 = new StringBuilder("updater_create_result(");
        int tmp949 = 0;
        if(__isset.success)
        {
          if(0 < tmp949++) { tmp948.Append(", "); }
          tmp948.Append("Success: ");
          Success.ToString(tmp948);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp949++) { tmp948.Append(", "); }
          tmp948.Append("E: ");
          E.ToString(tmp948);
        }
        tmp948.Append(')');
        return tmp948.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp950 = new updater_close_args();
        if(__isset.id)
        {
          tmp950.Id = this.Id;
        }
        tmp950.__isset.id = this.__isset.id;
        return tmp950;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp951 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp951, cancellationToken);
          var tmp952 = new TField();
          if(__isset.id)
          {
            tmp952.Name = "id";
            tmp952.Type = TType.I64;
            tmp952.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp952, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp953 = new StringBuilder("updater_close_args(");
        int tmp954 = 0;
        if(__isset.id)
        {
          if(0 < tmp954++) { tmp953.Append(", "); }
          tmp953.Append("Id: ");
          Id.ToString(tmp953);
        }
        tmp953.Append(')');
        return tmp953.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp955 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp955.E = (Exception)this.E.DeepCopy();
        }
        tmp955.__isset.e = this.__isset.e;
        return tmp955;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp956 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp956, cancellationToken);
          var tmp957 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp957.Name = "E";
              tmp957.Type = TType.Struct;
              tmp957.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp957, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp958 = new StringBuilder("updater_close_result(");
        int tmp959 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp959++) { tmp958.Append(", "); }
          tmp958.Append("E: ");
          E.ToString(tmp958);
        }
        tmp958.Append(')');
        return tmp958.ToString();
      }
    }


    public partial class update_plain_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_plain_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_plain_args DeepCopy()
      {
        var tmp960 = new update_plain_args();
        if((Cells != null) && __isset.cells)
        {
          tmp960.Cells = this.Cells.DeepCopy();
        }
        tmp960.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp960.Updater_id = this.Updater_id;
        }
        tmp960.__isset.updater_id = this.__isset.updater_id;
        return tmp960;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map961 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellPlain>>(_map961.Count);
                    for(int _i962 = 0; _i962 < _map961.Count; ++_i962)
                    {
                      long _key963;
                      List<UCellPlain> _val964;
                      _key963 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list965 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val964 = new List<UCellPlain>(_list965.Count);
                        for(int _i966 = 0; _i966 < _list965.Count; ++_i966)
                        {
                          UCellPlain _elem967;
                          _elem967 = new UCellPlain();
                          await _elem967.ReadAsync(iprot, cancellationToken);
                          _val964.Add(_elem967);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key963] = _val964;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp968 = new TStruct("update_plain_args");
          await oprot.WriteStructBeginAsync(tmp968, cancellationToken);
          var tmp969 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp969.Name = "cells";
            tmp969.Type = TType.Map;
            tmp969.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp969, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter970 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter970, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter970].Count), cancellationToken);
              foreach (UCellPlain _iter971 in Cells[_iter970])
              {
                await _iter971.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp969.Name = "updater_id";
            tmp969.Type = TType.I64;
            tmp969.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp969, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp972 = new StringBuilder("update_plain_args(");
        int tmp973 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp973++) { tmp972.Append(", "); }
          tmp972.Append("Cells: ");
          Cells.ToString(tmp972);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp973++) { tmp972.Append(", "); }
          tmp972.Append("Updater_id: ");
          Updater_id.ToString(tmp972);
        }
        tmp972.Append(')');
        return tmp972.ToString();
      }
    }


    public partial class update_plain_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_plain_result()
      {
      }

      public update_plain_result DeepCopy()
      {
        var tmp974 = new update_plain_result();
        if((E != null) && __isset.e)
        {
          tmp974.E = (Exception)this.E.DeepCopy();
        }
        tmp974.__isset.e = this.__isset.e;
        return tmp974;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp975 = new TStruct("update_plain_result");
          await oprot.WriteStructBeginAsync(tmp975, cancellationToken);
          var tmp976 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp976.Name = "E";
              tmp976.Type = TType.Struct;
              tmp976.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp976, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_plain_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp977 = new StringBuilder("update_plain_result(");
        int tmp978 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp978++) { tmp977.Append(", "); }
          tmp977.Append("E: ");
          E.ToString(tmp977);
        }
        tmp977.Append(')');
        return tmp977.ToString();
      }
    }


    public partial class update_counter_args : TBase
    {
      private Dictionary<long, List<UCellCounter>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Counter Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_counter_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_counter_args DeepCopy()
      {
        var tmp979 = new update_counter_args();
        if((Cells != null) && __isset.cells)
        {
          tmp979.Cells = this.Cells.DeepCopy();
        }
        tmp979.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp979.Updater_id = this.Updater_id;
        }
        tmp979.__isset.updater_id = this.__isset.updater_id;
        return tmp979;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map980 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellCounter>>(_map980.Count);
                    for(int _i981 = 0; _i981 < _map980.Count; ++_i981)
                    {
                      long _key982;
                      List<UCellCounter> _val983;
                      _key982 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list984 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val983 = new List<UCellCounter>(_list984.Count);
                        for(int _i985 = 0; _i985 < _list984.Count; ++_i985)
                        {
                          UCellCounter _elem986;
                          _elem986 = new UCellCounter();
                          await _elem986.ReadAsync(iprot, cancellationToken);
                          _val983.Add(_elem986);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key982] = _val983;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp987 = new TStruct("update_counter_args");
          await oprot.WriteStructBeginAsync(tmp987, cancellationToken);
          var tmp988 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp988.Name = "cells";
            tmp988.Type = TType.Map;
            tmp988.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp988, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter989 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter989, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter989].Count), cancellationToken);
              foreach (UCellCounter _iter990 in Cells[_iter989])
              {
                await _iter990.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp988.Name = "updater_id";
            tmp988.Type = TType.I64;
            tmp988.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp988, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp991 = new StringBuilder("update_counter_args(");
        int tmp992 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp992++) { tmp991.Append(", "); }
          tmp991.Append("Cells: ");
          Cells.ToString(tmp991);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp992++) { tmp991.Append(", "); }
          tmp991.Append("Updater_id: ");
          Updater_id.ToString(tmp991);
        }
        tmp991.Append(')');
        return tmp991.ToString();
      }
    }


    public partial class update_counter_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_counter_result()
      {
      }

      public update_counter_result DeepCopy()
      {
        var tmp993 = new update_counter_result();
        if((E != null) && __isset.e)
        {
          tmp993.E = (Exception)this.E.DeepCopy();
        }
        tmp993.__isset.e = this.__isset.e;
        return tmp993;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp994 = new TStruct("update_counter_result");
          await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
          var tmp995 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp995.Name = "E";
              tmp995.Type = TType.Struct;
              tmp995.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_counter_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp996 = new StringBuilder("update_counter_result(");
        int tmp997 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp997++) { tmp996.Append(", "); }
          tmp996.Append("E: ");
          E.ToString(tmp996);
        }
        tmp996.Append(')');
        return tmp996.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp998 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp998.Cells = this.Cells.DeepCopy();
        }
        tmp998.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp998.Updater_id = this.Updater_id;
        }
        tmp998.__isset.updater_id = this.__isset.updater_id;
        return tmp998;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map999 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map999.Count);
                    for(int _i1000 = 0; _i1000 < _map999.Count; ++_i1000)
                    {
                      long _key1001;
                      List<UCellSerial> _val1002;
                      _key1001 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1003 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1002 = new List<UCellSerial>(_list1003.Count);
                        for(int _i1004 = 0; _i1004 < _list1003.Count; ++_i1004)
                        {
                          UCellSerial _elem1005;
                          _elem1005 = new UCellSerial();
                          await _elem1005.ReadAsync(iprot, cancellationToken);
                          _val1002.Add(_elem1005);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key1001] = _val1002;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1006 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp1006, cancellationToken);
          var tmp1007 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp1007.Name = "cells";
            tmp1007.Type = TType.Map;
            tmp1007.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter1008 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter1008, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter1008].Count), cancellationToken);
              foreach (UCellSerial _iter1009 in Cells[_iter1008])
              {
                await _iter1009.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1007.Name = "updater_id";
            tmp1007.Type = TType.I64;
            tmp1007.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1007, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1010 = new StringBuilder("update_serial_args(");
        int tmp1011 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp1011++) { tmp1010.Append(", "); }
          tmp1010.Append("Cells: ");
          Cells.ToString(tmp1010);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1011++) { tmp1010.Append(", "); }
          tmp1010.Append("Updater_id: ");
          Updater_id.ToString(tmp1010);
        }
        tmp1010.Append(')');
        return tmp1010.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp1012 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp1012.E = (Exception)this.E.DeepCopy();
        }
        tmp1012.__isset.e = this.__isset.e;
        return tmp1012;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1013 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp1013, cancellationToken);
          var tmp1014 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1014.Name = "E";
              tmp1014.Type = TType.Struct;
              tmp1014.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1014, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1015 = new StringBuilder("update_serial_result(");
        int tmp1016 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1016++) { tmp1015.Append(", "); }
          tmp1015.Append("E: ");
          E.ToString(tmp1015);
        }
        tmp1015.Append(')');
        return tmp1015.ToString();
      }
    }


    public partial class update_by_types_args : TBase
    {
      private Dictionary<long, List<UCellPlain>> _plain;
      private Dictionary<long, List<UCellCounter>> _counter;
      private Dictionary<long, List<UCellSerial>> _serial;
      private long _updater_id;

      /// <summary>
      /// The PLAIN Cells to update
      /// </summary>
      public Dictionary<long, List<UCellPlain>> Plain
      {
        get
        {
          return _plain;
        }
        set
        {
          __isset.plain = true;
          this._plain = value;
        }
      }

      /// <summary>
      /// The COUNTER Cells to update
      /// </summary>
      public Dictionary<long, List<UCellCounter>> Counter
      {
        get
        {
          return _counter;
        }
        set
        {
          __isset.counter = true;
          this._counter = value;
        }
      }

      /// <summary>
      /// The SERIAL Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Serial
      {
        get
        {
          return _serial;
        }
        set
        {
          __isset.serial = true;
          this._serial = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool plain;
        public bool counter;
        public bool serial;
        public bool updater_id;
      }

      public update_by_types_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_by_types_args DeepCopy()
      {
        var tmp1017 = new update_by_types_args();
        if((Plain != null) && __isset.plain)
        {
          tmp1017.Plain = this.Plain.DeepCopy();
        }
        tmp1017.__isset.plain = this.__isset.plain;
        if((Counter != null) && __isset.counter)
        {
          tmp1017.Counter = this.Counter.DeepCopy();
        }
        tmp1017.__isset.counter = this.__isset.counter;
        if((Serial != null) && __isset.serial)
        {
          tmp1017.Serial = this.Serial.DeepCopy();
        }
        tmp1017.__isset.serial = this.__isset.serial;
        if(__isset.updater_id)
        {
          tmp1017.Updater_id = this.Updater_id;
        }
        tmp1017.__isset.updater_id = this.__isset.updater_id;
        return tmp1017;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1018 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Plain = new Dictionary<long, List<UCellPlain>>(_map1018.Count);
                    for(int _i1019 = 0; _i1019 < _map1018.Count; ++_i1019)
                    {
                      long _key1020;
                      List<UCellPlain> _val1021;
                      _key1020 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1022 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1021 = new List<UCellPlain>(_list1022.Count);
                        for(int _i1023 = 0; _i1023 < _list1022.Count; ++_i1023)
                        {
                          UCellPlain _elem1024;
                          _elem1024 = new UCellPlain();
                          await _elem1024.ReadAsync(iprot, cancellationToken);
                          _val1021.Add(_elem1024);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Plain[_key1020] = _val1021;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1025 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Counter = new Dictionary<long, List<UCellCounter>>(_map1025.Count);
                    for(int _i1026 = 0; _i1026 < _map1025.Count; ++_i1026)
                    {
                      long _key1027;
                      List<UCellCounter> _val1028;
                      _key1027 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1029 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1028 = new List<UCellCounter>(_list1029.Count);
                        for(int _i1030 = 0; _i1030 < _list1029.Count; ++_i1030)
                        {
                          UCellCounter _elem1031;
                          _elem1031 = new UCellCounter();
                          await _elem1031.ReadAsync(iprot, cancellationToken);
                          _val1028.Add(_elem1031);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Counter[_key1027] = _val1028;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1032 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Serial = new Dictionary<long, List<UCellSerial>>(_map1032.Count);
                    for(int _i1033 = 0; _i1033 < _map1032.Count; ++_i1033)
                    {
                      long _key1034;
                      List<UCellSerial> _val1035;
                      _key1034 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list1036 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val1035 = new List<UCellSerial>(_list1036.Count);
                        for(int _i1037 = 0; _i1037 < _list1036.Count; ++_i1037)
                        {
                          UCellSerial _elem1038;
                          _elem1038 = new UCellSerial();
                          await _elem1038.ReadAsync(iprot, cancellationToken);
                          _val1035.Add(_elem1038);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Serial[_key1034] = _val1035;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1039 = new TStruct("update_by_types_args");
          await oprot.WriteStructBeginAsync(tmp1039, cancellationToken);
          var tmp1040 = new TField();
          if((Plain != null) && __isset.plain)
          {
            tmp1040.Name = "plain";
            tmp1040.Type = TType.Map;
            tmp1040.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Plain.Count), cancellationToken);
            foreach (long _iter1041 in Plain.Keys)
            {
              await oprot.WriteI64Async(_iter1041, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain[_iter1041].Count), cancellationToken);
              foreach (UCellPlain _iter1042 in Plain[_iter1041])
              {
                await _iter1042.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Counter != null) && __isset.counter)
          {
            tmp1040.Name = "counter";
            tmp1040.Type = TType.Map;
            tmp1040.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Counter.Count), cancellationToken);
            foreach (long _iter1043 in Counter.Keys)
            {
              await oprot.WriteI64Async(_iter1043, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Counter[_iter1043].Count), cancellationToken);
              foreach (UCellCounter _iter1044 in Counter[_iter1043])
              {
                await _iter1044.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Serial != null) && __isset.serial)
          {
            tmp1040.Name = "serial";
            tmp1040.Type = TType.Map;
            tmp1040.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Serial.Count), cancellationToken);
            foreach (long _iter1045 in Serial.Keys)
            {
              await oprot.WriteI64Async(_iter1045, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial[_iter1045].Count), cancellationToken);
              foreach (UCellSerial _iter1046 in Serial[_iter1045])
              {
                await _iter1046.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp1040.Name = "updater_id";
            tmp1040.Type = TType.I64;
            tmp1040.ID = 4;
            await oprot.WriteFieldBeginAsync(tmp1040, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.plain == other.__isset.plain) && ((!__isset.plain) || (global::System.Object.Equals(Plain, other.Plain))))
          && ((__isset.counter == other.__isset.counter) && ((!__isset.counter) || (global::System.Object.Equals(Counter, other.Counter))))
          && ((__isset.serial == other.__isset.serial) && ((!__isset.serial) || (global::System.Object.Equals(Serial, other.Serial))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Plain != null) && __isset.plain)
          {
            hashcode = (hashcode * 397) + Plain.GetHashCode();
          }
          if((Counter != null) && __isset.counter)
          {
            hashcode = (hashcode * 397) + Counter.GetHashCode();
          }
          if((Serial != null) && __isset.serial)
          {
            hashcode = (hashcode * 397) + Serial.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1047 = new StringBuilder("update_by_types_args(");
        int tmp1048 = 0;
        if((Plain != null) && __isset.plain)
        {
          if(0 < tmp1048++) { tmp1047.Append(", "); }
          tmp1047.Append("Plain: ");
          Plain.ToString(tmp1047);
        }
        if((Counter != null) && __isset.counter)
        {
          if(0 < tmp1048++) { tmp1047.Append(", "); }
          tmp1047.Append("Counter: ");
          Counter.ToString(tmp1047);
        }
        if((Serial != null) && __isset.serial)
        {
          if(0 < tmp1048++) { tmp1047.Append(", "); }
          tmp1047.Append("Serial: ");
          Serial.ToString(tmp1047);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp1048++) { tmp1047.Append(", "); }
          tmp1047.Append("Updater_id: ");
          Updater_id.ToString(tmp1047);
        }
        tmp1047.Append(')');
        return tmp1047.ToString();
      }
    }


    public partial class update_by_types_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_by_types_result()
      {
      }

      public update_by_types_result DeepCopy()
      {
        var tmp1049 = new update_by_types_result();
        if((E != null) && __isset.e)
        {
          tmp1049.E = (Exception)this.E.DeepCopy();
        }
        tmp1049.__isset.e = this.__isset.e;
        return tmp1049;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1050 = new TStruct("update_by_types_result");
          await oprot.WriteStructBeginAsync(tmp1050, cancellationToken);
          var tmp1051 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1051.Name = "E";
              tmp1051.Type = TType.Struct;
              tmp1051.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1051, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1052 = new StringBuilder("update_by_types_result(");
        int tmp1053 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1053++) { tmp1052.Append(", "); }
          tmp1052.Append("E: ");
          E.ToString(tmp1052);
        }
        tmp1052.Append(')');
        return tmp1052.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp1054 = new mng_column_args();
        if(__isset.func)
        {
          tmp1054.Func = this.Func;
        }
        tmp1054.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp1054.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp1054.__isset.schema = this.__isset.schema;
        return tmp1054;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1055 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp1055, cancellationToken);
          var tmp1056 = new TField();
          if(__isset.func)
          {
            tmp1056.Name = "func";
            tmp1056.Type = TType.I32;
            tmp1056.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1056, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp1056.Name = "schema";
            tmp1056.Type = TType.Struct;
            tmp1056.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1056, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1057 = new StringBuilder("mng_column_args(");
        int tmp1058 = 0;
        if(__isset.func)
        {
          if(0 < tmp1058++) { tmp1057.Append(", "); }
          tmp1057.Append("Func: ");
          Func.ToString(tmp1057);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp1058++) { tmp1057.Append(", "); }
          tmp1057.Append("Schema: ");
          Schema.ToString(tmp1057);
        }
        tmp1057.Append(')');
        return tmp1057.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp1059 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp1059.E = (Exception)this.E.DeepCopy();
        }
        tmp1059.__isset.e = this.__isset.e;
        return tmp1059;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1060 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp1060, cancellationToken);
          var tmp1061 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1061.Name = "E";
              tmp1061.Type = TType.Struct;
              tmp1061.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1061, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1062 = new StringBuilder("mng_column_result(");
        int tmp1063 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp1063++) { tmp1062.Append(", "); }
          tmp1062.Append("E: ");
          E.ToString(tmp1062);
        }
        tmp1062.Append(')');
        return tmp1062.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp1064 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1064.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1064.__isset.spec = this.__isset.spec;
        return tmp1064;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1065 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp1065, cancellationToken);
          var tmp1066 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1066.Name = "spec";
            tmp1066.Type = TType.Struct;
            tmp1066.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1066, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1067 = new StringBuilder("list_columns_args(");
        int tmp1068 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1068++) { tmp1067.Append(", "); }
          tmp1067.Append("Spec: ");
          Spec.ToString(tmp1067);
        }
        tmp1067.Append(')');
        return tmp1067.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp1069 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1069.Success = this.Success.DeepCopy();
        }
        tmp1069.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1069.E = (Exception)this.E.DeepCopy();
        }
        tmp1069.__isset.e = this.__isset.e;
        return tmp1069;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1070 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list1070.Count);
                    for(int _i1071 = 0; _i1071 < _list1070.Count; ++_i1071)
                    {
                      Schema _elem1072;
                      _elem1072 = new Schema();
                      await _elem1072.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1072);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1073 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp1073, cancellationToken);
          var tmp1074 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1074.Name = "Success";
              tmp1074.Type = TType.List;
              tmp1074.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1074, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter1075 in Success)
              {
                await _iter1075.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1074.Name = "E";
              tmp1074.Type = TType.Struct;
              tmp1074.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1074, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1076 = new StringBuilder("list_columns_result(");
        int tmp1077 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1077++) { tmp1076.Append(", "); }
          tmp1076.Append("Success: ");
          Success.ToString(tmp1076);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1077++) { tmp1076.Append(", "); }
          tmp1076.Append("E: ");
          E.ToString(tmp1076);
        }
        tmp1076.Append(')');
        return tmp1076.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp1078 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1078.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp1078.__isset.spec = this.__isset.spec;
        return tmp1078;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1079 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp1079, cancellationToken);
          var tmp1080 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1080.Name = "spec";
            tmp1080.Type = TType.Struct;
            tmp1080.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1080, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1081 = new StringBuilder("compact_columns_args(");
        int tmp1082 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1082++) { tmp1081.Append(", "); }
          tmp1081.Append("Spec: ");
          Spec.ToString(tmp1081);
        }
        tmp1081.Append(')');
        return tmp1081.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp1083 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp1083.Success = this.Success.DeepCopy();
        }
        tmp1083.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1083.E = (Exception)this.E.DeepCopy();
        }
        tmp1083.__isset.e = this.__isset.e;
        return tmp1083;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1084 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list1084.Count);
                    for(int _i1085 = 0; _i1085 < _list1084.Count; ++_i1085)
                    {
                      CompactResult _elem1086;
                      _elem1086 = new CompactResult();
                      await _elem1086.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1086);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1087 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp1087, cancellationToken);
          var tmp1088 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1088.Name = "Success";
              tmp1088.Type = TType.List;
              tmp1088.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter1089 in Success)
              {
                await _iter1089.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1088.Name = "E";
              tmp1088.Type = TType.Struct;
              tmp1088.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1088, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1090 = new StringBuilder("compact_columns_result(");
        int tmp1091 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1091++) { tmp1090.Append(", "); }
          tmp1090.Append("Success: ");
          Success.ToString(tmp1090);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1091++) { tmp1090.Append(", "); }
          tmp1090.Append("E: ");
          E.ToString(tmp1090);
        }
        tmp1090.Append(')');
        return tmp1090.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp1092 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1092.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1092.__isset.spec = this.__isset.spec;
        return tmp1092;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1093 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp1093, cancellationToken);
          var tmp1094 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1094.Name = "spec";
            tmp1094.Type = TType.Struct;
            tmp1094.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1094, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1095 = new StringBuilder("scan_args(");
        int tmp1096 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1096++) { tmp1095.Append(", "); }
          tmp1095.Append("Spec: ");
          Spec.ToString(tmp1095);
        }
        tmp1095.Append(')');
        return tmp1095.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp1097 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp1097.Success = (Cells)this.Success.DeepCopy();
        }
        tmp1097.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1097.E = (Exception)this.E.DeepCopy();
        }
        tmp1097.__isset.e = this.__isset.e;
        return tmp1097;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1098 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp1098, cancellationToken);
          var tmp1099 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1099.Name = "Success";
              tmp1099.Type = TType.Struct;
              tmp1099.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1099, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1099.Name = "E";
              tmp1099.Type = TType.Struct;
              tmp1099.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1099, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1100 = new StringBuilder("scan_result(");
        int tmp1101 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1101++) { tmp1100.Append(", "); }
          tmp1100.Append("Success: ");
          Success.ToString(tmp1100);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1101++) { tmp1100.Append(", "); }
          tmp1100.Append("E: ");
          E.ToString(tmp1100);
        }
        tmp1100.Append(')');
        return tmp1100.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp1102 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1102.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1102.__isset.spec = this.__isset.spec;
        return tmp1102;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1103 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp1103, cancellationToken);
          var tmp1104 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1104.Name = "spec";
            tmp1104.Type = TType.Struct;
            tmp1104.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1104, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1105 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp1106 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1106++) { tmp1105.Append(", "); }
          tmp1105.Append("Spec: ");
          Spec.ToString(tmp1105);
        }
        tmp1105.Append(')');
        return tmp1105.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp1107 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp1107.Success = this.Success.DeepCopy();
        }
        tmp1107.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1107.E = (Exception)this.E.DeepCopy();
        }
        tmp1107.__isset.e = this.__isset.e;
        return tmp1107;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map1108 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map1108.Count);
                    for(int _i1109 = 0; _i1109 < _map1108.Count; ++_i1109)
                    {
                      string _key1110;
                      ColCells _val1111;
                      _key1110 = await iprot.ReadStringAsync(cancellationToken);
                      _val1111 = new ColCells();
                      await _val1111.ReadAsync(iprot, cancellationToken);
                      Success[_key1110] = _val1111;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1112 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp1112, cancellationToken);
          var tmp1113 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1113.Name = "Success";
              tmp1113.Type = TType.Map;
              tmp1113.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1113, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter1114 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter1114, cancellationToken);
                await Success[_iter1114].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1113.Name = "E";
              tmp1113.Type = TType.Struct;
              tmp1113.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1113, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1115 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp1116 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1116++) { tmp1115.Append(", "); }
          tmp1115.Append("Success: ");
          Success.ToString(tmp1115);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1116++) { tmp1115.Append(", "); }
          tmp1115.Append("E: ");
          E.ToString(tmp1115);
        }
        tmp1115.Append(')');
        return tmp1115.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp1117 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1117.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1117.__isset.spec = this.__isset.spec;
        return tmp1117;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1118 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp1118, cancellationToken);
          var tmp1119 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1119.Name = "spec";
            tmp1119.Type = TType.Struct;
            tmp1119.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1119, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1120 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp1121 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1121++) { tmp1120.Append(", "); }
          tmp1120.Append("Spec: ");
          Spec.ToString(tmp1120);
        }
        tmp1120.Append(')');
        return tmp1120.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp1122 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp1122.Success = this.Success.DeepCopy();
        }
        tmp1122.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1122.E = (Exception)this.E.DeepCopy();
        }
        tmp1122.__isset.e = this.__isset.e;
        return tmp1122;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list1123 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list1123.Count);
                    for(int _i1124 = 0; _i1124 < _list1123.Count; ++_i1124)
                    {
                      kCells _elem1125;
                      _elem1125 = new kCells();
                      await _elem1125.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem1125);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1126 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp1126, cancellationToken);
          var tmp1127 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1127.Name = "Success";
              tmp1127.Type = TType.List;
              tmp1127.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1127, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter1128 in Success)
              {
                await _iter1128.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1127.Name = "E";
              tmp1127.Type = TType.Struct;
              tmp1127.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1127, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1129 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp1130 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1130++) { tmp1129.Append(", "); }
          tmp1129.Append("Success: ");
          Success.ToString(tmp1129);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1130++) { tmp1129.Append(", "); }
          tmp1129.Append("E: ");
          E.ToString(tmp1129);
        }
        tmp1129.Append(')');
        return tmp1129.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp1131 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1131.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1131.__isset.spec = this.__isset.spec;
        return tmp1131;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1132 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp1132, cancellationToken);
          var tmp1133 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1133.Name = "spec";
            tmp1133.Type = TType.Struct;
            tmp1133.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1133, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1134 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp1135 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1135++) { tmp1134.Append(", "); }
          tmp1134.Append("Spec: ");
          Spec.ToString(tmp1134);
        }
        tmp1134.Append(')');
        return tmp1134.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp1136 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp1136.Success = (FCells)this.Success.DeepCopy();
        }
        tmp1136.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1136.E = (Exception)this.E.DeepCopy();
        }
        tmp1136.__isset.e = this.__isset.e;
        return tmp1136;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1137 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp1137, cancellationToken);
          var tmp1138 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1138.Name = "Success";
              tmp1138.Type = TType.Struct;
              tmp1138.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1138, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1138.Name = "E";
              tmp1138.Type = TType.Struct;
              tmp1138.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1138, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1139 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp1140 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1140++) { tmp1139.Append(", "); }
          tmp1139.Append("Success: ");
          Success.ToString(tmp1139);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1140++) { tmp1139.Append(", "); }
          tmp1139.Append("E: ");
          E.ToString(tmp1139);
        }
        tmp1139.Append(')');
        return tmp1139.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp1141 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1141.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1141.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp1141.Rslt = this.Rslt;
        }
        tmp1141.__isset.rslt = this.__isset.rslt;
        return tmp1141;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1142 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp1142, cancellationToken);
          var tmp1143 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1143.Name = "spec";
            tmp1143.Type = TType.Struct;
            tmp1143.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1143, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp1143.Name = "rslt";
            tmp1143.Type = TType.I32;
            tmp1143.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1143, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1144 = new StringBuilder("scan_rslt_on_args(");
        int tmp1145 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1145++) { tmp1144.Append(", "); }
          tmp1144.Append("Spec: ");
          Spec.ToString(tmp1144);
        }
        if(__isset.rslt)
        {
          if(0 < tmp1145++) { tmp1144.Append(", "); }
          tmp1144.Append("Rslt: ");
          Rslt.ToString(tmp1144);
        }
        tmp1144.Append(')');
        return tmp1144.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp1146 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp1146.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp1146.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1146.E = (Exception)this.E.DeepCopy();
        }
        tmp1146.__isset.e = this.__isset.e;
        return tmp1146;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1147 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp1147, cancellationToken);
          var tmp1148 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1148.Name = "Success";
              tmp1148.Type = TType.Struct;
              tmp1148.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1148, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1148.Name = "E";
              tmp1148.Type = TType.Struct;
              tmp1148.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1148, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1149 = new StringBuilder("scan_rslt_on_result(");
        int tmp1150 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1150++) { tmp1149.Append(", "); }
          tmp1149.Append("Success: ");
          Success.ToString(tmp1149);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1150++) { tmp1149.Append(", "); }
          tmp1149.Append("E: ");
          E.ToString(tmp1149);
        }
        tmp1149.Append(')');
        return tmp1149.ToString();
      }
    }

  }

}
