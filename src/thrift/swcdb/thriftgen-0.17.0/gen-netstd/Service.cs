/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.17.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method is to update cells by several Column-Types,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="plain">The PLAIN Cells to update</param>
    /// <param name="serial">The SERIAL Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCell>> plain, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp489 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp489.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp490 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp490.Type == TMessageType.Exception)
      {
        var tmp491 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp491;
      }

      var tmp492 = new InternalStructs.sql_mng_column_result();
      await tmp492.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp492.__isset.e)
      {
        throw tmp492.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp493 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp493.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp494 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp494.Type == TMessageType.Exception)
      {
        var tmp495 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp495;
      }

      var tmp496 = new InternalStructs.sql_list_columns_result();
      await tmp496.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp496.__isset.success)
      {
        return tmp496.Success;
      }
      if (tmp496.__isset.e)
      {
        throw tmp496.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp497 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp497.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp498 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp498.Type == TMessageType.Exception)
      {
        var tmp499 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp499;
      }

      var tmp500 = new InternalStructs.sql_compact_columns_result();
      await tmp500.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp500.__isset.success)
      {
        return tmp500.Success;
      }
      if (tmp500.__isset.e)
      {
        throw tmp500.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp501 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp501.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp502 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp502.Type == TMessageType.Exception)
      {
        var tmp503 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp503;
      }

      var tmp504 = new InternalStructs.sql_select_result();
      await tmp504.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp504.__isset.success)
      {
        return tmp504.Success;
      }
      if (tmp504.__isset.e)
      {
        throw tmp504.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp505 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp505.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp506 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp506.Type == TMessageType.Exception)
      {
        var tmp507 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp507;
      }

      var tmp508 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp508.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp508.__isset.success)
      {
        return tmp508.Success;
      }
      if (tmp508.__isset.e)
      {
        throw tmp508.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp509 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp509.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp510 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp510.Type == TMessageType.Exception)
      {
        var tmp511 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp511;
      }

      var tmp512 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp512.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp512.__isset.success)
      {
        return tmp512.Success;
      }
      if (tmp512.__isset.e)
      {
        throw tmp512.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp513 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp513.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp514 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp514.Type == TMessageType.Exception)
      {
        var tmp515 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp515;
      }

      var tmp516 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp516.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp516.__isset.success)
      {
        return tmp516.Success;
      }
      if (tmp516.__isset.e)
      {
        throw tmp516.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp517 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp517.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp518 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp518.Type == TMessageType.Exception)
      {
        var tmp519 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp519;
      }

      var tmp520 = new InternalStructs.sql_query_result();
      await tmp520.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp520.__isset.success)
      {
        return tmp520.Success;
      }
      if (tmp520.__isset.e)
      {
        throw tmp520.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp521 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp521.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp522 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp522.Type == TMessageType.Exception)
      {
        var tmp523 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp523;
      }

      var tmp524 = new InternalStructs.sql_update_result();
      await tmp524.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp524.__isset.e)
      {
        throw tmp524.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp525 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp525.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp526 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp526.Type == TMessageType.Exception)
      {
        var tmp527 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp527;
      }

      var tmp528 = new InternalStructs.exec_sql_result();
      await tmp528.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp528.__isset.success)
      {
        return tmp528.Success;
      }
      if (tmp528.__isset.e)
      {
        throw tmp528.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp529 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp529.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp530 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp530.Type == TMessageType.Exception)
      {
        var tmp531 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp531;
      }

      var tmp532 = new InternalStructs.updater_create_result();
      await tmp532.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp532.__isset.success)
      {
        return tmp532.Success;
      }
      if (tmp532.__isset.e)
      {
        throw tmp532.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp533 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp533.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp534 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp534.Type == TMessageType.Exception)
      {
        var tmp535 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp535;
      }

      var tmp536 = new InternalStructs.updater_close_result();
      await tmp536.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp536.__isset.e)
      {
        throw tmp536.E;
      }
    }

    public async global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update(cells, updater_id, cancellationToken);
      await recv_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp537 = new InternalStructs.update_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp537.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update(CancellationToken cancellationToken = default)
    {
      
      var tmp538 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp538.Type == TMessageType.Exception)
      {
        var tmp539 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp539;
      }

      var tmp540 = new InternalStructs.update_result();
      await tmp540.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp540.__isset.e)
      {
        throw tmp540.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp541 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp541.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp542 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp542.Type == TMessageType.Exception)
      {
        var tmp543 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp543;
      }

      var tmp544 = new InternalStructs.update_serial_result();
      await tmp544.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp544.__isset.e)
      {
        throw tmp544.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_by_types(Dictionary<long, List<UCell>> plain, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_by_types(plain, serial, updater_id, cancellationToken);
      await recv_update_by_types(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_by_types(Dictionary<long, List<UCell>> plain, Dictionary<long, List<UCellSerial>> serial, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp545 = new InternalStructs.update_by_types_args() {
        Plain = plain,
        Serial = serial,
        Updater_id = updater_id,
      };
      
      await tmp545.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_by_types(CancellationToken cancellationToken = default)
    {
      
      var tmp546 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp546.Type == TMessageType.Exception)
      {
        var tmp547 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp547;
      }

      var tmp548 = new InternalStructs.update_by_types_result();
      await tmp548.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp548.__isset.e)
      {
        throw tmp548.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp549 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp549.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp550 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp550.Type == TMessageType.Exception)
      {
        var tmp551 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp551;
      }

      var tmp552 = new InternalStructs.mng_column_result();
      await tmp552.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp552.__isset.e)
      {
        throw tmp552.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp553 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp553.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp554 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp554.Type == TMessageType.Exception)
      {
        var tmp555 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp555;
      }

      var tmp556 = new InternalStructs.list_columns_result();
      await tmp556.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp556.__isset.success)
      {
        return tmp556.Success;
      }
      if (tmp556.__isset.e)
      {
        throw tmp556.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp557 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp557.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp558 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp558.Type == TMessageType.Exception)
      {
        var tmp559 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp559;
      }

      var tmp560 = new InternalStructs.compact_columns_result();
      await tmp560.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp560.__isset.success)
      {
        return tmp560.Success;
      }
      if (tmp560.__isset.e)
      {
        throw tmp560.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp561 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp561.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp562 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp562.Type == TMessageType.Exception)
      {
        var tmp563 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp563;
      }

      var tmp564 = new InternalStructs.scan_result();
      await tmp564.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp564.__isset.success)
      {
        return tmp564.Success;
      }
      if (tmp564.__isset.e)
      {
        throw tmp564.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp565 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp565.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp566 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp566.Type == TMessageType.Exception)
      {
        var tmp567 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp567;
      }

      var tmp568 = new InternalStructs.scan_rslt_on_column_result();
      await tmp568.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp568.__isset.success)
      {
        return tmp568.Success;
      }
      if (tmp568.__isset.e)
      {
        throw tmp568.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp569 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp569.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp570 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp570.Type == TMessageType.Exception)
      {
        var tmp571 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp571;
      }

      var tmp572 = new InternalStructs.scan_rslt_on_key_result();
      await tmp572.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp572.__isset.success)
      {
        return tmp572.Success;
      }
      if (tmp572.__isset.e)
      {
        throw tmp572.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp573 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp573.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp574 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp574.Type == TMessageType.Exception)
      {
        var tmp575 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp575;
      }

      var tmp576 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp576.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp576.__isset.success)
      {
        return tmp576.Success;
      }
      if (tmp576.__isset.e)
      {
        throw tmp576.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp577 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp577.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp578 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp578.Type == TMessageType.Exception)
      {
        var tmp579 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp579;
      }

      var tmp580 = new InternalStructs.scan_rslt_on_result();
      await tmp580.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp580.__isset.success)
      {
        return tmp580.Success;
      }
      if (tmp580.__isset.e)
      {
        throw tmp580.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update"] = update_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["update_by_types"] = update_by_types_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out var fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp581 = new InternalStructs.sql_mng_column_args();
      await tmp581.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp582 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp581.Sql, cancellationToken);
        }
        catch (Exception tmp583)
        {
          tmp582.E = tmp583;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp582.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp584)
      {
        var tmp585 = $"Error occurred in {GetType().FullName}: {tmp584.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp584, tmp585);
        else
          Console.Error.WriteLine(tmp585);
        var tmp586 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp586.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp587 = new InternalStructs.sql_list_columns_args();
      await tmp587.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp588 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp588.Success = await _iAsync.sql_list_columns(tmp587.Sql, cancellationToken);
        }
        catch (Exception tmp589)
        {
          tmp588.E = tmp589;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp588.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp590)
      {
        var tmp591 = $"Error occurred in {GetType().FullName}: {tmp590.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp590, tmp591);
        else
          Console.Error.WriteLine(tmp591);
        var tmp592 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp592.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp593 = new InternalStructs.sql_compact_columns_args();
      await tmp593.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp594 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp594.Success = await _iAsync.sql_compact_columns(tmp593.Sql, cancellationToken);
        }
        catch (Exception tmp595)
        {
          tmp594.E = tmp595;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp594.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp596)
      {
        var tmp597 = $"Error occurred in {GetType().FullName}: {tmp596.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp596, tmp597);
        else
          Console.Error.WriteLine(tmp597);
        var tmp598 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp598.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp599 = new InternalStructs.sql_select_args();
      await tmp599.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp600 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp600.Success = await _iAsync.sql_select(tmp599.Sql, cancellationToken);
        }
        catch (Exception tmp601)
        {
          tmp600.E = tmp601;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp600.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp602)
      {
        var tmp603 = $"Error occurred in {GetType().FullName}: {tmp602.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp602, tmp603);
        else
          Console.Error.WriteLine(tmp603);
        var tmp604 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp604.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp605 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp605.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp606 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp606.Success = await _iAsync.sql_select_rslt_on_column(tmp605.Sql, cancellationToken);
        }
        catch (Exception tmp607)
        {
          tmp606.E = tmp607;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp606.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp608)
      {
        var tmp609 = $"Error occurred in {GetType().FullName}: {tmp608.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp608, tmp609);
        else
          Console.Error.WriteLine(tmp609);
        var tmp610 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp610.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp611 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp611.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp612 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp612.Success = await _iAsync.sql_select_rslt_on_key(tmp611.Sql, cancellationToken);
        }
        catch (Exception tmp613)
        {
          tmp612.E = tmp613;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp612.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp614)
      {
        var tmp615 = $"Error occurred in {GetType().FullName}: {tmp614.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp614, tmp615);
        else
          Console.Error.WriteLine(tmp615);
        var tmp616 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp616.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp617 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp617.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp618 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp618.Success = await _iAsync.sql_select_rslt_on_fraction(tmp617.Sql, cancellationToken);
        }
        catch (Exception tmp619)
        {
          tmp618.E = tmp619;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp618.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp620)
      {
        var tmp621 = $"Error occurred in {GetType().FullName}: {tmp620.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp620, tmp621);
        else
          Console.Error.WriteLine(tmp621);
        var tmp622 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp622.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp623 = new InternalStructs.sql_query_args();
      await tmp623.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp624 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp624.Success = await _iAsync.sql_query(tmp623.Sql, tmp623.Rslt, cancellationToken);
        }
        catch (Exception tmp625)
        {
          tmp624.E = tmp625;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp624.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp626)
      {
        var tmp627 = $"Error occurred in {GetType().FullName}: {tmp626.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp626, tmp627);
        else
          Console.Error.WriteLine(tmp627);
        var tmp628 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp628.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp629 = new InternalStructs.sql_update_args();
      await tmp629.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp630 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp629.Sql, tmp629.Updater_id, cancellationToken);
        }
        catch (Exception tmp631)
        {
          tmp630.E = tmp631;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp630.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp632)
      {
        var tmp633 = $"Error occurred in {GetType().FullName}: {tmp632.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp632, tmp633);
        else
          Console.Error.WriteLine(tmp633);
        var tmp634 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp634.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp635 = new InternalStructs.exec_sql_args();
      await tmp635.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp636 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp636.Success = await _iAsync.exec_sql(tmp635.Sql, cancellationToken);
        }
        catch (Exception tmp637)
        {
          tmp636.E = tmp637;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp636.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp638)
      {
        var tmp639 = $"Error occurred in {GetType().FullName}: {tmp638.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp638, tmp639);
        else
          Console.Error.WriteLine(tmp639);
        var tmp640 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp640.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp641 = new InternalStructs.updater_create_args();
      await tmp641.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp642 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp642.Success = await _iAsync.updater_create(tmp641.Buffer_size, cancellationToken);
        }
        catch (Exception tmp643)
        {
          tmp642.E = tmp643;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp642.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp644)
      {
        var tmp645 = $"Error occurred in {GetType().FullName}: {tmp644.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp644, tmp645);
        else
          Console.Error.WriteLine(tmp645);
        var tmp646 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp646.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp647 = new InternalStructs.updater_close_args();
      await tmp647.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp648 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp647.Id, cancellationToken);
        }
        catch (Exception tmp649)
        {
          tmp648.E = tmp649;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp648.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp650)
      {
        var tmp651 = $"Error occurred in {GetType().FullName}: {tmp650.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp650, tmp651);
        else
          Console.Error.WriteLine(tmp651);
        var tmp652 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp652.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp653 = new InternalStructs.update_args();
      await tmp653.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp654 = new InternalStructs.update_result();
      try
      {
        try
        {
          await _iAsync.update(tmp653.Cells, tmp653.Updater_id, cancellationToken);
        }
        catch (Exception tmp655)
        {
          tmp654.E = tmp655;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp654.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp656)
      {
        var tmp657 = $"Error occurred in {GetType().FullName}: {tmp656.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp656, tmp657);
        else
          Console.Error.WriteLine(tmp657);
        var tmp658 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Exception, seqid), cancellationToken);
        await tmp658.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp659 = new InternalStructs.update_serial_args();
      await tmp659.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp660 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp659.Cells, tmp659.Updater_id, cancellationToken);
        }
        catch (Exception tmp661)
        {
          tmp660.E = tmp661;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp660.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp662)
      {
        var tmp663 = $"Error occurred in {GetType().FullName}: {tmp662.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp662, tmp663);
        else
          Console.Error.WriteLine(tmp663);
        var tmp664 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp664.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_by_types_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp665 = new InternalStructs.update_by_types_args();
      await tmp665.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp666 = new InternalStructs.update_by_types_result();
      try
      {
        try
        {
          await _iAsync.update_by_types(tmp665.Plain, tmp665.Serial, tmp665.Updater_id, cancellationToken);
        }
        catch (Exception tmp667)
        {
          tmp666.E = tmp667;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Reply, seqid), cancellationToken); 
        await tmp666.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp668)
      {
        var tmp669 = $"Error occurred in {GetType().FullName}: {tmp668.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp668, tmp669);
        else
          Console.Error.WriteLine(tmp669);
        var tmp670 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_by_types", TMessageType.Exception, seqid), cancellationToken);
        await tmp670.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp671 = new InternalStructs.mng_column_args();
      await tmp671.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp672 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp671.Func, tmp671.Schema, cancellationToken);
        }
        catch (Exception tmp673)
        {
          tmp672.E = tmp673;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp672.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp674)
      {
        var tmp675 = $"Error occurred in {GetType().FullName}: {tmp674.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp674, tmp675);
        else
          Console.Error.WriteLine(tmp675);
        var tmp676 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp676.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp677 = new InternalStructs.list_columns_args();
      await tmp677.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp678 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp678.Success = await _iAsync.list_columns(tmp677.Spec, cancellationToken);
        }
        catch (Exception tmp679)
        {
          tmp678.E = tmp679;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp678.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp680)
      {
        var tmp681 = $"Error occurred in {GetType().FullName}: {tmp680.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp680, tmp681);
        else
          Console.Error.WriteLine(tmp681);
        var tmp682 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp682.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp683 = new InternalStructs.compact_columns_args();
      await tmp683.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp684 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp684.Success = await _iAsync.compact_columns(tmp683.Spec, cancellationToken);
        }
        catch (Exception tmp685)
        {
          tmp684.E = tmp685;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp684.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp686)
      {
        var tmp687 = $"Error occurred in {GetType().FullName}: {tmp686.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp686, tmp687);
        else
          Console.Error.WriteLine(tmp687);
        var tmp688 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp688.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp689 = new InternalStructs.scan_args();
      await tmp689.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp690 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp690.Success = await _iAsync.scan(tmp689.Spec, cancellationToken);
        }
        catch (Exception tmp691)
        {
          tmp690.E = tmp691;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp690.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp692)
      {
        var tmp693 = $"Error occurred in {GetType().FullName}: {tmp692.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp692, tmp693);
        else
          Console.Error.WriteLine(tmp693);
        var tmp694 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp694.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp695 = new InternalStructs.scan_rslt_on_column_args();
      await tmp695.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp696 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp696.Success = await _iAsync.scan_rslt_on_column(tmp695.Spec, cancellationToken);
        }
        catch (Exception tmp697)
        {
          tmp696.E = tmp697;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp696.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp698)
      {
        var tmp699 = $"Error occurred in {GetType().FullName}: {tmp698.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp698, tmp699);
        else
          Console.Error.WriteLine(tmp699);
        var tmp700 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp700.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp701 = new InternalStructs.scan_rslt_on_key_args();
      await tmp701.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp702 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp702.Success = await _iAsync.scan_rslt_on_key(tmp701.Spec, cancellationToken);
        }
        catch (Exception tmp703)
        {
          tmp702.E = tmp703;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp702.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp704)
      {
        var tmp705 = $"Error occurred in {GetType().FullName}: {tmp704.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp704, tmp705);
        else
          Console.Error.WriteLine(tmp705);
        var tmp706 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp706.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp707 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp707.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp708 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp708.Success = await _iAsync.scan_rslt_on_fraction(tmp707.Spec, cancellationToken);
        }
        catch (Exception tmp709)
        {
          tmp708.E = tmp709;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp708.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp710)
      {
        var tmp711 = $"Error occurred in {GetType().FullName}: {tmp710.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp710, tmp711);
        else
          Console.Error.WriteLine(tmp711);
        var tmp712 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp712.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp713 = new InternalStructs.scan_rslt_on_args();
      await tmp713.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp714 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp714.Success = await _iAsync.scan_rslt_on(tmp713.Spec, tmp713.Rslt, cancellationToken);
        }
        catch (Exception tmp715)
        {
          tmp714.E = tmp715;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp714.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp716)
      {
        var tmp717 = $"Error occurred in {GetType().FullName}: {tmp716.Message}";
        if(_logger != null)
          _logger.LogError("{Exception}, {Message}", tmp716, tmp717);
        else
          Console.Error.WriteLine(tmp717);
        var tmp718 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp718.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp719 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp719.Sql = this.Sql;
        }
        tmp719.__isset.sql = this.__isset.sql;
        return tmp719;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp720 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp720, cancellationToken);
          var tmp721 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp721.Name = "sql";
            tmp721.Type = TType.String;
            tmp721.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp721, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp722 = new StringBuilder("sql_mng_column_args(");
        int tmp723 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp723++) { tmp722.Append(", "); }
          tmp722.Append("Sql: ");
          Sql.ToString(tmp722);
        }
        tmp722.Append(')');
        return tmp722.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp724 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp724.E = (Exception)this.E.DeepCopy();
        }
        tmp724.__isset.e = this.__isset.e;
        return tmp724;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp725 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp725, cancellationToken);
          var tmp726 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp726.Name = "E";
              tmp726.Type = TType.Struct;
              tmp726.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp726, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp727 = new StringBuilder("sql_mng_column_result(");
        int tmp728 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp728++) { tmp727.Append(", "); }
          tmp727.Append("E: ");
          E.ToString(tmp727);
        }
        tmp727.Append(')');
        return tmp727.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp729 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp729.Sql = this.Sql;
        }
        tmp729.__isset.sql = this.__isset.sql;
        return tmp729;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp730 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp730, cancellationToken);
          var tmp731 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp731.Name = "sql";
            tmp731.Type = TType.String;
            tmp731.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp731, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp732 = new StringBuilder("sql_list_columns_args(");
        int tmp733 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp733++) { tmp732.Append(", "); }
          tmp732.Append("Sql: ");
          Sql.ToString(tmp732);
        }
        tmp732.Append(')');
        return tmp732.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp734 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp734.Success = this.Success.DeepCopy();
        }
        tmp734.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp734.E = (Exception)this.E.DeepCopy();
        }
        tmp734.__isset.e = this.__isset.e;
        return tmp734;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list735 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list735.Count);
                    for(int _i736 = 0; _i736 < _list735.Count; ++_i736)
                    {
                      Schema _elem737;
                      _elem737 = new Schema();
                      await _elem737.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem737);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp738 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp738, cancellationToken);
          var tmp739 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp739.Name = "Success";
              tmp739.Type = TType.List;
              tmp739.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp739, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter740 in Success)
              {
                await _iter740.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp739.Name = "E";
              tmp739.Type = TType.Struct;
              tmp739.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp739, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp741 = new StringBuilder("sql_list_columns_result(");
        int tmp742 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp742++) { tmp741.Append(", "); }
          tmp741.Append("Success: ");
          Success.ToString(tmp741);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp742++) { tmp741.Append(", "); }
          tmp741.Append("E: ");
          E.ToString(tmp741);
        }
        tmp741.Append(')');
        return tmp741.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp743 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp743.Sql = this.Sql;
        }
        tmp743.__isset.sql = this.__isset.sql;
        return tmp743;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp744 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp744, cancellationToken);
          var tmp745 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp745.Name = "sql";
            tmp745.Type = TType.String;
            tmp745.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp745, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp746 = new StringBuilder("sql_compact_columns_args(");
        int tmp747 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp747++) { tmp746.Append(", "); }
          tmp746.Append("Sql: ");
          Sql.ToString(tmp746);
        }
        tmp746.Append(')');
        return tmp746.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp748 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp748.Success = this.Success.DeepCopy();
        }
        tmp748.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp748.E = (Exception)this.E.DeepCopy();
        }
        tmp748.__isset.e = this.__isset.e;
        return tmp748;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list749 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list749.Count);
                    for(int _i750 = 0; _i750 < _list749.Count; ++_i750)
                    {
                      CompactResult _elem751;
                      _elem751 = new CompactResult();
                      await _elem751.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem751);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp752 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp752, cancellationToken);
          var tmp753 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp753.Name = "Success";
              tmp753.Type = TType.List;
              tmp753.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp753, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter754 in Success)
              {
                await _iter754.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp753.Name = "E";
              tmp753.Type = TType.Struct;
              tmp753.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp753, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp755 = new StringBuilder("sql_compact_columns_result(");
        int tmp756 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp756++) { tmp755.Append(", "); }
          tmp755.Append("Success: ");
          Success.ToString(tmp755);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp756++) { tmp755.Append(", "); }
          tmp755.Append("E: ");
          E.ToString(tmp755);
        }
        tmp755.Append(')');
        return tmp755.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp757 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp757.Sql = this.Sql;
        }
        tmp757.__isset.sql = this.__isset.sql;
        return tmp757;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp758 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp758, cancellationToken);
          var tmp759 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp759.Name = "sql";
            tmp759.Type = TType.String;
            tmp759.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp759, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp760 = new StringBuilder("sql_select_args(");
        int tmp761 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp761++) { tmp760.Append(", "); }
          tmp760.Append("Sql: ");
          Sql.ToString(tmp760);
        }
        tmp760.Append(')');
        return tmp760.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp762 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp762.Success = (Cells)this.Success.DeepCopy();
        }
        tmp762.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp762.E = (Exception)this.E.DeepCopy();
        }
        tmp762.__isset.e = this.__isset.e;
        return tmp762;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp763 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp763, cancellationToken);
          var tmp764 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp764.Name = "Success";
              tmp764.Type = TType.Struct;
              tmp764.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp764, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp764.Name = "E";
              tmp764.Type = TType.Struct;
              tmp764.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp764, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp765 = new StringBuilder("sql_select_result(");
        int tmp766 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp766++) { tmp765.Append(", "); }
          tmp765.Append("Success: ");
          Success.ToString(tmp765);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp766++) { tmp765.Append(", "); }
          tmp765.Append("E: ");
          E.ToString(tmp765);
        }
        tmp765.Append(')');
        return tmp765.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp767 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp767.Sql = this.Sql;
        }
        tmp767.__isset.sql = this.__isset.sql;
        return tmp767;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp768 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp768, cancellationToken);
          var tmp769 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp769.Name = "sql";
            tmp769.Type = TType.String;
            tmp769.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp769, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp770 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp771 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp771++) { tmp770.Append(", "); }
          tmp770.Append("Sql: ");
          Sql.ToString(tmp770);
        }
        tmp770.Append(')');
        return tmp770.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp772 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp772.Success = this.Success.DeepCopy();
        }
        tmp772.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp772.E = (Exception)this.E.DeepCopy();
        }
        tmp772.__isset.e = this.__isset.e;
        return tmp772;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map773 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map773.Count);
                    for(int _i774 = 0; _i774 < _map773.Count; ++_i774)
                    {
                      string _key775;
                      ColCells _val776;
                      _key775 = await iprot.ReadStringAsync(cancellationToken);
                      _val776 = new ColCells();
                      await _val776.ReadAsync(iprot, cancellationToken);
                      Success[_key775] = _val776;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp777 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp777, cancellationToken);
          var tmp778 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp778.Name = "Success";
              tmp778.Type = TType.Map;
              tmp778.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp778, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter779 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter779, cancellationToken);
                await Success[_iter779].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp778.Name = "E";
              tmp778.Type = TType.Struct;
              tmp778.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp778, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp780 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp781 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp781++) { tmp780.Append(", "); }
          tmp780.Append("Success: ");
          Success.ToString(tmp780);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp781++) { tmp780.Append(", "); }
          tmp780.Append("E: ");
          E.ToString(tmp780);
        }
        tmp780.Append(')');
        return tmp780.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp782 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp782.Sql = this.Sql;
        }
        tmp782.__isset.sql = this.__isset.sql;
        return tmp782;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp783 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp783, cancellationToken);
          var tmp784 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp784.Name = "sql";
            tmp784.Type = TType.String;
            tmp784.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp784, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp785 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp786 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp786++) { tmp785.Append(", "); }
          tmp785.Append("Sql: ");
          Sql.ToString(tmp785);
        }
        tmp785.Append(')');
        return tmp785.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp787 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp787.Success = this.Success.DeepCopy();
        }
        tmp787.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp787.E = (Exception)this.E.DeepCopy();
        }
        tmp787.__isset.e = this.__isset.e;
        return tmp787;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list788 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list788.Count);
                    for(int _i789 = 0; _i789 < _list788.Count; ++_i789)
                    {
                      kCells _elem790;
                      _elem790 = new kCells();
                      await _elem790.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem790);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp791 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp791, cancellationToken);
          var tmp792 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp792.Name = "Success";
              tmp792.Type = TType.List;
              tmp792.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp792, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter793 in Success)
              {
                await _iter793.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp792.Name = "E";
              tmp792.Type = TType.Struct;
              tmp792.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp792, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp794 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp795 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp795++) { tmp794.Append(", "); }
          tmp794.Append("Success: ");
          Success.ToString(tmp794);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp795++) { tmp794.Append(", "); }
          tmp794.Append("E: ");
          E.ToString(tmp794);
        }
        tmp794.Append(')');
        return tmp794.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp796 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp796.Sql = this.Sql;
        }
        tmp796.__isset.sql = this.__isset.sql;
        return tmp796;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp797 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp797, cancellationToken);
          var tmp798 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp798.Name = "sql";
            tmp798.Type = TType.String;
            tmp798.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp798, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp799 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp800 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp800++) { tmp799.Append(", "); }
          tmp799.Append("Sql: ");
          Sql.ToString(tmp799);
        }
        tmp799.Append(')');
        return tmp799.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp801 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp801.Success = (FCells)this.Success.DeepCopy();
        }
        tmp801.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp801.E = (Exception)this.E.DeepCopy();
        }
        tmp801.__isset.e = this.__isset.e;
        return tmp801;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp802 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp802, cancellationToken);
          var tmp803 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp803.Name = "Success";
              tmp803.Type = TType.Struct;
              tmp803.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp803, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp803.Name = "E";
              tmp803.Type = TType.Struct;
              tmp803.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp803, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp804 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp805 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp805++) { tmp804.Append(", "); }
          tmp804.Append("Success: ");
          Success.ToString(tmp804);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp805++) { tmp804.Append(", "); }
          tmp804.Append("E: ");
          E.ToString(tmp804);
        }
        tmp804.Append(')');
        return tmp804.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp806 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp806.Sql = this.Sql;
        }
        tmp806.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp806.Rslt = this.Rslt;
        }
        tmp806.__isset.rslt = this.__isset.rslt;
        return tmp806;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp807 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp807, cancellationToken);
          var tmp808 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp808.Name = "sql";
            tmp808.Type = TType.String;
            tmp808.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp808, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp808.Name = "rslt";
            tmp808.Type = TType.I32;
            tmp808.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp808, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp809 = new StringBuilder("sql_query_args(");
        int tmp810 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp810++) { tmp809.Append(", "); }
          tmp809.Append("Sql: ");
          Sql.ToString(tmp809);
        }
        if(__isset.rslt)
        {
          if(0 < tmp810++) { tmp809.Append(", "); }
          tmp809.Append("Rslt: ");
          Rslt.ToString(tmp809);
        }
        tmp809.Append(')');
        return tmp809.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp811 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp811.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp811.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp811.E = (Exception)this.E.DeepCopy();
        }
        tmp811.__isset.e = this.__isset.e;
        return tmp811;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp812 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp812, cancellationToken);
          var tmp813 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp813.Name = "Success";
              tmp813.Type = TType.Struct;
              tmp813.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp813, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp813.Name = "E";
              tmp813.Type = TType.Struct;
              tmp813.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp813, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp814 = new StringBuilder("sql_query_result(");
        int tmp815 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp815++) { tmp814.Append(", "); }
          tmp814.Append("Success: ");
          Success.ToString(tmp814);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp815++) { tmp814.Append(", "); }
          tmp814.Append("E: ");
          E.ToString(tmp814);
        }
        tmp814.Append(')');
        return tmp814.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp816 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp816.Sql = this.Sql;
        }
        tmp816.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp816.Updater_id = this.Updater_id;
        }
        tmp816.__isset.updater_id = this.__isset.updater_id;
        return tmp816;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp817 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp817, cancellationToken);
          var tmp818 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp818.Name = "sql";
            tmp818.Type = TType.String;
            tmp818.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp818, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp818.Name = "updater_id";
            tmp818.Type = TType.I64;
            tmp818.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp818, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp819 = new StringBuilder("sql_update_args(");
        int tmp820 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp820++) { tmp819.Append(", "); }
          tmp819.Append("Sql: ");
          Sql.ToString(tmp819);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp820++) { tmp819.Append(", "); }
          tmp819.Append("Updater_id: ");
          Updater_id.ToString(tmp819);
        }
        tmp819.Append(')');
        return tmp819.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp821 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp821.E = (Exception)this.E.DeepCopy();
        }
        tmp821.__isset.e = this.__isset.e;
        return tmp821;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp822 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp822, cancellationToken);
          var tmp823 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp823.Name = "E";
              tmp823.Type = TType.Struct;
              tmp823.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp823, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp824 = new StringBuilder("sql_update_result(");
        int tmp825 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp825++) { tmp824.Append(", "); }
          tmp824.Append("E: ");
          E.ToString(tmp824);
        }
        tmp824.Append(')');
        return tmp824.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp826 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp826.Sql = this.Sql;
        }
        tmp826.__isset.sql = this.__isset.sql;
        return tmp826;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp827 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp827, cancellationToken);
          var tmp828 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp828.Name = "sql";
            tmp828.Type = TType.String;
            tmp828.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp828, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (global::System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp829 = new StringBuilder("exec_sql_args(");
        int tmp830 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp830++) { tmp829.Append(", "); }
          tmp829.Append("Sql: ");
          Sql.ToString(tmp829);
        }
        tmp829.Append(')');
        return tmp829.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp831 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp831.Success = (Result)this.Success.DeepCopy();
        }
        tmp831.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp831.E = (Exception)this.E.DeepCopy();
        }
        tmp831.__isset.e = this.__isset.e;
        return tmp831;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp832 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp832, cancellationToken);
          var tmp833 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp833.Name = "Success";
              tmp833.Type = TType.Struct;
              tmp833.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp833, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp833.Name = "E";
              tmp833.Type = TType.Struct;
              tmp833.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp833, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp834 = new StringBuilder("exec_sql_result(");
        int tmp835 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp835++) { tmp834.Append(", "); }
          tmp834.Append("Success: ");
          Success.ToString(tmp834);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp835++) { tmp834.Append(", "); }
          tmp834.Append("E: ");
          E.ToString(tmp834);
        }
        tmp834.Append(')');
        return tmp834.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp836 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp836.Buffer_size = this.Buffer_size;
        }
        tmp836.__isset.buffer_size = this.__isset.buffer_size;
        return tmp836;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp837 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp837, cancellationToken);
          var tmp838 = new TField();
          if(__isset.buffer_size)
          {
            tmp838.Name = "buffer_size";
            tmp838.Type = TType.I32;
            tmp838.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp838, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (global::System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp839 = new StringBuilder("updater_create_args(");
        int tmp840 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp840++) { tmp839.Append(", "); }
          tmp839.Append("Buffer_size: ");
          Buffer_size.ToString(tmp839);
        }
        tmp839.Append(')');
        return tmp839.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp841 = new updater_create_result();
        if(__isset.success)
        {
          tmp841.Success = this.Success;
        }
        tmp841.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp841.E = (Exception)this.E.DeepCopy();
        }
        tmp841.__isset.e = this.__isset.e;
        return tmp841;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp842 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp842, cancellationToken);
          var tmp843 = new TField();

          if(this.__isset.success)
          {
            tmp843.Name = "Success";
            tmp843.Type = TType.I64;
            tmp843.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp843, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp843.Name = "E";
              tmp843.Type = TType.Struct;
              tmp843.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp843, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp844 = new StringBuilder("updater_create_result(");
        int tmp845 = 0;
        if(__isset.success)
        {
          if(0 < tmp845++) { tmp844.Append(", "); }
          tmp844.Append("Success: ");
          Success.ToString(tmp844);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp845++) { tmp844.Append(", "); }
          tmp844.Append("E: ");
          E.ToString(tmp844);
        }
        tmp844.Append(')');
        return tmp844.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp846 = new updater_close_args();
        if(__isset.id)
        {
          tmp846.Id = this.Id;
        }
        tmp846.__isset.id = this.__isset.id;
        return tmp846;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp847 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp847, cancellationToken);
          var tmp848 = new TField();
          if(__isset.id)
          {
            tmp848.Name = "id";
            tmp848.Type = TType.I64;
            tmp848.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp848, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (global::System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp849 = new StringBuilder("updater_close_args(");
        int tmp850 = 0;
        if(__isset.id)
        {
          if(0 < tmp850++) { tmp849.Append(", "); }
          tmp849.Append("Id: ");
          Id.ToString(tmp849);
        }
        tmp849.Append(')');
        return tmp849.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp851 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp851.E = (Exception)this.E.DeepCopy();
        }
        tmp851.__isset.e = this.__isset.e;
        return tmp851;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp852 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp852, cancellationToken);
          var tmp853 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp853.Name = "E";
              tmp853.Type = TType.Struct;
              tmp853.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp854 = new StringBuilder("updater_close_result(");
        int tmp855 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp855++) { tmp854.Append(", "); }
          tmp854.Append("E: ");
          E.ToString(tmp854);
        }
        tmp854.Append(')');
        return tmp854.ToString();
      }
    }


    public partial class update_args : TBase
    {
      private Dictionary<long, List<UCell>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCell>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_args DeepCopy()
      {
        var tmp856 = new update_args();
        if((Cells != null) && __isset.cells)
        {
          tmp856.Cells = this.Cells.DeepCopy();
        }
        tmp856.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp856.Updater_id = this.Updater_id;
        }
        tmp856.__isset.updater_id = this.__isset.updater_id;
        return tmp856;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map857 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCell>>(_map857.Count);
                    for(int _i858 = 0; _i858 < _map857.Count; ++_i858)
                    {
                      long _key859;
                      List<UCell> _val860;
                      _key859 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list861 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val860 = new List<UCell>(_list861.Count);
                        for(int _i862 = 0; _i862 < _list861.Count; ++_i862)
                        {
                          UCell _elem863;
                          _elem863 = new UCell();
                          await _elem863.ReadAsync(iprot, cancellationToken);
                          _val860.Add(_elem863);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key859] = _val860;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp864 = new TStruct("update_args");
          await oprot.WriteStructBeginAsync(tmp864, cancellationToken);
          var tmp865 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp865.Name = "cells";
            tmp865.Type = TType.Map;
            tmp865.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp865, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter866 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter866, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter866].Count), cancellationToken);
              foreach (UCell _iter867 in Cells[_iter866])
              {
                await _iter867.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp865.Name = "updater_id";
            tmp865.Type = TType.I64;
            tmp865.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp865, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp868 = new StringBuilder("update_args(");
        int tmp869 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp869++) { tmp868.Append(", "); }
          tmp868.Append("Cells: ");
          Cells.ToString(tmp868);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp869++) { tmp868.Append(", "); }
          tmp868.Append("Updater_id: ");
          Updater_id.ToString(tmp868);
        }
        tmp868.Append(')');
        return tmp868.ToString();
      }
    }


    public partial class update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_result()
      {
      }

      public update_result DeepCopy()
      {
        var tmp870 = new update_result();
        if((E != null) && __isset.e)
        {
          tmp870.E = (Exception)this.E.DeepCopy();
        }
        tmp870.__isset.e = this.__isset.e;
        return tmp870;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp871 = new TStruct("update_result");
          await oprot.WriteStructBeginAsync(tmp871, cancellationToken);
          var tmp872 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp872.Name = "E";
              tmp872.Type = TType.Struct;
              tmp872.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp872, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp873 = new StringBuilder("update_result(");
        int tmp874 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp874++) { tmp873.Append(", "); }
          tmp873.Append("E: ");
          E.ToString(tmp873);
        }
        tmp873.Append(')');
        return tmp873.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp875 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp875.Cells = this.Cells.DeepCopy();
        }
        tmp875.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp875.Updater_id = this.Updater_id;
        }
        tmp875.__isset.updater_id = this.__isset.updater_id;
        return tmp875;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map876 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map876.Count);
                    for(int _i877 = 0; _i877 < _map876.Count; ++_i877)
                    {
                      long _key878;
                      List<UCellSerial> _val879;
                      _key878 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list880 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val879 = new List<UCellSerial>(_list880.Count);
                        for(int _i881 = 0; _i881 < _list880.Count; ++_i881)
                        {
                          UCellSerial _elem882;
                          _elem882 = new UCellSerial();
                          await _elem882.ReadAsync(iprot, cancellationToken);
                          _val879.Add(_elem882);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key878] = _val879;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp883 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp883, cancellationToken);
          var tmp884 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp884.Name = "cells";
            tmp884.Type = TType.Map;
            tmp884.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp884, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
            foreach (long _iter885 in Cells.Keys)
            {
              await oprot.WriteI64Async(_iter885, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter885].Count), cancellationToken);
              foreach (UCellSerial _iter886 in Cells[_iter885])
              {
                await _iter886.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp884.Name = "updater_id";
            tmp884.Type = TType.I64;
            tmp884.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp884, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (global::System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp887 = new StringBuilder("update_serial_args(");
        int tmp888 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp888++) { tmp887.Append(", "); }
          tmp887.Append("Cells: ");
          Cells.ToString(tmp887);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp888++) { tmp887.Append(", "); }
          tmp887.Append("Updater_id: ");
          Updater_id.ToString(tmp887);
        }
        tmp887.Append(')');
        return tmp887.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp889 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp889.E = (Exception)this.E.DeepCopy();
        }
        tmp889.__isset.e = this.__isset.e;
        return tmp889;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp890 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp890, cancellationToken);
          var tmp891 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp891.Name = "E";
              tmp891.Type = TType.Struct;
              tmp891.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp891, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp892 = new StringBuilder("update_serial_result(");
        int tmp893 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp893++) { tmp892.Append(", "); }
          tmp892.Append("E: ");
          E.ToString(tmp892);
        }
        tmp892.Append(')');
        return tmp892.ToString();
      }
    }


    public partial class update_by_types_args : TBase
    {
      private Dictionary<long, List<UCell>> _plain;
      private Dictionary<long, List<UCellSerial>> _serial;
      private long _updater_id;

      /// <summary>
      /// The PLAIN Cells to update
      /// </summary>
      public Dictionary<long, List<UCell>> Plain
      {
        get
        {
          return _plain;
        }
        set
        {
          __isset.plain = true;
          this._plain = value;
        }
      }

      /// <summary>
      /// The SERIAL Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Serial
      {
        get
        {
          return _serial;
        }
        set
        {
          __isset.serial = true;
          this._serial = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool plain;
        public bool serial;
        public bool updater_id;
      }

      public update_by_types_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_by_types_args DeepCopy()
      {
        var tmp894 = new update_by_types_args();
        if((Plain != null) && __isset.plain)
        {
          tmp894.Plain = this.Plain.DeepCopy();
        }
        tmp894.__isset.plain = this.__isset.plain;
        if((Serial != null) && __isset.serial)
        {
          tmp894.Serial = this.Serial.DeepCopy();
        }
        tmp894.__isset.serial = this.__isset.serial;
        if(__isset.updater_id)
        {
          tmp894.Updater_id = this.Updater_id;
        }
        tmp894.__isset.updater_id = this.__isset.updater_id;
        return tmp894;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    var _map895 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Plain = new Dictionary<long, List<UCell>>(_map895.Count);
                    for(int _i896 = 0; _i896 < _map895.Count; ++_i896)
                    {
                      long _key897;
                      List<UCell> _val898;
                      _key897 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list899 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val898 = new List<UCell>(_list899.Count);
                        for(int _i900 = 0; _i900 < _list899.Count; ++_i900)
                        {
                          UCell _elem901;
                          _elem901 = new UCell();
                          await _elem901.ReadAsync(iprot, cancellationToken);
                          _val898.Add(_elem901);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Plain[_key897] = _val898;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Map)
                {
                  {
                    var _map902 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Serial = new Dictionary<long, List<UCellSerial>>(_map902.Count);
                    for(int _i903 = 0; _i903 < _map902.Count; ++_i903)
                    {
                      long _key904;
                      List<UCellSerial> _val905;
                      _key904 = await iprot.ReadI64Async(cancellationToken);
                      {
                        var _list906 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val905 = new List<UCellSerial>(_list906.Count);
                        for(int _i907 = 0; _i907 < _list906.Count; ++_i907)
                        {
                          UCellSerial _elem908;
                          _elem908 = new UCellSerial();
                          await _elem908.ReadAsync(iprot, cancellationToken);
                          _val905.Add(_elem908);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Serial[_key904] = _val905;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp909 = new TStruct("update_by_types_args");
          await oprot.WriteStructBeginAsync(tmp909, cancellationToken);
          var tmp910 = new TField();
          if((Plain != null) && __isset.plain)
          {
            tmp910.Name = "plain";
            tmp910.Type = TType.Map;
            tmp910.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp910, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Plain.Count), cancellationToken);
            foreach (long _iter911 in Plain.Keys)
            {
              await oprot.WriteI64Async(_iter911, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Plain[_iter911].Count), cancellationToken);
              foreach (UCell _iter912 in Plain[_iter911])
              {
                await _iter912.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Serial != null) && __isset.serial)
          {
            tmp910.Name = "serial";
            tmp910.Type = TType.Map;
            tmp910.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp910, cancellationToken);
            await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Serial.Count), cancellationToken);
            foreach (long _iter913 in Serial.Keys)
            {
              await oprot.WriteI64Async(_iter913, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Serial[_iter913].Count), cancellationToken);
              foreach (UCellSerial _iter914 in Serial[_iter913])
              {
                await _iter914.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp910.Name = "updater_id";
            tmp910.Type = TType.I64;
            tmp910.ID = 3;
            await oprot.WriteFieldBeginAsync(tmp910, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.plain == other.__isset.plain) && ((!__isset.plain) || (global::System.Object.Equals(Plain, other.Plain))))
          && ((__isset.serial == other.__isset.serial) && ((!__isset.serial) || (global::System.Object.Equals(Serial, other.Serial))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (global::System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Plain != null) && __isset.plain)
          {
            hashcode = (hashcode * 397) + Plain.GetHashCode();
          }
          if((Serial != null) && __isset.serial)
          {
            hashcode = (hashcode * 397) + Serial.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp915 = new StringBuilder("update_by_types_args(");
        int tmp916 = 0;
        if((Plain != null) && __isset.plain)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("Plain: ");
          Plain.ToString(tmp915);
        }
        if((Serial != null) && __isset.serial)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("Serial: ");
          Serial.ToString(tmp915);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp916++) { tmp915.Append(", "); }
          tmp915.Append("Updater_id: ");
          Updater_id.ToString(tmp915);
        }
        tmp915.Append(')');
        return tmp915.ToString();
      }
    }


    public partial class update_by_types_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_by_types_result()
      {
      }

      public update_by_types_result DeepCopy()
      {
        var tmp917 = new update_by_types_result();
        if((E != null) && __isset.e)
        {
          tmp917.E = (Exception)this.E.DeepCopy();
        }
        tmp917.__isset.e = this.__isset.e;
        return tmp917;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp918 = new TStruct("update_by_types_result");
          await oprot.WriteStructBeginAsync(tmp918, cancellationToken);
          var tmp919 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp919.Name = "E";
              tmp919.Type = TType.Struct;
              tmp919.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp919, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_by_types_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp920 = new StringBuilder("update_by_types_result(");
        int tmp921 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp921++) { tmp920.Append(", "); }
          tmp920.Append("E: ");
          E.ToString(tmp920);
        }
        tmp920.Append(')');
        return tmp920.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp922 = new mng_column_args();
        if(__isset.func)
        {
          tmp922.Func = this.Func;
        }
        tmp922.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp922.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp922.__isset.schema = this.__isset.schema;
        return tmp922;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp923 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp923, cancellationToken);
          var tmp924 = new TField();
          if(__isset.func)
          {
            tmp924.Name = "func";
            tmp924.Type = TType.I32;
            tmp924.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp924, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp924.Name = "schema";
            tmp924.Type = TType.Struct;
            tmp924.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp924, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (global::System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (global::System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp925 = new StringBuilder("mng_column_args(");
        int tmp926 = 0;
        if(__isset.func)
        {
          if(0 < tmp926++) { tmp925.Append(", "); }
          tmp925.Append("Func: ");
          Func.ToString(tmp925);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp926++) { tmp925.Append(", "); }
          tmp925.Append("Schema: ");
          Schema.ToString(tmp925);
        }
        tmp925.Append(')');
        return tmp925.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp927 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp927.E = (Exception)this.E.DeepCopy();
        }
        tmp927.__isset.e = this.__isset.e;
        return tmp927;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp928 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp928, cancellationToken);
          var tmp929 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp929.Name = "E";
              tmp929.Type = TType.Struct;
              tmp929.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp929, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp930 = new StringBuilder("mng_column_result(");
        int tmp931 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp931++) { tmp930.Append(", "); }
          tmp930.Append("E: ");
          E.ToString(tmp930);
        }
        tmp930.Append(')');
        return tmp930.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp932 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp932.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp932.__isset.spec = this.__isset.spec;
        return tmp932;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp933 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp933, cancellationToken);
          var tmp934 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp934.Name = "spec";
            tmp934.Type = TType.Struct;
            tmp934.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp934, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp935 = new StringBuilder("list_columns_args(");
        int tmp936 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp936++) { tmp935.Append(", "); }
          tmp935.Append("Spec: ");
          Spec.ToString(tmp935);
        }
        tmp935.Append(')');
        return tmp935.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp937 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp937.Success = this.Success.DeepCopy();
        }
        tmp937.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp937.E = (Exception)this.E.DeepCopy();
        }
        tmp937.__isset.e = this.__isset.e;
        return tmp937;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list938 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list938.Count);
                    for(int _i939 = 0; _i939 < _list938.Count; ++_i939)
                    {
                      Schema _elem940;
                      _elem940 = new Schema();
                      await _elem940.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem940);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp941 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp941, cancellationToken);
          var tmp942 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp942.Name = "Success";
              tmp942.Type = TType.List;
              tmp942.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp942, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (Schema _iter943 in Success)
              {
                await _iter943.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp942.Name = "E";
              tmp942.Type = TType.Struct;
              tmp942.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp942, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp944 = new StringBuilder("list_columns_result(");
        int tmp945 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp945++) { tmp944.Append(", "); }
          tmp944.Append("Success: ");
          Success.ToString(tmp944);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp945++) { tmp944.Append(", "); }
          tmp944.Append("E: ");
          E.ToString(tmp944);
        }
        tmp944.Append(')');
        return tmp944.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp946 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp946.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp946.__isset.spec = this.__isset.spec;
        return tmp946;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp947 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp947, cancellationToken);
          var tmp948 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp948.Name = "spec";
            tmp948.Type = TType.Struct;
            tmp948.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp948, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp949 = new StringBuilder("compact_columns_args(");
        int tmp950 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp950++) { tmp949.Append(", "); }
          tmp949.Append("Spec: ");
          Spec.ToString(tmp949);
        }
        tmp949.Append(')');
        return tmp949.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp951 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp951.Success = this.Success.DeepCopy();
        }
        tmp951.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp951.E = (Exception)this.E.DeepCopy();
        }
        tmp951.__isset.e = this.__isset.e;
        return tmp951;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list952 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list952.Count);
                    for(int _i953 = 0; _i953 < _list952.Count; ++_i953)
                    {
                      CompactResult _elem954;
                      _elem954 = new CompactResult();
                      await _elem954.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem954);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp955 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp955, cancellationToken);
          var tmp956 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp956.Name = "Success";
              tmp956.Type = TType.List;
              tmp956.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp956, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (CompactResult _iter957 in Success)
              {
                await _iter957.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp956.Name = "E";
              tmp956.Type = TType.Struct;
              tmp956.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp956, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp958 = new StringBuilder("compact_columns_result(");
        int tmp959 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp959++) { tmp958.Append(", "); }
          tmp958.Append("Success: ");
          Success.ToString(tmp958);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp959++) { tmp958.Append(", "); }
          tmp958.Append("E: ");
          E.ToString(tmp958);
        }
        tmp958.Append(')');
        return tmp958.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp960 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp960.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp960.__isset.spec = this.__isset.spec;
        return tmp960;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp961 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp961, cancellationToken);
          var tmp962 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp962.Name = "spec";
            tmp962.Type = TType.Struct;
            tmp962.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp962, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp963 = new StringBuilder("scan_args(");
        int tmp964 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp964++) { tmp963.Append(", "); }
          tmp963.Append("Spec: ");
          Spec.ToString(tmp963);
        }
        tmp963.Append(')');
        return tmp963.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp965 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp965.Success = (Cells)this.Success.DeepCopy();
        }
        tmp965.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp965.E = (Exception)this.E.DeepCopy();
        }
        tmp965.__isset.e = this.__isset.e;
        return tmp965;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp966 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp966, cancellationToken);
          var tmp967 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp967.Name = "Success";
              tmp967.Type = TType.Struct;
              tmp967.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp967, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp967.Name = "E";
              tmp967.Type = TType.Struct;
              tmp967.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp967, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp968 = new StringBuilder("scan_result(");
        int tmp969 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp969++) { tmp968.Append(", "); }
          tmp968.Append("Success: ");
          Success.ToString(tmp968);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp969++) { tmp968.Append(", "); }
          tmp968.Append("E: ");
          E.ToString(tmp968);
        }
        tmp968.Append(')');
        return tmp968.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp970 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp970.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp970.__isset.spec = this.__isset.spec;
        return tmp970;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp971 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp971, cancellationToken);
          var tmp972 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp972.Name = "spec";
            tmp972.Type = TType.Struct;
            tmp972.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp972, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp973 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp974 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp974++) { tmp973.Append(", "); }
          tmp973.Append("Spec: ");
          Spec.ToString(tmp973);
        }
        tmp973.Append(')');
        return tmp973.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp975 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp975.Success = this.Success.DeepCopy();
        }
        tmp975.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp975.E = (Exception)this.E.DeepCopy();
        }
        tmp975.__isset.e = this.__isset.e;
        return tmp975;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    var _map976 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map976.Count);
                    for(int _i977 = 0; _i977 < _map976.Count; ++_i977)
                    {
                      string _key978;
                      ColCells _val979;
                      _key978 = await iprot.ReadStringAsync(cancellationToken);
                      _val979 = new ColCells();
                      await _val979.ReadAsync(iprot, cancellationToken);
                      Success[_key978] = _val979;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp980 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp980, cancellationToken);
          var tmp981 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp981.Name = "Success";
              tmp981.Type = TType.Map;
              tmp981.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp981, cancellationToken);
              await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
              foreach (string _iter982 in Success.Keys)
              {
                await oprot.WriteStringAsync(_iter982, cancellationToken);
                await Success[_iter982].WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteMapEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp981.Name = "E";
              tmp981.Type = TType.Struct;
              tmp981.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp981, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp983 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp984 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp984++) { tmp983.Append(", "); }
          tmp983.Append("Success: ");
          Success.ToString(tmp983);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp984++) { tmp983.Append(", "); }
          tmp983.Append("E: ");
          E.ToString(tmp983);
        }
        tmp983.Append(')');
        return tmp983.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp985 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp985.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp985.__isset.spec = this.__isset.spec;
        return tmp985;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp986 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp986, cancellationToken);
          var tmp987 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp987.Name = "spec";
            tmp987.Type = TType.Struct;
            tmp987.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp987, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp988 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp989 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp989++) { tmp988.Append(", "); }
          tmp988.Append("Spec: ");
          Spec.ToString(tmp988);
        }
        tmp988.Append(')');
        return tmp988.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp990 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp990.Success = this.Success.DeepCopy();
        }
        tmp990.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp990.E = (Exception)this.E.DeepCopy();
        }
        tmp990.__isset.e = this.__isset.e;
        return tmp990;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    var _list991 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list991.Count);
                    for(int _i992 = 0; _i992 < _list991.Count; ++_i992)
                    {
                      kCells _elem993;
                      _elem993 = new kCells();
                      await _elem993.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem993);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp994 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp994, cancellationToken);
          var tmp995 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp995.Name = "Success";
              tmp995.Type = TType.List;
              tmp995.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
              foreach (kCells _iter996 in Success)
              {
                await _iter996.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp995.Name = "E";
              tmp995.Type = TType.Struct;
              tmp995.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp995, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp997 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp998 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp998++) { tmp997.Append(", "); }
          tmp997.Append("Success: ");
          Success.ToString(tmp997);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp998++) { tmp997.Append(", "); }
          tmp997.Append("E: ");
          E.ToString(tmp997);
        }
        tmp997.Append(')');
        return tmp997.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp999 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp999.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp999.__isset.spec = this.__isset.spec;
        return tmp999;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1000 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp1000, cancellationToken);
          var tmp1001 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1001.Name = "spec";
            tmp1001.Type = TType.Struct;
            tmp1001.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1001, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1002 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp1003 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1003++) { tmp1002.Append(", "); }
          tmp1002.Append("Spec: ");
          Spec.ToString(tmp1002);
        }
        tmp1002.Append(')');
        return tmp1002.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp1004 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp1004.Success = (FCells)this.Success.DeepCopy();
        }
        tmp1004.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1004.E = (Exception)this.E.DeepCopy();
        }
        tmp1004.__isset.e = this.__isset.e;
        return tmp1004;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1005 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp1005, cancellationToken);
          var tmp1006 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1006.Name = "Success";
              tmp1006.Type = TType.Struct;
              tmp1006.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1006, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1006.Name = "E";
              tmp1006.Type = TType.Struct;
              tmp1006.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1006, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1007 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp1008 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1008++) { tmp1007.Append(", "); }
          tmp1007.Append("Success: ");
          Success.ToString(tmp1007);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1008++) { tmp1007.Append(", "); }
          tmp1007.Append("E: ");
          E.ToString(tmp1007);
        }
        tmp1007.Append(')');
        return tmp1007.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp1009 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp1009.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp1009.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp1009.Rslt = this.Rslt;
        }
        tmp1009.__isset.rslt = this.__isset.rslt;
        return tmp1009;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1010 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp1010, cancellationToken);
          var tmp1011 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp1011.Name = "spec";
            tmp1011.Type = TType.Struct;
            tmp1011.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp1011, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp1011.Name = "rslt";
            tmp1011.Type = TType.I32;
            tmp1011.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp1011, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (global::System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (global::System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1012 = new StringBuilder("scan_rslt_on_args(");
        int tmp1013 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp1013++) { tmp1012.Append(", "); }
          tmp1012.Append("Spec: ");
          Spec.ToString(tmp1012);
        }
        if(__isset.rslt)
        {
          if(0 < tmp1013++) { tmp1012.Append(", "); }
          tmp1012.Append("Rslt: ");
          Rslt.ToString(tmp1012);
        }
        tmp1012.Append(')');
        return tmp1012.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp1014 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp1014.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp1014.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp1014.E = (Exception)this.E.DeepCopy();
        }
        tmp1014.__isset.e = this.__isset.e;
        return tmp1014;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp1015 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp1015, cancellationToken);
          var tmp1016 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp1016.Name = "Success";
              tmp1016.Type = TType.Struct;
              tmp1016.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp1016, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp1016.Name = "E";
              tmp1016.Type = TType.Struct;
              tmp1016.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp1016, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (global::System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (global::System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp1017 = new StringBuilder("scan_rslt_on_result(");
        int tmp1018 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp1018++) { tmp1017.Append(", "); }
          tmp1017.Append("Success: ");
          Success.ToString(tmp1017);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp1018++) { tmp1017.Append(", "); }
          tmp1017.Append("E: ");
          E.ToString(tmp1017);
        }
        tmp1017.Append(')');
        return tmp1017.ToString();
      }
    }

  }

}
