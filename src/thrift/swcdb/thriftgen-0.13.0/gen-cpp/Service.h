/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Service_H
#define Service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "Service_types.h"

namespace SWC { namespace Thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServiceIf {
 public:
  virtual ~ServiceIf() {}

  /**
   * The direct SQL method to Manage Column.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_mng_column(const std::string& sql) = 0;

  /**
   * The direct SQL method to List Columns
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_list_columns(Schemas& _return, const std::string& sql) = 0;

  /**
   * The direct SQL method to Compact Columns
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_compact_columns(CompactResults& _return, const std::string& sql) = 0;

  /**
   * The direct SQL method to select cells with result in Cells List.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_select(Cells& _return, const std::string& sql) = 0;

  /**
   * The direct SQL method to select cells with result in Columns Cells map.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_select_rslt_on_column(CCells& _return, const std::string& sql) = 0;

  /**
   * The direct SQL method to select cells with result in Key Cells list.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_select_rslt_on_key(KCells& _return, const std::string& sql) = 0;

  /**
   * The direct SQL method to select cells with result in Fractons Cells.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void sql_select_rslt_on_fraction(FCells& _return, const std::string& sql) = 0;

  /**
   * The SQL method to select cells with result set by the request's type of CellsResult.
   * 
   * @param sql The SQL string to Execute
   * 
   * @param rslt The Type of Cells Result for the response
   */
  virtual void sql_query(CellsGroup& _return, const std::string& sql, const CellsResult::type rslt) = 0;

  /**
   * The direct SQL method to update cells optionally to work with updater-id.
   * 
   * @param sql The SQL string to Execute
   * 
   * @param updater_id The Updater ID to work with
   */
  virtual void sql_update(const std::string& sql, const int64_t updater_id) = 0;

  /**
   * The SQL method to execute any query.
   * 
   * @param sql The SQL string to Execute
   */
  virtual void exec_sql(Result& _return, const std::string& sql) = 0;

  /**
   * The method to Create an Updater ID with buffering size in bytes.
   * 
   * @param buffer_size The buffer size of the Updater
   */
  virtual int64_t updater_create(const int32_t buffer_size) = 0;

  /**
   * The method to Close an Updater ID.
   * 
   * @param id The Updater ID to close
   */
  virtual void updater_close(const int64_t id) = 0;

  /**
   * The direct method to update cells with cell in Update-Columns-Cells,
   * optionally to work with updater-id.
   * 
   * @param cells The Cells to update
   * 
   * @param updater_id The Updater ID to use for write
   */
  virtual void update(const UCCells& cells, const int64_t updater_id) = 0;

  /**
   * The direct method to Manage Column
   * 
   * @param func The Action Function to use
   * 
   * @param schema The Schema for the Action
   */
  virtual void mng_column(const SchemaFunc::type func, const Schema& schema) = 0;

  /**
   * The direct method to List Columns
   * 
   * @param spec The Schemas Specifications to match Schema for response
   */
  virtual void list_columns(Schemas& _return, const SpecSchemas& spec) = 0;

  /**
   * The direct method to Compact Columns
   * 
   * @param spec The Schemas Specifications to match columns to Compact
   */
  virtual void compact_columns(CompactResults& _return, const SpecSchemas& spec) = 0;

  /**
   * The direct method to select cells with result in Cells List.
   * 
   * @param spec The Scan Specifications for the scan
   */
  virtual void scan(Cells& _return, const SpecScan& spec) = 0;

  /**
   * The direct method to select cells with result in Columns Cells map.
   * 
   * @param spec The Scan Specifications for the scan
   */
  virtual void scan_rslt_on_column(CCells& _return, const SpecScan& spec) = 0;

  /**
   * The direct method to select cells with result in Key Cells list.
   * 
   * @param spec The Scan Specifications for the scan
   */
  virtual void scan_rslt_on_key(KCells& _return, const SpecScan& spec) = 0;

  /**
   * The direct method to select cells with result in Fractons Cells.
   * 
   * @param spec The Scan Specifications for the scan
   */
  virtual void scan_rslt_on_fraction(FCells& _return, const SpecScan& spec) = 0;

  /**
   * The method to select cells with result set by the request's type of CellsResult.
   * 
   * @param spec The Scan Specifications for the scan
   * 
   * @param rslt The Type of Cells Result for the response
   */
  virtual void scan_rslt_on(CellsGroup& _return, const SpecScan& spec, const CellsResult::type rslt) = 0;
};

class ServiceIfFactory {
 public:
  typedef ServiceIf Handler;

  virtual ~ServiceIfFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiceIf* /* handler */) = 0;
};

class ServiceIfSingletonFactory : virtual public ServiceIfFactory {
 public:
  ServiceIfSingletonFactory(const ::std::shared_ptr<ServiceIf>& iface) : iface_(iface) {}
  virtual ~ServiceIfSingletonFactory() {}

  virtual ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiceIf* /* handler */) {}

 protected:
  ::std::shared_ptr<ServiceIf> iface_;
};

class ServiceNull : virtual public ServiceIf {
 public:
  virtual ~ServiceNull() {}
  void sql_mng_column(const std::string& /* sql */) {
    return;
  }
  void sql_list_columns(Schemas& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_compact_columns(CompactResults& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_select(Cells& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_select_rslt_on_column(CCells& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_select_rslt_on_key(KCells& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_select_rslt_on_fraction(FCells& /* _return */, const std::string& /* sql */) {
    return;
  }
  void sql_query(CellsGroup& /* _return */, const std::string& /* sql */, const CellsResult::type /* rslt */) {
    return;
  }
  void sql_update(const std::string& /* sql */, const int64_t /* updater_id */) {
    return;
  }
  void exec_sql(Result& /* _return */, const std::string& /* sql */) {
    return;
  }
  int64_t updater_create(const int32_t /* buffer_size */) {
    int64_t _return = 0;
    return _return;
  }
  void updater_close(const int64_t /* id */) {
    return;
  }
  void update(const UCCells& /* cells */, const int64_t /* updater_id */) {
    return;
  }
  void mng_column(const SchemaFunc::type /* func */, const Schema& /* schema */) {
    return;
  }
  void list_columns(Schemas& /* _return */, const SpecSchemas& /* spec */) {
    return;
  }
  void compact_columns(CompactResults& /* _return */, const SpecSchemas& /* spec */) {
    return;
  }
  void scan(Cells& /* _return */, const SpecScan& /* spec */) {
    return;
  }
  void scan_rslt_on_column(CCells& /* _return */, const SpecScan& /* spec */) {
    return;
  }
  void scan_rslt_on_key(KCells& /* _return */, const SpecScan& /* spec */) {
    return;
  }
  void scan_rslt_on_fraction(FCells& /* _return */, const SpecScan& /* spec */) {
    return;
  }
  void scan_rslt_on(CellsGroup& /* _return */, const SpecScan& /* spec */, const CellsResult::type /* rslt */) {
    return;
  }
};

typedef struct _Service_sql_mng_column_args__isset {
  _Service_sql_mng_column_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_mng_column_args__isset;

class Service_sql_mng_column_args {
 public:

  Service_sql_mng_column_args(const Service_sql_mng_column_args&);
  Service_sql_mng_column_args& operator=(const Service_sql_mng_column_args&);
  Service_sql_mng_column_args() : sql() {
  }

  virtual ~Service_sql_mng_column_args() noexcept;
  std::string sql;

  _Service_sql_mng_column_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_mng_column_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_mng_column_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_mng_column_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_mng_column_pargs {
 public:


  virtual ~Service_sql_mng_column_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_mng_column_result__isset {
  _Service_sql_mng_column_result__isset() : e(false) {}
  bool e :1;
} _Service_sql_mng_column_result__isset;

class Service_sql_mng_column_result {
 public:

  Service_sql_mng_column_result(const Service_sql_mng_column_result&);
  Service_sql_mng_column_result& operator=(const Service_sql_mng_column_result&);
  Service_sql_mng_column_result() {
  }

  virtual ~Service_sql_mng_column_result() noexcept;
  Exception e;

  _Service_sql_mng_column_result__isset __isset;

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_mng_column_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_mng_column_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_mng_column_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_mng_column_presult__isset {
  _Service_sql_mng_column_presult__isset() : e(false) {}
  bool e :1;
} _Service_sql_mng_column_presult__isset;

class Service_sql_mng_column_presult {
 public:


  virtual ~Service_sql_mng_column_presult() noexcept;
  Exception e;

  _Service_sql_mng_column_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_list_columns_args__isset {
  _Service_sql_list_columns_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_list_columns_args__isset;

class Service_sql_list_columns_args {
 public:

  Service_sql_list_columns_args(const Service_sql_list_columns_args&);
  Service_sql_list_columns_args& operator=(const Service_sql_list_columns_args&);
  Service_sql_list_columns_args() : sql() {
  }

  virtual ~Service_sql_list_columns_args() noexcept;
  std::string sql;

  _Service_sql_list_columns_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_list_columns_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_list_columns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_list_columns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_list_columns_pargs {
 public:


  virtual ~Service_sql_list_columns_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_list_columns_result__isset {
  _Service_sql_list_columns_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_list_columns_result__isset;

class Service_sql_list_columns_result {
 public:

  Service_sql_list_columns_result(const Service_sql_list_columns_result&);
  Service_sql_list_columns_result& operator=(const Service_sql_list_columns_result&);
  Service_sql_list_columns_result() {
  }

  virtual ~Service_sql_list_columns_result() noexcept;
  Schemas success;
  Exception e;

  _Service_sql_list_columns_result__isset __isset;

  void __set_success(const Schemas& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_list_columns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_list_columns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_list_columns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_list_columns_presult__isset {
  _Service_sql_list_columns_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_list_columns_presult__isset;

class Service_sql_list_columns_presult {
 public:


  virtual ~Service_sql_list_columns_presult() noexcept;
  Schemas* success;
  Exception e;

  _Service_sql_list_columns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_compact_columns_args__isset {
  _Service_sql_compact_columns_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_compact_columns_args__isset;

class Service_sql_compact_columns_args {
 public:

  Service_sql_compact_columns_args(const Service_sql_compact_columns_args&);
  Service_sql_compact_columns_args& operator=(const Service_sql_compact_columns_args&);
  Service_sql_compact_columns_args() : sql() {
  }

  virtual ~Service_sql_compact_columns_args() noexcept;
  std::string sql;

  _Service_sql_compact_columns_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_compact_columns_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_compact_columns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_compact_columns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_compact_columns_pargs {
 public:


  virtual ~Service_sql_compact_columns_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_compact_columns_result__isset {
  _Service_sql_compact_columns_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_compact_columns_result__isset;

class Service_sql_compact_columns_result {
 public:

  Service_sql_compact_columns_result(const Service_sql_compact_columns_result&);
  Service_sql_compact_columns_result& operator=(const Service_sql_compact_columns_result&);
  Service_sql_compact_columns_result() {
  }

  virtual ~Service_sql_compact_columns_result() noexcept;
  CompactResults success;
  Exception e;

  _Service_sql_compact_columns_result__isset __isset;

  void __set_success(const CompactResults& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_compact_columns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_compact_columns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_compact_columns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_compact_columns_presult__isset {
  _Service_sql_compact_columns_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_compact_columns_presult__isset;

class Service_sql_compact_columns_presult {
 public:


  virtual ~Service_sql_compact_columns_presult() noexcept;
  CompactResults* success;
  Exception e;

  _Service_sql_compact_columns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_select_args__isset {
  _Service_sql_select_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_select_args__isset;

class Service_sql_select_args {
 public:

  Service_sql_select_args(const Service_sql_select_args&);
  Service_sql_select_args& operator=(const Service_sql_select_args&);
  Service_sql_select_args() : sql() {
  }

  virtual ~Service_sql_select_args() noexcept;
  std::string sql;

  _Service_sql_select_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_select_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_select_pargs {
 public:


  virtual ~Service_sql_select_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_result__isset {
  _Service_sql_select_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_result__isset;

class Service_sql_select_result {
 public:

  Service_sql_select_result(const Service_sql_select_result&);
  Service_sql_select_result& operator=(const Service_sql_select_result&);
  Service_sql_select_result() {
  }

  virtual ~Service_sql_select_result() noexcept;
  Cells success;
  Exception e;

  _Service_sql_select_result__isset __isset;

  void __set_success(const Cells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_select_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_presult__isset {
  _Service_sql_select_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_presult__isset;

class Service_sql_select_presult {
 public:


  virtual ~Service_sql_select_presult() noexcept;
  Cells* success;
  Exception e;

  _Service_sql_select_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_select_rslt_on_column_args__isset {
  _Service_sql_select_rslt_on_column_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_select_rslt_on_column_args__isset;

class Service_sql_select_rslt_on_column_args {
 public:

  Service_sql_select_rslt_on_column_args(const Service_sql_select_rslt_on_column_args&);
  Service_sql_select_rslt_on_column_args& operator=(const Service_sql_select_rslt_on_column_args&);
  Service_sql_select_rslt_on_column_args() : sql() {
  }

  virtual ~Service_sql_select_rslt_on_column_args() noexcept;
  std::string sql;

  _Service_sql_select_rslt_on_column_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_select_rslt_on_column_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_column_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_column_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_select_rslt_on_column_pargs {
 public:


  virtual ~Service_sql_select_rslt_on_column_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_column_result__isset {
  _Service_sql_select_rslt_on_column_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_column_result__isset;

class Service_sql_select_rslt_on_column_result {
 public:

  Service_sql_select_rslt_on_column_result(const Service_sql_select_rslt_on_column_result&);
  Service_sql_select_rslt_on_column_result& operator=(const Service_sql_select_rslt_on_column_result&);
  Service_sql_select_rslt_on_column_result() {
  }

  virtual ~Service_sql_select_rslt_on_column_result() noexcept;
  CCells success;
  Exception e;

  _Service_sql_select_rslt_on_column_result__isset __isset;

  void __set_success(const CCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_select_rslt_on_column_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_column_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_column_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_column_presult__isset {
  _Service_sql_select_rslt_on_column_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_column_presult__isset;

class Service_sql_select_rslt_on_column_presult {
 public:


  virtual ~Service_sql_select_rslt_on_column_presult() noexcept;
  CCells* success;
  Exception e;

  _Service_sql_select_rslt_on_column_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_select_rslt_on_key_args__isset {
  _Service_sql_select_rslt_on_key_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_select_rslt_on_key_args__isset;

class Service_sql_select_rslt_on_key_args {
 public:

  Service_sql_select_rslt_on_key_args(const Service_sql_select_rslt_on_key_args&);
  Service_sql_select_rslt_on_key_args& operator=(const Service_sql_select_rslt_on_key_args&);
  Service_sql_select_rslt_on_key_args() : sql() {
  }

  virtual ~Service_sql_select_rslt_on_key_args() noexcept;
  std::string sql;

  _Service_sql_select_rslt_on_key_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_select_rslt_on_key_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_select_rslt_on_key_pargs {
 public:


  virtual ~Service_sql_select_rslt_on_key_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_key_result__isset {
  _Service_sql_select_rslt_on_key_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_key_result__isset;

class Service_sql_select_rslt_on_key_result {
 public:

  Service_sql_select_rslt_on_key_result(const Service_sql_select_rslt_on_key_result&);
  Service_sql_select_rslt_on_key_result& operator=(const Service_sql_select_rslt_on_key_result&);
  Service_sql_select_rslt_on_key_result() {
  }

  virtual ~Service_sql_select_rslt_on_key_result() noexcept;
  KCells success;
  Exception e;

  _Service_sql_select_rslt_on_key_result__isset __isset;

  void __set_success(const KCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_select_rslt_on_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_key_presult__isset {
  _Service_sql_select_rslt_on_key_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_key_presult__isset;

class Service_sql_select_rslt_on_key_presult {
 public:


  virtual ~Service_sql_select_rslt_on_key_presult() noexcept;
  KCells* success;
  Exception e;

  _Service_sql_select_rslt_on_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_select_rslt_on_fraction_args__isset {
  _Service_sql_select_rslt_on_fraction_args__isset() : sql(false) {}
  bool sql :1;
} _Service_sql_select_rslt_on_fraction_args__isset;

class Service_sql_select_rslt_on_fraction_args {
 public:

  Service_sql_select_rslt_on_fraction_args(const Service_sql_select_rslt_on_fraction_args&);
  Service_sql_select_rslt_on_fraction_args& operator=(const Service_sql_select_rslt_on_fraction_args&);
  Service_sql_select_rslt_on_fraction_args() : sql() {
  }

  virtual ~Service_sql_select_rslt_on_fraction_args() noexcept;
  std::string sql;

  _Service_sql_select_rslt_on_fraction_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_sql_select_rslt_on_fraction_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_fraction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_fraction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_select_rslt_on_fraction_pargs {
 public:


  virtual ~Service_sql_select_rslt_on_fraction_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_fraction_result__isset {
  _Service_sql_select_rslt_on_fraction_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_fraction_result__isset;

class Service_sql_select_rslt_on_fraction_result {
 public:

  Service_sql_select_rslt_on_fraction_result(const Service_sql_select_rslt_on_fraction_result&);
  Service_sql_select_rslt_on_fraction_result& operator=(const Service_sql_select_rslt_on_fraction_result&);
  Service_sql_select_rslt_on_fraction_result() {
  }

  virtual ~Service_sql_select_rslt_on_fraction_result() noexcept;
  FCells success;
  Exception e;

  _Service_sql_select_rslt_on_fraction_result__isset __isset;

  void __set_success(const FCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_select_rslt_on_fraction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_select_rslt_on_fraction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_select_rslt_on_fraction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_select_rslt_on_fraction_presult__isset {
  _Service_sql_select_rslt_on_fraction_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_select_rslt_on_fraction_presult__isset;

class Service_sql_select_rslt_on_fraction_presult {
 public:


  virtual ~Service_sql_select_rslt_on_fraction_presult() noexcept;
  FCells* success;
  Exception e;

  _Service_sql_select_rslt_on_fraction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_query_args__isset {
  _Service_sql_query_args__isset() : sql(false), rslt(false) {}
  bool sql :1;
  bool rslt :1;
} _Service_sql_query_args__isset;

class Service_sql_query_args {
 public:

  Service_sql_query_args(const Service_sql_query_args&);
  Service_sql_query_args& operator=(const Service_sql_query_args&);
  Service_sql_query_args() : sql(), rslt((CellsResult::type)0) {
  }

  virtual ~Service_sql_query_args() noexcept;
  std::string sql;
  CellsResult::type rslt;

  _Service_sql_query_args__isset __isset;

  void __set_sql(const std::string& val);

  void __set_rslt(const CellsResult::type val);

  bool operator == (const Service_sql_query_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    if (!(rslt == rhs.rslt))
      return false;
    return true;
  }
  bool operator != (const Service_sql_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_query_pargs {
 public:


  virtual ~Service_sql_query_pargs() noexcept;
  const std::string* sql;
  const CellsResult::type* rslt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_query_result__isset {
  _Service_sql_query_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_query_result__isset;

class Service_sql_query_result {
 public:

  Service_sql_query_result(const Service_sql_query_result&);
  Service_sql_query_result& operator=(const Service_sql_query_result&);
  Service_sql_query_result() {
  }

  virtual ~Service_sql_query_result() noexcept;
  CellsGroup success;
  Exception e;

  _Service_sql_query_result__isset __isset;

  void __set_success(const CellsGroup& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_query_presult__isset {
  _Service_sql_query_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_sql_query_presult__isset;

class Service_sql_query_presult {
 public:


  virtual ~Service_sql_query_presult() noexcept;
  CellsGroup* success;
  Exception e;

  _Service_sql_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_sql_update_args__isset {
  _Service_sql_update_args__isset() : sql(false), updater_id(true) {}
  bool sql :1;
  bool updater_id :1;
} _Service_sql_update_args__isset;

class Service_sql_update_args {
 public:

  Service_sql_update_args(const Service_sql_update_args&);
  Service_sql_update_args& operator=(const Service_sql_update_args&);
  Service_sql_update_args() : sql(), updater_id(0LL) {
  }

  virtual ~Service_sql_update_args() noexcept;
  std::string sql;
  int64_t updater_id;

  _Service_sql_update_args__isset __isset;

  void __set_sql(const std::string& val);

  void __set_updater_id(const int64_t val);

  bool operator == (const Service_sql_update_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    if (!(updater_id == rhs.updater_id))
      return false;
    return true;
  }
  bool operator != (const Service_sql_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_sql_update_pargs {
 public:


  virtual ~Service_sql_update_pargs() noexcept;
  const std::string* sql;
  const int64_t* updater_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_update_result__isset {
  _Service_sql_update_result__isset() : e(false) {}
  bool e :1;
} _Service_sql_update_result__isset;

class Service_sql_update_result {
 public:

  Service_sql_update_result(const Service_sql_update_result&);
  Service_sql_update_result& operator=(const Service_sql_update_result&);
  Service_sql_update_result() {
  }

  virtual ~Service_sql_update_result() noexcept;
  Exception e;

  _Service_sql_update_result__isset __isset;

  void __set_e(const Exception& val);

  bool operator == (const Service_sql_update_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_sql_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_sql_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_sql_update_presult__isset {
  _Service_sql_update_presult__isset() : e(false) {}
  bool e :1;
} _Service_sql_update_presult__isset;

class Service_sql_update_presult {
 public:


  virtual ~Service_sql_update_presult() noexcept;
  Exception e;

  _Service_sql_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_exec_sql_args__isset {
  _Service_exec_sql_args__isset() : sql(false) {}
  bool sql :1;
} _Service_exec_sql_args__isset;

class Service_exec_sql_args {
 public:

  Service_exec_sql_args(const Service_exec_sql_args&);
  Service_exec_sql_args& operator=(const Service_exec_sql_args&);
  Service_exec_sql_args() : sql() {
  }

  virtual ~Service_exec_sql_args() noexcept;
  std::string sql;

  _Service_exec_sql_args__isset __isset;

  void __set_sql(const std::string& val);

  bool operator == (const Service_exec_sql_args & rhs) const
  {
    if (!(sql == rhs.sql))
      return false;
    return true;
  }
  bool operator != (const Service_exec_sql_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_exec_sql_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_exec_sql_pargs {
 public:


  virtual ~Service_exec_sql_pargs() noexcept;
  const std::string* sql;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_exec_sql_result__isset {
  _Service_exec_sql_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_exec_sql_result__isset;

class Service_exec_sql_result {
 public:

  Service_exec_sql_result(const Service_exec_sql_result&);
  Service_exec_sql_result& operator=(const Service_exec_sql_result&);
  Service_exec_sql_result() {
  }

  virtual ~Service_exec_sql_result() noexcept;
  Result success;
  Exception e;

  _Service_exec_sql_result__isset __isset;

  void __set_success(const Result& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_exec_sql_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_exec_sql_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_exec_sql_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_exec_sql_presult__isset {
  _Service_exec_sql_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_exec_sql_presult__isset;

class Service_exec_sql_presult {
 public:


  virtual ~Service_exec_sql_presult() noexcept;
  Result* success;
  Exception e;

  _Service_exec_sql_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_updater_create_args__isset {
  _Service_updater_create_args__isset() : buffer_size(false) {}
  bool buffer_size :1;
} _Service_updater_create_args__isset;

class Service_updater_create_args {
 public:

  Service_updater_create_args(const Service_updater_create_args&);
  Service_updater_create_args& operator=(const Service_updater_create_args&);
  Service_updater_create_args() : buffer_size(0) {
  }

  virtual ~Service_updater_create_args() noexcept;
  int32_t buffer_size;

  _Service_updater_create_args__isset __isset;

  void __set_buffer_size(const int32_t val);

  bool operator == (const Service_updater_create_args & rhs) const
  {
    if (!(buffer_size == rhs.buffer_size))
      return false;
    return true;
  }
  bool operator != (const Service_updater_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_updater_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_updater_create_pargs {
 public:


  virtual ~Service_updater_create_pargs() noexcept;
  const int32_t* buffer_size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_updater_create_result__isset {
  _Service_updater_create_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_updater_create_result__isset;

class Service_updater_create_result {
 public:

  Service_updater_create_result(const Service_updater_create_result&);
  Service_updater_create_result& operator=(const Service_updater_create_result&);
  Service_updater_create_result() : success(0) {
  }

  virtual ~Service_updater_create_result() noexcept;
  int64_t success;
  Exception e;

  _Service_updater_create_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const Exception& val);

  bool operator == (const Service_updater_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_updater_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_updater_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_updater_create_presult__isset {
  _Service_updater_create_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_updater_create_presult__isset;

class Service_updater_create_presult {
 public:


  virtual ~Service_updater_create_presult() noexcept;
  int64_t* success;
  Exception e;

  _Service_updater_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_updater_close_args__isset {
  _Service_updater_close_args__isset() : id(false) {}
  bool id :1;
} _Service_updater_close_args__isset;

class Service_updater_close_args {
 public:

  Service_updater_close_args(const Service_updater_close_args&);
  Service_updater_close_args& operator=(const Service_updater_close_args&);
  Service_updater_close_args() : id(0) {
  }

  virtual ~Service_updater_close_args() noexcept;
  int64_t id;

  _Service_updater_close_args__isset __isset;

  void __set_id(const int64_t val);

  bool operator == (const Service_updater_close_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const Service_updater_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_updater_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_updater_close_pargs {
 public:


  virtual ~Service_updater_close_pargs() noexcept;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_updater_close_result__isset {
  _Service_updater_close_result__isset() : e(false) {}
  bool e :1;
} _Service_updater_close_result__isset;

class Service_updater_close_result {
 public:

  Service_updater_close_result(const Service_updater_close_result&);
  Service_updater_close_result& operator=(const Service_updater_close_result&);
  Service_updater_close_result() {
  }

  virtual ~Service_updater_close_result() noexcept;
  Exception e;

  _Service_updater_close_result__isset __isset;

  void __set_e(const Exception& val);

  bool operator == (const Service_updater_close_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_updater_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_updater_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_updater_close_presult__isset {
  _Service_updater_close_presult__isset() : e(false) {}
  bool e :1;
} _Service_updater_close_presult__isset;

class Service_updater_close_presult {
 public:


  virtual ~Service_updater_close_presult() noexcept;
  Exception e;

  _Service_updater_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_update_args__isset {
  _Service_update_args__isset() : cells(false), updater_id(true) {}
  bool cells :1;
  bool updater_id :1;
} _Service_update_args__isset;

class Service_update_args {
 public:

  Service_update_args(const Service_update_args&);
  Service_update_args& operator=(const Service_update_args&);
  Service_update_args() : updater_id(0LL) {
  }

  virtual ~Service_update_args() noexcept;
  UCCells cells;
  int64_t updater_id;

  _Service_update_args__isset __isset;

  void __set_cells(const UCCells& val);

  void __set_updater_id(const int64_t val);

  bool operator == (const Service_update_args & rhs) const
  {
    if (!(cells == rhs.cells))
      return false;
    if (!(updater_id == rhs.updater_id))
      return false;
    return true;
  }
  bool operator != (const Service_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_update_pargs {
 public:


  virtual ~Service_update_pargs() noexcept;
  const UCCells* cells;
  const int64_t* updater_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_update_result__isset {
  _Service_update_result__isset() : e(false) {}
  bool e :1;
} _Service_update_result__isset;

class Service_update_result {
 public:

  Service_update_result(const Service_update_result&);
  Service_update_result& operator=(const Service_update_result&);
  Service_update_result() {
  }

  virtual ~Service_update_result() noexcept;
  Exception e;

  _Service_update_result__isset __isset;

  void __set_e(const Exception& val);

  bool operator == (const Service_update_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_update_presult__isset {
  _Service_update_presult__isset() : e(false) {}
  bool e :1;
} _Service_update_presult__isset;

class Service_update_presult {
 public:


  virtual ~Service_update_presult() noexcept;
  Exception e;

  _Service_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_mng_column_args__isset {
  _Service_mng_column_args__isset() : func(false), schema(false) {}
  bool func :1;
  bool schema :1;
} _Service_mng_column_args__isset;

class Service_mng_column_args {
 public:

  Service_mng_column_args(const Service_mng_column_args&);
  Service_mng_column_args& operator=(const Service_mng_column_args&);
  Service_mng_column_args() : func((SchemaFunc::type)0) {
  }

  virtual ~Service_mng_column_args() noexcept;
  SchemaFunc::type func;
  Schema schema;

  _Service_mng_column_args__isset __isset;

  void __set_func(const SchemaFunc::type val);

  void __set_schema(const Schema& val);

  bool operator == (const Service_mng_column_args & rhs) const
  {
    if (!(func == rhs.func))
      return false;
    if (!(schema == rhs.schema))
      return false;
    return true;
  }
  bool operator != (const Service_mng_column_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_mng_column_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_mng_column_pargs {
 public:


  virtual ~Service_mng_column_pargs() noexcept;
  const SchemaFunc::type* func;
  const Schema* schema;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_mng_column_result__isset {
  _Service_mng_column_result__isset() : e(false) {}
  bool e :1;
} _Service_mng_column_result__isset;

class Service_mng_column_result {
 public:

  Service_mng_column_result(const Service_mng_column_result&);
  Service_mng_column_result& operator=(const Service_mng_column_result&);
  Service_mng_column_result() {
  }

  virtual ~Service_mng_column_result() noexcept;
  Exception e;

  _Service_mng_column_result__isset __isset;

  void __set_e(const Exception& val);

  bool operator == (const Service_mng_column_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_mng_column_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_mng_column_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_mng_column_presult__isset {
  _Service_mng_column_presult__isset() : e(false) {}
  bool e :1;
} _Service_mng_column_presult__isset;

class Service_mng_column_presult {
 public:


  virtual ~Service_mng_column_presult() noexcept;
  Exception e;

  _Service_mng_column_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_list_columns_args__isset {
  _Service_list_columns_args__isset() : spec(false) {}
  bool spec :1;
} _Service_list_columns_args__isset;

class Service_list_columns_args {
 public:

  Service_list_columns_args(const Service_list_columns_args&);
  Service_list_columns_args& operator=(const Service_list_columns_args&);
  Service_list_columns_args() {
  }

  virtual ~Service_list_columns_args() noexcept;
  SpecSchemas spec;

  _Service_list_columns_args__isset __isset;

  void __set_spec(const SpecSchemas& val);

  bool operator == (const Service_list_columns_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_list_columns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_list_columns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_list_columns_pargs {
 public:


  virtual ~Service_list_columns_pargs() noexcept;
  const SpecSchemas* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_list_columns_result__isset {
  _Service_list_columns_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_list_columns_result__isset;

class Service_list_columns_result {
 public:

  Service_list_columns_result(const Service_list_columns_result&);
  Service_list_columns_result& operator=(const Service_list_columns_result&);
  Service_list_columns_result() {
  }

  virtual ~Service_list_columns_result() noexcept;
  Schemas success;
  Exception e;

  _Service_list_columns_result__isset __isset;

  void __set_success(const Schemas& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_list_columns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_list_columns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_list_columns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_list_columns_presult__isset {
  _Service_list_columns_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_list_columns_presult__isset;

class Service_list_columns_presult {
 public:


  virtual ~Service_list_columns_presult() noexcept;
  Schemas* success;
  Exception e;

  _Service_list_columns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_compact_columns_args__isset {
  _Service_compact_columns_args__isset() : spec(false) {}
  bool spec :1;
} _Service_compact_columns_args__isset;

class Service_compact_columns_args {
 public:

  Service_compact_columns_args(const Service_compact_columns_args&);
  Service_compact_columns_args& operator=(const Service_compact_columns_args&);
  Service_compact_columns_args() {
  }

  virtual ~Service_compact_columns_args() noexcept;
  SpecSchemas spec;

  _Service_compact_columns_args__isset __isset;

  void __set_spec(const SpecSchemas& val);

  bool operator == (const Service_compact_columns_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_compact_columns_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_compact_columns_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_compact_columns_pargs {
 public:


  virtual ~Service_compact_columns_pargs() noexcept;
  const SpecSchemas* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_compact_columns_result__isset {
  _Service_compact_columns_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_compact_columns_result__isset;

class Service_compact_columns_result {
 public:

  Service_compact_columns_result(const Service_compact_columns_result&);
  Service_compact_columns_result& operator=(const Service_compact_columns_result&);
  Service_compact_columns_result() {
  }

  virtual ~Service_compact_columns_result() noexcept;
  CompactResults success;
  Exception e;

  _Service_compact_columns_result__isset __isset;

  void __set_success(const CompactResults& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_compact_columns_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_compact_columns_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_compact_columns_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_compact_columns_presult__isset {
  _Service_compact_columns_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_compact_columns_presult__isset;

class Service_compact_columns_presult {
 public:


  virtual ~Service_compact_columns_presult() noexcept;
  CompactResults* success;
  Exception e;

  _Service_compact_columns_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_scan_args__isset {
  _Service_scan_args__isset() : spec(false) {}
  bool spec :1;
} _Service_scan_args__isset;

class Service_scan_args {
 public:

  Service_scan_args(const Service_scan_args&);
  Service_scan_args& operator=(const Service_scan_args&);
  Service_scan_args() {
  }

  virtual ~Service_scan_args() noexcept;
  SpecScan spec;

  _Service_scan_args__isset __isset;

  void __set_spec(const SpecScan& val);

  bool operator == (const Service_scan_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_scan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_scan_pargs {
 public:


  virtual ~Service_scan_pargs() noexcept;
  const SpecScan* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_result__isset {
  _Service_scan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_result__isset;

class Service_scan_result {
 public:

  Service_scan_result(const Service_scan_result&);
  Service_scan_result& operator=(const Service_scan_result&);
  Service_scan_result() {
  }

  virtual ~Service_scan_result() noexcept;
  Cells success;
  Exception e;

  _Service_scan_result__isset __isset;

  void __set_success(const Cells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_scan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_scan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_presult__isset {
  _Service_scan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_presult__isset;

class Service_scan_presult {
 public:


  virtual ~Service_scan_presult() noexcept;
  Cells* success;
  Exception e;

  _Service_scan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_scan_rslt_on_column_args__isset {
  _Service_scan_rslt_on_column_args__isset() : spec(false) {}
  bool spec :1;
} _Service_scan_rslt_on_column_args__isset;

class Service_scan_rslt_on_column_args {
 public:

  Service_scan_rslt_on_column_args(const Service_scan_rslt_on_column_args&);
  Service_scan_rslt_on_column_args& operator=(const Service_scan_rslt_on_column_args&);
  Service_scan_rslt_on_column_args() {
  }

  virtual ~Service_scan_rslt_on_column_args() noexcept;
  SpecScan spec;

  _Service_scan_rslt_on_column_args__isset __isset;

  void __set_spec(const SpecScan& val);

  bool operator == (const Service_scan_rslt_on_column_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_column_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_column_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_scan_rslt_on_column_pargs {
 public:


  virtual ~Service_scan_rslt_on_column_pargs() noexcept;
  const SpecScan* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_column_result__isset {
  _Service_scan_rslt_on_column_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_column_result__isset;

class Service_scan_rslt_on_column_result {
 public:

  Service_scan_rslt_on_column_result(const Service_scan_rslt_on_column_result&);
  Service_scan_rslt_on_column_result& operator=(const Service_scan_rslt_on_column_result&);
  Service_scan_rslt_on_column_result() {
  }

  virtual ~Service_scan_rslt_on_column_result() noexcept;
  CCells success;
  Exception e;

  _Service_scan_rslt_on_column_result__isset __isset;

  void __set_success(const CCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_scan_rslt_on_column_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_column_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_column_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_column_presult__isset {
  _Service_scan_rslt_on_column_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_column_presult__isset;

class Service_scan_rslt_on_column_presult {
 public:


  virtual ~Service_scan_rslt_on_column_presult() noexcept;
  CCells* success;
  Exception e;

  _Service_scan_rslt_on_column_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_scan_rslt_on_key_args__isset {
  _Service_scan_rslt_on_key_args__isset() : spec(false) {}
  bool spec :1;
} _Service_scan_rslt_on_key_args__isset;

class Service_scan_rslt_on_key_args {
 public:

  Service_scan_rslt_on_key_args(const Service_scan_rslt_on_key_args&);
  Service_scan_rslt_on_key_args& operator=(const Service_scan_rslt_on_key_args&);
  Service_scan_rslt_on_key_args() {
  }

  virtual ~Service_scan_rslt_on_key_args() noexcept;
  SpecScan spec;

  _Service_scan_rslt_on_key_args__isset __isset;

  void __set_spec(const SpecScan& val);

  bool operator == (const Service_scan_rslt_on_key_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_scan_rslt_on_key_pargs {
 public:


  virtual ~Service_scan_rslt_on_key_pargs() noexcept;
  const SpecScan* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_key_result__isset {
  _Service_scan_rslt_on_key_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_key_result__isset;

class Service_scan_rslt_on_key_result {
 public:

  Service_scan_rslt_on_key_result(const Service_scan_rslt_on_key_result&);
  Service_scan_rslt_on_key_result& operator=(const Service_scan_rslt_on_key_result&);
  Service_scan_rslt_on_key_result() {
  }

  virtual ~Service_scan_rslt_on_key_result() noexcept;
  KCells success;
  Exception e;

  _Service_scan_rslt_on_key_result__isset __isset;

  void __set_success(const KCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_scan_rslt_on_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_key_presult__isset {
  _Service_scan_rslt_on_key_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_key_presult__isset;

class Service_scan_rslt_on_key_presult {
 public:


  virtual ~Service_scan_rslt_on_key_presult() noexcept;
  KCells* success;
  Exception e;

  _Service_scan_rslt_on_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_scan_rslt_on_fraction_args__isset {
  _Service_scan_rslt_on_fraction_args__isset() : spec(false) {}
  bool spec :1;
} _Service_scan_rslt_on_fraction_args__isset;

class Service_scan_rslt_on_fraction_args {
 public:

  Service_scan_rslt_on_fraction_args(const Service_scan_rslt_on_fraction_args&);
  Service_scan_rslt_on_fraction_args& operator=(const Service_scan_rslt_on_fraction_args&);
  Service_scan_rslt_on_fraction_args() {
  }

  virtual ~Service_scan_rslt_on_fraction_args() noexcept;
  SpecScan spec;

  _Service_scan_rslt_on_fraction_args__isset __isset;

  void __set_spec(const SpecScan& val);

  bool operator == (const Service_scan_rslt_on_fraction_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_fraction_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_fraction_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_scan_rslt_on_fraction_pargs {
 public:


  virtual ~Service_scan_rslt_on_fraction_pargs() noexcept;
  const SpecScan* spec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_fraction_result__isset {
  _Service_scan_rslt_on_fraction_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_fraction_result__isset;

class Service_scan_rslt_on_fraction_result {
 public:

  Service_scan_rslt_on_fraction_result(const Service_scan_rslt_on_fraction_result&);
  Service_scan_rslt_on_fraction_result& operator=(const Service_scan_rslt_on_fraction_result&);
  Service_scan_rslt_on_fraction_result() {
  }

  virtual ~Service_scan_rslt_on_fraction_result() noexcept;
  FCells success;
  Exception e;

  _Service_scan_rslt_on_fraction_result__isset __isset;

  void __set_success(const FCells& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_scan_rslt_on_fraction_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_fraction_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_fraction_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_fraction_presult__isset {
  _Service_scan_rslt_on_fraction_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_fraction_presult__isset;

class Service_scan_rslt_on_fraction_presult {
 public:


  virtual ~Service_scan_rslt_on_fraction_presult() noexcept;
  FCells* success;
  Exception e;

  _Service_scan_rslt_on_fraction_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Service_scan_rslt_on_args__isset {
  _Service_scan_rslt_on_args__isset() : spec(false), rslt(false) {}
  bool spec :1;
  bool rslt :1;
} _Service_scan_rslt_on_args__isset;

class Service_scan_rslt_on_args {
 public:

  Service_scan_rslt_on_args(const Service_scan_rslt_on_args&);
  Service_scan_rslt_on_args& operator=(const Service_scan_rslt_on_args&);
  Service_scan_rslt_on_args() : rslt((CellsResult::type)0) {
  }

  virtual ~Service_scan_rslt_on_args() noexcept;
  SpecScan spec;
  CellsResult::type rslt;

  _Service_scan_rslt_on_args__isset __isset;

  void __set_spec(const SpecScan& val);

  void __set_rslt(const CellsResult::type val);

  bool operator == (const Service_scan_rslt_on_args & rhs) const
  {
    if (!(spec == rhs.spec))
      return false;
    if (!(rslt == rhs.rslt))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Service_scan_rslt_on_pargs {
 public:


  virtual ~Service_scan_rslt_on_pargs() noexcept;
  const SpecScan* spec;
  const CellsResult::type* rslt;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_result__isset {
  _Service_scan_rslt_on_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_result__isset;

class Service_scan_rslt_on_result {
 public:

  Service_scan_rslt_on_result(const Service_scan_rslt_on_result&);
  Service_scan_rslt_on_result& operator=(const Service_scan_rslt_on_result&);
  Service_scan_rslt_on_result() {
  }

  virtual ~Service_scan_rslt_on_result() noexcept;
  CellsGroup success;
  Exception e;

  _Service_scan_rslt_on_result__isset __isset;

  void __set_success(const CellsGroup& val);

  void __set_e(const Exception& val);

  bool operator == (const Service_scan_rslt_on_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const Service_scan_rslt_on_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Service_scan_rslt_on_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Service_scan_rslt_on_presult__isset {
  _Service_scan_rslt_on_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _Service_scan_rslt_on_presult__isset;

class Service_scan_rslt_on_presult {
 public:


  virtual ~Service_scan_rslt_on_presult() noexcept;
  CellsGroup* success;
  Exception e;

  _Service_scan_rslt_on_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiceClient : virtual public ServiceIf {
 public:
  ServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sql_mng_column(const std::string& sql);
  void send_sql_mng_column(const std::string& sql);
  void recv_sql_mng_column();
  void sql_list_columns(Schemas& _return, const std::string& sql);
  void send_sql_list_columns(const std::string& sql);
  void recv_sql_list_columns(Schemas& _return);
  void sql_compact_columns(CompactResults& _return, const std::string& sql);
  void send_sql_compact_columns(const std::string& sql);
  void recv_sql_compact_columns(CompactResults& _return);
  void sql_select(Cells& _return, const std::string& sql);
  void send_sql_select(const std::string& sql);
  void recv_sql_select(Cells& _return);
  void sql_select_rslt_on_column(CCells& _return, const std::string& sql);
  void send_sql_select_rslt_on_column(const std::string& sql);
  void recv_sql_select_rslt_on_column(CCells& _return);
  void sql_select_rslt_on_key(KCells& _return, const std::string& sql);
  void send_sql_select_rslt_on_key(const std::string& sql);
  void recv_sql_select_rslt_on_key(KCells& _return);
  void sql_select_rslt_on_fraction(FCells& _return, const std::string& sql);
  void send_sql_select_rslt_on_fraction(const std::string& sql);
  void recv_sql_select_rslt_on_fraction(FCells& _return);
  void sql_query(CellsGroup& _return, const std::string& sql, const CellsResult::type rslt);
  void send_sql_query(const std::string& sql, const CellsResult::type rslt);
  void recv_sql_query(CellsGroup& _return);
  void sql_update(const std::string& sql, const int64_t updater_id);
  void send_sql_update(const std::string& sql, const int64_t updater_id);
  void recv_sql_update();
  void exec_sql(Result& _return, const std::string& sql);
  void send_exec_sql(const std::string& sql);
  void recv_exec_sql(Result& _return);
  int64_t updater_create(const int32_t buffer_size);
  void send_updater_create(const int32_t buffer_size);
  int64_t recv_updater_create();
  void updater_close(const int64_t id);
  void send_updater_close(const int64_t id);
  void recv_updater_close();
  void update(const UCCells& cells, const int64_t updater_id);
  void send_update(const UCCells& cells, const int64_t updater_id);
  void recv_update();
  void mng_column(const SchemaFunc::type func, const Schema& schema);
  void send_mng_column(const SchemaFunc::type func, const Schema& schema);
  void recv_mng_column();
  void list_columns(Schemas& _return, const SpecSchemas& spec);
  void send_list_columns(const SpecSchemas& spec);
  void recv_list_columns(Schemas& _return);
  void compact_columns(CompactResults& _return, const SpecSchemas& spec);
  void send_compact_columns(const SpecSchemas& spec);
  void recv_compact_columns(CompactResults& _return);
  void scan(Cells& _return, const SpecScan& spec);
  void send_scan(const SpecScan& spec);
  void recv_scan(Cells& _return);
  void scan_rslt_on_column(CCells& _return, const SpecScan& spec);
  void send_scan_rslt_on_column(const SpecScan& spec);
  void recv_scan_rslt_on_column(CCells& _return);
  void scan_rslt_on_key(KCells& _return, const SpecScan& spec);
  void send_scan_rslt_on_key(const SpecScan& spec);
  void recv_scan_rslt_on_key(KCells& _return);
  void scan_rslt_on_fraction(FCells& _return, const SpecScan& spec);
  void send_scan_rslt_on_fraction(const SpecScan& spec);
  void recv_scan_rslt_on_fraction(FCells& _return);
  void scan_rslt_on(CellsGroup& _return, const SpecScan& spec, const CellsResult::type rslt);
  void send_scan_rslt_on(const SpecScan& spec, const CellsResult::type rslt);
  void recv_scan_rslt_on(CellsGroup& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_sql_mng_column(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_list_columns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_compact_columns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_select(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_select_rslt_on_column(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_select_rslt_on_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_select_rslt_on_fraction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sql_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exec_sql(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updater_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updater_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mng_column(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_list_columns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_compact_columns(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan_rslt_on_column(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan_rslt_on_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan_rslt_on_fraction(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scan_rslt_on(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiceProcessor(::std::shared_ptr<ServiceIf> iface) :
    iface_(iface) {
    processMap_["sql_mng_column"] = &ServiceProcessor::process_sql_mng_column;
    processMap_["sql_list_columns"] = &ServiceProcessor::process_sql_list_columns;
    processMap_["sql_compact_columns"] = &ServiceProcessor::process_sql_compact_columns;
    processMap_["sql_select"] = &ServiceProcessor::process_sql_select;
    processMap_["sql_select_rslt_on_column"] = &ServiceProcessor::process_sql_select_rslt_on_column;
    processMap_["sql_select_rslt_on_key"] = &ServiceProcessor::process_sql_select_rslt_on_key;
    processMap_["sql_select_rslt_on_fraction"] = &ServiceProcessor::process_sql_select_rslt_on_fraction;
    processMap_["sql_query"] = &ServiceProcessor::process_sql_query;
    processMap_["sql_update"] = &ServiceProcessor::process_sql_update;
    processMap_["exec_sql"] = &ServiceProcessor::process_exec_sql;
    processMap_["updater_create"] = &ServiceProcessor::process_updater_create;
    processMap_["updater_close"] = &ServiceProcessor::process_updater_close;
    processMap_["update"] = &ServiceProcessor::process_update;
    processMap_["mng_column"] = &ServiceProcessor::process_mng_column;
    processMap_["list_columns"] = &ServiceProcessor::process_list_columns;
    processMap_["compact_columns"] = &ServiceProcessor::process_compact_columns;
    processMap_["scan"] = &ServiceProcessor::process_scan;
    processMap_["scan_rslt_on_column"] = &ServiceProcessor::process_scan_rslt_on_column;
    processMap_["scan_rslt_on_key"] = &ServiceProcessor::process_scan_rslt_on_key;
    processMap_["scan_rslt_on_fraction"] = &ServiceProcessor::process_scan_rslt_on_fraction;
    processMap_["scan_rslt_on"] = &ServiceProcessor::process_scan_rslt_on;
  }

  virtual ~ServiceProcessor() {}
};

class ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiceProcessorFactory(const ::std::shared_ptr< ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< ServiceIfFactory > handlerFactory_;
};

class ServiceMultiface : virtual public ServiceIf {
 public:
  ServiceMultiface(std::vector<std::shared_ptr<ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<ServiceIf> > ifaces_;
  ServiceMultiface() {}
  void add(::std::shared_ptr<ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void sql_mng_column(const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_mng_column(sql);
    }
    ifaces_[i]->sql_mng_column(sql);
  }

  void sql_list_columns(Schemas& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_list_columns(_return, sql);
    }
    ifaces_[i]->sql_list_columns(_return, sql);
    return;
  }

  void sql_compact_columns(CompactResults& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_compact_columns(_return, sql);
    }
    ifaces_[i]->sql_compact_columns(_return, sql);
    return;
  }

  void sql_select(Cells& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_select(_return, sql);
    }
    ifaces_[i]->sql_select(_return, sql);
    return;
  }

  void sql_select_rslt_on_column(CCells& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_select_rslt_on_column(_return, sql);
    }
    ifaces_[i]->sql_select_rslt_on_column(_return, sql);
    return;
  }

  void sql_select_rslt_on_key(KCells& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_select_rslt_on_key(_return, sql);
    }
    ifaces_[i]->sql_select_rslt_on_key(_return, sql);
    return;
  }

  void sql_select_rslt_on_fraction(FCells& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_select_rslt_on_fraction(_return, sql);
    }
    ifaces_[i]->sql_select_rslt_on_fraction(_return, sql);
    return;
  }

  void sql_query(CellsGroup& _return, const std::string& sql, const CellsResult::type rslt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_query(_return, sql, rslt);
    }
    ifaces_[i]->sql_query(_return, sql, rslt);
    return;
  }

  void sql_update(const std::string& sql, const int64_t updater_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sql_update(sql, updater_id);
    }
    ifaces_[i]->sql_update(sql, updater_id);
  }

  void exec_sql(Result& _return, const std::string& sql) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exec_sql(_return, sql);
    }
    ifaces_[i]->exec_sql(_return, sql);
    return;
  }

  int64_t updater_create(const int32_t buffer_size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updater_create(buffer_size);
    }
    return ifaces_[i]->updater_create(buffer_size);
  }

  void updater_close(const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updater_close(id);
    }
    ifaces_[i]->updater_close(id);
  }

  void update(const UCCells& cells, const int64_t updater_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(cells, updater_id);
    }
    ifaces_[i]->update(cells, updater_id);
  }

  void mng_column(const SchemaFunc::type func, const Schema& schema) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mng_column(func, schema);
    }
    ifaces_[i]->mng_column(func, schema);
  }

  void list_columns(Schemas& _return, const SpecSchemas& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->list_columns(_return, spec);
    }
    ifaces_[i]->list_columns(_return, spec);
    return;
  }

  void compact_columns(CompactResults& _return, const SpecSchemas& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->compact_columns(_return, spec);
    }
    ifaces_[i]->compact_columns(_return, spec);
    return;
  }

  void scan(Cells& _return, const SpecScan& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan(_return, spec);
    }
    ifaces_[i]->scan(_return, spec);
    return;
  }

  void scan_rslt_on_column(CCells& _return, const SpecScan& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan_rslt_on_column(_return, spec);
    }
    ifaces_[i]->scan_rslt_on_column(_return, spec);
    return;
  }

  void scan_rslt_on_key(KCells& _return, const SpecScan& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan_rslt_on_key(_return, spec);
    }
    ifaces_[i]->scan_rslt_on_key(_return, spec);
    return;
  }

  void scan_rslt_on_fraction(FCells& _return, const SpecScan& spec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan_rslt_on_fraction(_return, spec);
    }
    ifaces_[i]->scan_rslt_on_fraction(_return, spec);
    return;
  }

  void scan_rslt_on(CellsGroup& _return, const SpecScan& spec, const CellsResult::type rslt) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scan_rslt_on(_return, spec, rslt);
    }
    ifaces_[i]->scan_rslt_on(_return, spec, rslt);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServiceConcurrentClient : virtual public ServiceIf {
 public:
  ServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  ServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void sql_mng_column(const std::string& sql);
  int32_t send_sql_mng_column(const std::string& sql);
  void recv_sql_mng_column(const int32_t seqid);
  void sql_list_columns(Schemas& _return, const std::string& sql);
  int32_t send_sql_list_columns(const std::string& sql);
  void recv_sql_list_columns(Schemas& _return, const int32_t seqid);
  void sql_compact_columns(CompactResults& _return, const std::string& sql);
  int32_t send_sql_compact_columns(const std::string& sql);
  void recv_sql_compact_columns(CompactResults& _return, const int32_t seqid);
  void sql_select(Cells& _return, const std::string& sql);
  int32_t send_sql_select(const std::string& sql);
  void recv_sql_select(Cells& _return, const int32_t seqid);
  void sql_select_rslt_on_column(CCells& _return, const std::string& sql);
  int32_t send_sql_select_rslt_on_column(const std::string& sql);
  void recv_sql_select_rslt_on_column(CCells& _return, const int32_t seqid);
  void sql_select_rslt_on_key(KCells& _return, const std::string& sql);
  int32_t send_sql_select_rslt_on_key(const std::string& sql);
  void recv_sql_select_rslt_on_key(KCells& _return, const int32_t seqid);
  void sql_select_rslt_on_fraction(FCells& _return, const std::string& sql);
  int32_t send_sql_select_rslt_on_fraction(const std::string& sql);
  void recv_sql_select_rslt_on_fraction(FCells& _return, const int32_t seqid);
  void sql_query(CellsGroup& _return, const std::string& sql, const CellsResult::type rslt);
  int32_t send_sql_query(const std::string& sql, const CellsResult::type rslt);
  void recv_sql_query(CellsGroup& _return, const int32_t seqid);
  void sql_update(const std::string& sql, const int64_t updater_id);
  int32_t send_sql_update(const std::string& sql, const int64_t updater_id);
  void recv_sql_update(const int32_t seqid);
  void exec_sql(Result& _return, const std::string& sql);
  int32_t send_exec_sql(const std::string& sql);
  void recv_exec_sql(Result& _return, const int32_t seqid);
  int64_t updater_create(const int32_t buffer_size);
  int32_t send_updater_create(const int32_t buffer_size);
  int64_t recv_updater_create(const int32_t seqid);
  void updater_close(const int64_t id);
  int32_t send_updater_close(const int64_t id);
  void recv_updater_close(const int32_t seqid);
  void update(const UCCells& cells, const int64_t updater_id);
  int32_t send_update(const UCCells& cells, const int64_t updater_id);
  void recv_update(const int32_t seqid);
  void mng_column(const SchemaFunc::type func, const Schema& schema);
  int32_t send_mng_column(const SchemaFunc::type func, const Schema& schema);
  void recv_mng_column(const int32_t seqid);
  void list_columns(Schemas& _return, const SpecSchemas& spec);
  int32_t send_list_columns(const SpecSchemas& spec);
  void recv_list_columns(Schemas& _return, const int32_t seqid);
  void compact_columns(CompactResults& _return, const SpecSchemas& spec);
  int32_t send_compact_columns(const SpecSchemas& spec);
  void recv_compact_columns(CompactResults& _return, const int32_t seqid);
  void scan(Cells& _return, const SpecScan& spec);
  int32_t send_scan(const SpecScan& spec);
  void recv_scan(Cells& _return, const int32_t seqid);
  void scan_rslt_on_column(CCells& _return, const SpecScan& spec);
  int32_t send_scan_rslt_on_column(const SpecScan& spec);
  void recv_scan_rslt_on_column(CCells& _return, const int32_t seqid);
  void scan_rslt_on_key(KCells& _return, const SpecScan& spec);
  int32_t send_scan_rslt_on_key(const SpecScan& spec);
  void recv_scan_rslt_on_key(KCells& _return, const int32_t seqid);
  void scan_rslt_on_fraction(FCells& _return, const SpecScan& spec);
  int32_t send_scan_rslt_on_fraction(const SpecScan& spec);
  void recv_scan_rslt_on_fraction(FCells& _return, const int32_t seqid);
  void scan_rslt_on(CellsGroup& _return, const SpecScan& spec, const CellsResult::type rslt);
  int32_t send_scan_rslt_on(const SpecScan& spec, const CellsResult::type rslt);
  void recv_scan_rslt_on(CellsGroup& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#endif
