#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:slots,no_utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec


from thrift.transport import TTransport
all_structs = []


class ColumnMng(object):
    CREATE = 3
    DELETE = 5
    MODIFY = 7

    _VALUES_TO_NAMES = {
        3: "CREATE",
        5: "DELETE",
        7: "MODIFY",
    }

    _NAMES_TO_VALUES = {
        "CREATE": 3,
        "DELETE": 5,
        "MODIFY": 7,
    }


class ColumnType(object):
    UNKNOWN = 0
    PLAIN = 1
    COUNTER_I64 = 2
    COUNTER_I32 = 3
    COUNTER_I16 = 4
    COUNTER_I8 = 5
    CELL_DEFINED = 15

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "PLAIN",
        2: "COUNTER_I64",
        3: "COUNTER_I32",
        4: "COUNTER_I16",
        5: "COUNTER_I8",
        15: "CELL_DEFINED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "PLAIN": 1,
        "COUNTER_I64": 2,
        "COUNTER_I32": 3,
        "COUNTER_I16": 4,
        "COUNTER_I8": 5,
        "CELL_DEFINED": 15,
    }


class EncodingType(object):
    DEFAULT = 0
    PLAIN = 1
    ZLIB = 2
    SNAPPY = 3

    _VALUES_TO_NAMES = {
        0: "DEFAULT",
        1: "PLAIN",
        2: "ZLIB",
        3: "SNAPPY",
    }

    _NAMES_TO_VALUES = {
        "DEFAULT": 0,
        "PLAIN": 1,
        "ZLIB": 2,
        "SNAPPY": 3,
    }


class Flag(object):
    NONE = 0
    INSERT = 1
    DELETE = 2
    DELETE_VERSION = 3

    _VALUES_TO_NAMES = {
        0: "NONE",
        1: "INSERT",
        2: "DELETE",
        3: "DELETE_VERSION",
    }

    _NAMES_TO_VALUES = {
        "NONE": 0,
        "INSERT": 1,
        "DELETE": 2,
        "DELETE_VERSION": 3,
    }


class CellsResult(object):
    IN_LIST = 0
    ON_COLUMN = 1
    ON_KEY = 2
    ON_FRACTION = 3

    _VALUES_TO_NAMES = {
        0: "IN_LIST",
        1: "ON_COLUMN",
        2: "ON_KEY",
        3: "ON_FRACTION",
    }

    _NAMES_TO_VALUES = {
        "IN_LIST": 0,
        "ON_COLUMN": 1,
        "ON_KEY": 2,
        "ON_FRACTION": 3,
    }


class Exception(TException):
    """
    Attributes:
     - code
     - message

    """

    __slots__ = (
        'code',
        'message',
    )


    def __init__(self, code=None, message=None,):
        self.code = code
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.code = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.message = iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Exception')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.I32, 1)
            oprot.writeI32(self.code)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 2)
            oprot.writeString(self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class Schema(object):
    """
    Attributes:
     - cid
     - col_name
     - col_type
     - cell_versions
     - cell_ttl
     - blk_encoding
     - blk_size
     - blk_cells
     - cs_replication
     - cs_size
     - cs_max
     - compact_percent
     - revision

    """

    __slots__ = (
        'cid',
        'col_name',
        'col_type',
        'cell_versions',
        'cell_ttl',
        'blk_encoding',
        'blk_size',
        'blk_cells',
        'cs_replication',
        'cs_size',
        'cs_max',
        'compact_percent',
        'revision',
    )


    def __init__(self, cid=None, col_name=None, col_type=None, cell_versions=None, cell_ttl=None, blk_encoding=None, blk_size=None, blk_cells=None, cs_replication=None, cs_size=None, cs_max=None, compact_percent=None, revision=None,):
        self.cid = cid
        self.col_name = col_name
        self.col_type = col_type
        self.cell_versions = cell_versions
        self.cell_ttl = cell_ttl
        self.blk_encoding = blk_encoding
        self.blk_size = blk_size
        self.blk_cells = blk_cells
        self.cs_replication = cs_replication
        self.cs_size = cs_size
        self.cs_max = cs_max
        self.compact_percent = compact_percent
        self.revision = revision

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.cid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.col_name = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.col_type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cell_versions = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.cell_ttl = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.blk_encoding = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.blk_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.blk_cells = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BYTE:
                    self.cs_replication = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.cs_size = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.BYTE:
                    self.cs_max = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.BYTE:
                    self.compact_percent = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.revision = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Schema')
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.I64, 1)
            oprot.writeI64(self.cid)
            oprot.writeFieldEnd()
        if self.col_name is not None:
            oprot.writeFieldBegin('col_name', TType.STRING, 2)
            oprot.writeString(self.col_name)
            oprot.writeFieldEnd()
        if self.col_type is not None:
            oprot.writeFieldBegin('col_type', TType.I32, 3)
            oprot.writeI32(self.col_type)
            oprot.writeFieldEnd()
        if self.cell_versions is not None:
            oprot.writeFieldBegin('cell_versions', TType.I32, 4)
            oprot.writeI32(self.cell_versions)
            oprot.writeFieldEnd()
        if self.cell_ttl is not None:
            oprot.writeFieldBegin('cell_ttl', TType.I32, 5)
            oprot.writeI32(self.cell_ttl)
            oprot.writeFieldEnd()
        if self.blk_encoding is not None:
            oprot.writeFieldBegin('blk_encoding', TType.I32, 6)
            oprot.writeI32(self.blk_encoding)
            oprot.writeFieldEnd()
        if self.blk_size is not None:
            oprot.writeFieldBegin('blk_size', TType.I32, 7)
            oprot.writeI32(self.blk_size)
            oprot.writeFieldEnd()
        if self.blk_cells is not None:
            oprot.writeFieldBegin('blk_cells', TType.I32, 8)
            oprot.writeI32(self.blk_cells)
            oprot.writeFieldEnd()
        if self.cs_replication is not None:
            oprot.writeFieldBegin('cs_replication', TType.BYTE, 9)
            oprot.writeByte(self.cs_replication)
            oprot.writeFieldEnd()
        if self.cs_size is not None:
            oprot.writeFieldBegin('cs_size', TType.I32, 10)
            oprot.writeI32(self.cs_size)
            oprot.writeFieldEnd()
        if self.cs_max is not None:
            oprot.writeFieldBegin('cs_max', TType.BYTE, 11)
            oprot.writeByte(self.cs_max)
            oprot.writeFieldEnd()
        if self.compact_percent is not None:
            oprot.writeFieldBegin('compact_percent', TType.BYTE, 12)
            oprot.writeByte(self.compact_percent)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I64, 13)
            oprot.writeI64(self.revision)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class UCell(object):
    """
    Attributes:
     - f
     - k
     - ts
     - v

    """

    __slots__ = (
        'f',
        'k',
        'ts',
        'v',
    )


    def __init__(self, f=None, k=None, ts=None, v=None,):
        self.f = f
        self.k = k
        self.ts = ts
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.f = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.k = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readBinary()
                        self.k.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.v = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UCell')
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.I32, 1)
            oprot.writeI32(self.f)
            oprot.writeFieldEnd()
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.k))
            for iter6 in self.k:
                oprot.writeBinary(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 3)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRING, 4)
            oprot.writeBinary(self.v)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class Cell(object):
    """
    Attributes:
     - c
     - k
     - ts
     - v

    """

    __slots__ = (
        'c',
        'k',
        'ts',
        'v',
    )


    def __init__(self, c=None, k=None, ts=None, v=None,):
        self.c = c
        self.k = k
        self.ts = ts
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.c = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.k = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readBinary()
                        self.k.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.v = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Cell')
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.STRING, 1)
            oprot.writeString(self.c)
            oprot.writeFieldEnd()
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.k))
            for iter13 in self.k:
                oprot.writeBinary(iter13)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 3)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRING, 4)
            oprot.writeBinary(self.v)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class CCell(object):
    """
    Attributes:
     - k
     - ts
     - v

    """

    __slots__ = (
        'k',
        'ts',
        'v',
    )


    def __init__(self, k=None, ts=None, v=None,):
        self.k = k
        self.ts = ts
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.k = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = iprot.readBinary()
                        self.k.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.v = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CCell')
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.k))
            for iter20 in self.k:
                oprot.writeBinary(iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 2)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRING, 3)
            oprot.writeBinary(self.v)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class KCell(object):
    """
    Attributes:
     - c
     - ts
     - v

    """

    __slots__ = (
        'c',
        'ts',
        'v',
    )


    def __init__(self, c=None, ts=None, v=None,):
        self.c = c
        self.ts = ts
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.c = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.v = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('KCell')
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.STRING, 1)
            oprot.writeString(self.c)
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 2)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRING, 3)
            oprot.writeBinary(self.v)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class kCells(object):
    """
    Attributes:
     - k
     - cells

    """

    __slots__ = (
        'k',
        'cells',
    )


    def __init__(self, k=None, cells=None,):
        self.k = k
        self.cells = cells

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.k = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readBinary()
                        self.k.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.cells = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = KCell()
                        _elem32.read(iprot)
                        self.cells.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('kCells')
        if self.k is not None:
            oprot.writeFieldBegin('k', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.k))
            for iter33 in self.k:
                oprot.writeBinary(iter33)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.cells))
            for iter34 in self.cells:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class FCell(object):
    """
    Attributes:
     - c
     - ts
     - v

    """

    __slots__ = (
        'c',
        'ts',
        'v',
    )


    def __init__(self, c=None, ts=None, v=None,):
        self.c = c
        self.ts = ts
        self.v = v

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.c = iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ts = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.v = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FCell')
        if self.c is not None:
            oprot.writeFieldBegin('c', TType.STRING, 1)
            oprot.writeString(self.c)
            oprot.writeFieldEnd()
        if self.ts is not None:
            oprot.writeFieldBegin('ts', TType.I64, 2)
            oprot.writeI64(self.ts)
            oprot.writeFieldEnd()
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.STRING, 3)
            oprot.writeBinary(self.v)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class FCells(object):
    """
    Attributes:
     - f
     - cells

    """

    __slots__ = (
        'f',
        'cells',
    )


    def __init__(self, f=None, cells=None,):
        self.f = f
        self.cells = cells

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.f = {}
                    (_ktype36, _vtype37, _size35) = iprot.readMapBegin()
                    for _i39 in range(_size35):
                        _key40 = iprot.readBinary()
                        _val41 = FCells()
                        _val41.read(iprot)
                        self.f[_key40] = _val41
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.cells = []
                    (_etype45, _size42) = iprot.readListBegin()
                    for _i46 in range(_size42):
                        _elem47 = FCell()
                        _elem47.read(iprot)
                        self.cells.append(_elem47)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FCells')
        if self.f is not None:
            oprot.writeFieldBegin('f', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.f))
            for kiter48, viter49 in self.f.items():
                oprot.writeBinary(kiter48)
                viter49.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.cells))
            for iter50 in self.cells:
                iter50.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class CellsGroup(object):
    """
    Attributes:
     - cells
     - ccells
     - kcells
     - fcells

    """

    __slots__ = (
        'cells',
        'ccells',
        'kcells',
        'fcells',
    )


    def __init__(self, cells=None, ccells=None, kcells=None, fcells=None,):
        self.cells = cells
        self.ccells = ccells
        self.kcells = kcells
        self.fcells = fcells

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.cells = []
                    (_etype54, _size51) = iprot.readListBegin()
                    for _i55 in range(_size51):
                        _elem56 = Cell()
                        _elem56.read(iprot)
                        self.cells.append(_elem56)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.ccells = {}
                    (_ktype58, _vtype59, _size57) = iprot.readMapBegin()
                    for _i61 in range(_size57):
                        _key62 = iprot.readString()
                        _val63 = []
                        (_etype67, _size64) = iprot.readListBegin()
                        for _i68 in range(_size64):
                            _elem69 = CCell()
                            _elem69.read(iprot)
                            _val63.append(_elem69)
                        iprot.readListEnd()
                        self.ccells[_key62] = _val63
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.kcells = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = kCells()
                        _elem75.read(iprot)
                        self.kcells.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.fcells = FCells()
                    self.fcells.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CellsGroup')
        if self.cells is not None:
            oprot.writeFieldBegin('cells', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.cells))
            for iter76 in self.cells:
                iter76.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.ccells is not None:
            oprot.writeFieldBegin('ccells', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.LIST, len(self.ccells))
            for kiter77, viter78 in self.ccells.items():
                oprot.writeString(kiter77)
                oprot.writeListBegin(TType.STRUCT, len(viter78))
                for iter79 in viter78:
                    iter79.write(oprot)
                oprot.writeListEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.kcells is not None:
            oprot.writeFieldBegin('kcells', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.kcells))
            for iter80 in self.kcells:
                iter80.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fcells is not None:
            oprot.writeFieldBegin('fcells', TType.STRUCT, 4)
            self.fcells.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)


class CompactResult(object):
    """
    Attributes:
     - cid
     - err

    """

    __slots__ = (
        'cid',
        'err',
    )


    def __init__(self, cid=None, err=None,):
        self.cid = cid
        self.err = err

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.cid = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.err = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CompactResult')
        if self.cid is not None:
            oprot.writeFieldBegin('cid', TType.I64, 1)
            oprot.writeI64(self.cid)
            oprot.writeFieldEnd()
        if self.err is not None:
            oprot.writeFieldBegin('err', TType.I32, 2)
            oprot.writeI32(self.err)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, getattr(self, key))
             for key in self.__slots__]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        for attr in self.__slots__:
            my_val = getattr(self, attr)
            other_val = getattr(other, attr)
            if my_val != other_val:
                return False
        return True

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Exception)
Exception.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'code', None, None, ),  # 1
    (2, TType.STRING, 'message', None, None, ),  # 2
)
all_structs.append(Schema)
Schema.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'cid', None, None, ),  # 1
    (2, TType.STRING, 'col_name', None, None, ),  # 2
    (3, TType.I32, 'col_type', None, None, ),  # 3
    (4, TType.I32, 'cell_versions', None, None, ),  # 4
    (5, TType.I32, 'cell_ttl', None, None, ),  # 5
    (6, TType.I32, 'blk_encoding', None, None, ),  # 6
    (7, TType.I32, 'blk_size', None, None, ),  # 7
    (8, TType.I32, 'blk_cells', None, None, ),  # 8
    (9, TType.BYTE, 'cs_replication', None, None, ),  # 9
    (10, TType.I32, 'cs_size', None, None, ),  # 10
    (11, TType.BYTE, 'cs_max', None, None, ),  # 11
    (12, TType.BYTE, 'compact_percent', None, None, ),  # 12
    (13, TType.I64, 'revision', None, None, ),  # 13
)
all_structs.append(UCell)
UCell.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'f', None, None, ),  # 1
    (2, TType.LIST, 'k', (TType.STRING, 'BINARY', False), None, ),  # 2
    (3, TType.I64, 'ts', None, None, ),  # 3
    (4, TType.STRING, 'v', 'BINARY', None, ),  # 4
)
all_structs.append(Cell)
Cell.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'c', None, None, ),  # 1
    (2, TType.LIST, 'k', (TType.STRING, 'BINARY', False), None, ),  # 2
    (3, TType.I64, 'ts', None, None, ),  # 3
    (4, TType.STRING, 'v', 'BINARY', None, ),  # 4
)
all_structs.append(CCell)
CCell.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'k', (TType.STRING, 'BINARY', False), None, ),  # 1
    (2, TType.I64, 'ts', None, None, ),  # 2
    (3, TType.STRING, 'v', 'BINARY', None, ),  # 3
)
all_structs.append(KCell)
KCell.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'c', None, None, ),  # 1
    (2, TType.I64, 'ts', None, None, ),  # 2
    (3, TType.STRING, 'v', 'BINARY', None, ),  # 3
)
all_structs.append(kCells)
kCells.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'k', (TType.STRING, 'BINARY', False), None, ),  # 1
    (2, TType.LIST, 'cells', (TType.STRUCT, [KCell, None], False), None, ),  # 2
)
all_structs.append(FCell)
FCell.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'c', None, None, ),  # 1
    (2, TType.I64, 'ts', None, None, ),  # 2
    (3, TType.STRING, 'v', 'BINARY', None, ),  # 3
)
all_structs.append(FCells)
FCells.thrift_spec = (
    None,  # 0
    (1, TType.MAP, 'f', (TType.STRING, 'BINARY', TType.STRUCT, [FCells, None], False), None, ),  # 1
    (2, TType.LIST, 'cells', (TType.STRUCT, [FCell, None], False), None, ),  # 2
)
all_structs.append(CellsGroup)
CellsGroup.thrift_spec = (
    None,  # 0
    (1, TType.LIST, 'cells', (TType.STRUCT, [Cell, None], False), None, ),  # 1
    (2, TType.MAP, 'ccells', (TType.STRING, None, TType.LIST, (TType.STRUCT, [CCell, None], False), False), None, ),  # 2
    (3, TType.LIST, 'kcells', (TType.STRUCT, [kCells, None], False), None, ),  # 3
    (4, TType.STRUCT, 'fcells', [FCells, None], None, ),  # 4
)
all_structs.append(CompactResult)
CompactResult.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'cid', None, None, ),  # 1
    (2, TType.I32, 'err', None, None, ),  # 2
)
fix_spec(all_structs)
del all_structs
