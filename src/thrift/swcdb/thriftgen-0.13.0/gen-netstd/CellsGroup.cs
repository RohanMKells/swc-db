/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// A Grouped Cells result for results of scan, determined by the request's CellsResult enum
/// </summary>
public partial class CellsGroup : TBase
{
  private List<Cell> _cells;
  private Dictionary<string, List<CCell>> _ccells;
  private List<kCells> _kcells;
  private FCells _fcells;

  /// <summary>
  /// The Cells in a list, defined as Cell items in a list-container
  /// </summary>
  public List<Cell> Cells
  {
    get
    {
      return _cells;
    }
    set
    {
      __isset.cells = true;
      this._cells = value;
    }
  }

  /// <summary>
  /// The Columns Cells in a map-container, defined as ColCells items by Column Name
  /// </summary>
  public Dictionary<string, List<CCell>> Ccells
  {
    get
    {
      return _ccells;
    }
    set
    {
      __isset.ccells = true;
      this._ccells = value;
    }
  }

  /// <summary>
  /// The Keys Cells in a list, defined as kCells items in a list-container
  /// </summary>
  public List<kCells> Kcells
  {
    get
    {
      return _kcells;
    }
    set
    {
      __isset.kcells = true;
      this._kcells = value;
    }
  }

  /// <summary>
  /// The Fraction Cells in struct FCells
  /// </summary>
  public FCells Fcells
  {
    get
    {
      return _fcells;
    }
    set
    {
      __isset.fcells = true;
      this._fcells = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool cells;
    public bool ccells;
    public bool kcells;
    public bool fcells;
  }

  public CellsGroup()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list81 = await iprot.ReadListBeginAsync(cancellationToken);
                Cells = new List<Cell>(_list81.Count);
                for(int _i82 = 0; _i82 < _list81.Count; ++_i82)
                {
                  Cell _elem83;
                  _elem83 = new Cell();
                  await _elem83.ReadAsync(iprot, cancellationToken);
                  Cells.Add(_elem83);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Map)
            {
              {
                TMap _map84 = await iprot.ReadMapBeginAsync(cancellationToken);
                Ccells = new Dictionary<string, List<CCell>>(_map84.Count);
                for(int _i85 = 0; _i85 < _map84.Count; ++_i85)
                {
                  string _key86;
                  List<CCell> _val87;
                  _key86 = await iprot.ReadStringAsync(cancellationToken);
                  {
                    TList _list88 = await iprot.ReadListBeginAsync(cancellationToken);
                    _val87 = new List<CCell>(_list88.Count);
                    for(int _i89 = 0; _i89 < _list88.Count; ++_i89)
                    {
                      CCell _elem90;
                      _elem90 = new CCell();
                      await _elem90.ReadAsync(iprot, cancellationToken);
                      _val87.Add(_elem90);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                  Ccells[_key86] = _val87;
                }
                await iprot.ReadMapEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list91 = await iprot.ReadListBeginAsync(cancellationToken);
                Kcells = new List<kCells>(_list91.Count);
                for(int _i92 = 0; _i92 < _list91.Count; ++_i92)
                {
                  kCells _elem93;
                  _elem93 = new kCells();
                  await _elem93.ReadAsync(iprot, cancellationToken);
                  Kcells.Add(_elem93);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Struct)
            {
              Fcells = new FCells();
              await Fcells.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CellsGroup");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Cells != null && __isset.cells)
      {
        field.Name = "cells";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells.Count), cancellationToken);
          foreach (Cell _iter94 in Cells)
          {
            await _iter94.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Ccells != null && __isset.ccells)
      {
        field.Name = "ccells";
        field.Type = TType.Map;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.List, Ccells.Count), cancellationToken);
          foreach (string _iter95 in Ccells.Keys)
          {
            await oprot.WriteStringAsync(_iter95, cancellationToken);
            {
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Ccells[_iter95].Count), cancellationToken);
              foreach (CCell _iter96 in Ccells[_iter95])
              {
                await _iter96.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
            }
          }
          await oprot.WriteMapEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Kcells != null && __isset.kcells)
      {
        field.Name = "kcells";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Kcells.Count), cancellationToken);
          foreach (kCells _iter97 in Kcells)
          {
            await _iter97.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Fcells != null && __isset.fcells)
      {
        field.Name = "fcells";
        field.Type = TType.Struct;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Fcells.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CellsGroup;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (System.Object.Equals(Cells, other.Cells))))
      && ((__isset.ccells == other.__isset.ccells) && ((!__isset.ccells) || (System.Object.Equals(Ccells, other.Ccells))))
      && ((__isset.kcells == other.__isset.kcells) && ((!__isset.kcells) || (System.Object.Equals(Kcells, other.Kcells))))
      && ((__isset.fcells == other.__isset.fcells) && ((!__isset.fcells) || (System.Object.Equals(Fcells, other.Fcells))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.cells)
        hashcode = (hashcode * 397) + Cells.GetHashCode();
      if(__isset.ccells)
        hashcode = (hashcode * 397) + Ccells.GetHashCode();
      if(__isset.kcells)
        hashcode = (hashcode * 397) + Kcells.GetHashCode();
      if(__isset.fcells)
        hashcode = (hashcode * 397) + Fcells.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CellsGroup(");
    bool __first = true;
    if (Cells != null && __isset.cells)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Cells: ");
      sb.Append(Cells);
    }
    if (Ccells != null && __isset.ccells)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Ccells: ");
      sb.Append(Ccells);
    }
    if (Kcells != null && __isset.kcells)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Kcells: ");
      sb.Append(Kcells);
    }
    if (Fcells != null && __isset.fcells)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Fcells: ");
      sb.Append(Fcells== null ? "<null>" : Fcells.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

