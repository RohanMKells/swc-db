/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// The Serial Value Cell field
/// </summary>
public partial class CellValueSerial : TBase
{
  private int _field_id;
  private long _v_int64;
  private double _v_double;
  private byte[] _v_bytes;
  private List<byte[]> _v_key;
  private List<long> _v_li;
  private List<byte[]> _v_lb;

  public int Field_id
  {
    get
    {
      return _field_id;
    }
    set
    {
      __isset.field_id = true;
      this._field_id = value;
    }
  }

  public long V_int64
  {
    get
    {
      return _v_int64;
    }
    set
    {
      __isset.v_int64 = true;
      this._v_int64 = value;
    }
  }

  public double V_double
  {
    get
    {
      return _v_double;
    }
    set
    {
      __isset.v_double = true;
      this._v_double = value;
    }
  }

  public byte[] V_bytes
  {
    get
    {
      return _v_bytes;
    }
    set
    {
      __isset.v_bytes = true;
      this._v_bytes = value;
    }
  }

  public List<byte[]> V_key
  {
    get
    {
      return _v_key;
    }
    set
    {
      __isset.v_key = true;
      this._v_key = value;
    }
  }

  public List<long> V_li
  {
    get
    {
      return _v_li;
    }
    set
    {
      __isset.v_li = true;
      this._v_li = value;
    }
  }

  public List<byte[]> V_lb
  {
    get
    {
      return _v_lb;
    }
    set
    {
      __isset.v_lb = true;
      this._v_lb = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool field_id;
    public bool v_int64;
    public bool v_double;
    public bool v_bytes;
    public bool v_key;
    public bool v_li;
    public bool v_lb;
  }

  public CellValueSerial()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              Field_id = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              V_int64 = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.Double)
            {
              V_double = await iprot.ReadDoubleAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              V_bytes = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.List)
            {
              {
                TList _list104 = await iprot.ReadListBeginAsync(cancellationToken);
                V_key = new List<byte[]>(_list104.Count);
                for(int _i105 = 0; _i105 < _list104.Count; ++_i105)
                {
                  byte[] _elem106;
                  _elem106 = await iprot.ReadBinaryAsync(cancellationToken);
                  V_key.Add(_elem106);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list107 = await iprot.ReadListBeginAsync(cancellationToken);
                V_li = new List<long>(_list107.Count);
                for(int _i108 = 0; _i108 < _list107.Count; ++_i108)
                {
                  long _elem109;
                  _elem109 = await iprot.ReadI64Async(cancellationToken);
                  V_li.Add(_elem109);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list110 = await iprot.ReadListBeginAsync(cancellationToken);
                V_lb = new List<byte[]>(_list110.Count);
                for(int _i111 = 0; _i111 < _list110.Count; ++_i111)
                {
                  byte[] _elem112;
                  _elem112 = await iprot.ReadBinaryAsync(cancellationToken);
                  V_lb.Add(_elem112);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("CellValueSerial");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (__isset.field_id)
      {
        field.Name = "field_id";
        field.Type = TType.I32;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Field_id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.v_int64)
      {
        field.Name = "v_int64";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(V_int64, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.v_double)
      {
        field.Name = "v_double";
        field.Type = TType.Double;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteDoubleAsync(V_double, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (V_bytes != null && __isset.v_bytes)
      {
        field.Name = "v_bytes";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteBinaryAsync(V_bytes, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (V_key != null && __isset.v_key)
      {
        field.Name = "v_key";
        field.Type = TType.List;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, V_key.Count), cancellationToken);
          foreach (byte[] _iter113 in V_key)
          {
            await oprot.WriteBinaryAsync(_iter113, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (V_li != null && __isset.v_li)
      {
        field.Name = "v_li";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I64, V_li.Count), cancellationToken);
          foreach (long _iter114 in V_li)
          {
            await oprot.WriteI64Async(_iter114, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (V_lb != null && __isset.v_lb)
      {
        field.Name = "v_lb";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, V_lb.Count), cancellationToken);
          foreach (byte[] _iter115 in V_lb)
          {
            await oprot.WriteBinaryAsync(_iter115, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as CellValueSerial;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.field_id == other.__isset.field_id) && ((!__isset.field_id) || (System.Object.Equals(Field_id, other.Field_id))))
      && ((__isset.v_int64 == other.__isset.v_int64) && ((!__isset.v_int64) || (System.Object.Equals(V_int64, other.V_int64))))
      && ((__isset.v_double == other.__isset.v_double) && ((!__isset.v_double) || (System.Object.Equals(V_double, other.V_double))))
      && ((__isset.v_bytes == other.__isset.v_bytes) && ((!__isset.v_bytes) || (TCollections.Equals(V_bytes, other.V_bytes))))
      && ((__isset.v_key == other.__isset.v_key) && ((!__isset.v_key) || (System.Object.Equals(V_key, other.V_key))))
      && ((__isset.v_li == other.__isset.v_li) && ((!__isset.v_li) || (TCollections.Equals(V_li, other.V_li))))
      && ((__isset.v_lb == other.__isset.v_lb) && ((!__isset.v_lb) || (TCollections.Equals(V_lb, other.V_lb))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.field_id)
        hashcode = (hashcode * 397) + Field_id.GetHashCode();
      if(__isset.v_int64)
        hashcode = (hashcode * 397) + V_int64.GetHashCode();
      if(__isset.v_double)
        hashcode = (hashcode * 397) + V_double.GetHashCode();
      if(__isset.v_bytes)
        hashcode = (hashcode * 397) + V_bytes.GetHashCode();
      if(__isset.v_key)
        hashcode = (hashcode * 397) + V_key.GetHashCode();
      if(__isset.v_li)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(V_li);
      if(__isset.v_lb)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(V_lb);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("CellValueSerial(");
    bool __first = true;
    if (__isset.field_id)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Field_id: ");
      sb.Append(Field_id);
    }
    if (__isset.v_int64)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_int64: ");
      sb.Append(V_int64);
    }
    if (__isset.v_double)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_double: ");
      sb.Append(V_double);
    }
    if (V_bytes != null && __isset.v_bytes)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_bytes: ");
      sb.Append(V_bytes);
    }
    if (V_key != null && __isset.v_key)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_key: ");
      sb.Append(V_key);
    }
    if (V_li != null && __isset.v_li)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_li: ");
      sb.Append(V_li);
    }
    if (V_lb != null && __isset.v_lb)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("V_lb: ");
      sb.Append(V_lb);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

