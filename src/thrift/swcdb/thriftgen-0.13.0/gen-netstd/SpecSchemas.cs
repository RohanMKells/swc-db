/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// The Specs for Schemas for using with list_columns or compact_columns
/// </summary>
public partial class SpecSchemas : TBase
{
  private List<long> _cids;
  private List<string> _names;
  private List<SchemaPattern> _patterns;

  /// <summary>
  /// The Column IDs
  /// </summary>
  public List<long> Cids
  {
    get
    {
      return _cids;
    }
    set
    {
      __isset.cids = true;
      this._cids = value;
    }
  }

  /// <summary>
  /// The Column Names
  /// </summary>
  public List<string> Names
  {
    get
    {
      return _names;
    }
    set
    {
      __isset.names = true;
      this._names = value;
    }
  }

  /// <summary>
  /// The Schema's Column Name patterns
  /// </summary>
  public List<SchemaPattern> Patterns
  {
    get
    {
      return _patterns;
    }
    set
    {
      __isset.patterns = true;
      this._patterns = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool cids;
    public bool names;
    public bool patterns;
  }

  public SpecSchemas()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                Cids = new List<long>(_list0.Count);
                for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  long _elem2;
                  _elem2 = await iprot.ReadI64Async(cancellationToken);
                  Cids.Add(_elem2);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list3 = await iprot.ReadListBeginAsync(cancellationToken);
                Names = new List<string>(_list3.Count);
                for(int _i4 = 0; _i4 < _list3.Count; ++_i4)
                {
                  string _elem5;
                  _elem5 = await iprot.ReadStringAsync(cancellationToken);
                  Names.Add(_elem5);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list6 = await iprot.ReadListBeginAsync(cancellationToken);
                Patterns = new List<SchemaPattern>(_list6.Count);
                for(int _i7 = 0; _i7 < _list6.Count; ++_i7)
                {
                  SchemaPattern _elem8;
                  _elem8 = new SchemaPattern();
                  await _elem8.ReadAsync(iprot, cancellationToken);
                  Patterns.Add(_elem8);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SpecSchemas");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Cids != null && __isset.cids)
      {
        field.Name = "cids";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.I64, Cids.Count), cancellationToken);
          foreach (long _iter9 in Cids)
          {
            await oprot.WriteI64Async(_iter9, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Names != null && __isset.names)
      {
        field.Name = "names";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Names.Count), cancellationToken);
          foreach (string _iter10 in Names)
          {
            await oprot.WriteStringAsync(_iter10, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Patterns != null && __isset.patterns)
      {
        field.Name = "patterns";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Patterns.Count), cancellationToken);
          foreach (SchemaPattern _iter11 in Patterns)
          {
            await _iter11.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SpecSchemas;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.cids == other.__isset.cids) && ((!__isset.cids) || (TCollections.Equals(Cids, other.Cids))))
      && ((__isset.names == other.__isset.names) && ((!__isset.names) || (TCollections.Equals(Names, other.Names))))
      && ((__isset.patterns == other.__isset.patterns) && ((!__isset.patterns) || (TCollections.Equals(Patterns, other.Patterns))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.cids)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Cids);
      if(__isset.names)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Names);
      if(__isset.patterns)
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Patterns);
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SpecSchemas(");
    bool __first = true;
    if (Cids != null && __isset.cids)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Cids: ");
      sb.Append(Cids);
    }
    if (Names != null && __isset.names)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Names: ");
      sb.Append(Names);
    }
    if (Patterns != null && __isset.patterns)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Patterns: ");
      sb.Append(Patterns);
    }
    sb.Append(")");
    return sb.ToString();
  }
}

