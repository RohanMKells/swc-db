/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;



/// <summary>
/// The Cells Interval Specifications with interval-scope Flags
/// </summary>
public partial class SpecInterval : TBase
{
  private List<byte[]> _range_begin;
  private List<byte[]> _range_end;
  private List<byte[]> _range_offset;
  private List<byte[]> _offset_key;
  private long _offset_rev;
  private List<SpecKeyInterval> _key_intervals;
  private List<SpecValue> _values;
  private SpecTimestamp _ts_start;
  private SpecTimestamp _ts_finish;
  private SpecFlags _flags;

  /// <summary>
  /// Begin of Ranges evaluation with this Key inclusive
  /// </summary>
  public List<byte[]> Range_begin
  {
    get
    {
      return _range_begin;
    }
    set
    {
      __isset.range_begin = true;
      this._range_begin = value;
    }
  }

  /// <summary>
  /// End of Ranges evaluation with this Key inclusive
  /// </summary>
  public List<byte[]> Range_end
  {
    get
    {
      return _range_end;
    }
    set
    {
      __isset.range_end = true;
      this._range_end = value;
    }
  }

  /// <summary>
  /// Offset of Ranges evaluation with this Key inclusive
  /// </summary>
  public List<byte[]> Range_offset
  {
    get
    {
      return _range_offset;
    }
    set
    {
      __isset.range_offset = true;
      this._range_offset = value;
    }
  }

  /// <summary>
  /// Offset Cell Key of a Scan, select cells from this key inclusive
  /// </summary>
  public List<byte[]> Offset_key
  {
    get
    {
      return _offset_key;
    }
    set
    {
      __isset.offset_key = true;
      this._offset_key = value;
    }
  }

  /// <summary>
  /// Offset Cell Timestamp of a Scan, select cells after this timestamp
  /// </summary>
  public long Offset_rev
  {
    get
    {
      return _offset_rev;
    }
    set
    {
      __isset.offset_rev = true;
      this._offset_rev = value;
    }
  }

  /// <summary>
  /// The Key Intervals
  /// </summary>
  public List<SpecKeyInterval> Key_intervals
  {
    get
    {
      return _key_intervals;
    }
    set
    {
      __isset.key_intervals = true;
      this._key_intervals = value;
    }
  }

  /// <summary>
  /// The Cell Values Spec, cell-values match
  /// </summary>
  public List<SpecValue> Values
  {
    get
    {
      return _values;
    }
    set
    {
      __isset.values = true;
      this._values = value;
    }
  }

  /// <summary>
  /// The Timestamp Start Spec, the start of cells-interval timestamp match
  /// </summary>
  public SpecTimestamp Ts_start
  {
    get
    {
      return _ts_start;
    }
    set
    {
      __isset.ts_start = true;
      this._ts_start = value;
    }
  }

  /// <summary>
  /// The Timestamp Finish Spec, the finish of cells-interval timestamp match
  /// </summary>
  public SpecTimestamp Ts_finish
  {
    get
    {
      return _ts_finish;
    }
    set
    {
      __isset.ts_finish = true;
      this._ts_finish = value;
    }
  }

  /// <summary>
  /// The Interval Flags Specification
  /// </summary>
  public SpecFlags Flags
  {
    get
    {
      return _flags;
    }
    set
    {
      __isset.flags = true;
      this._flags = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool range_begin;
    public bool range_end;
    public bool range_offset;
    public bool offset_key;
    public bool offset_rev;
    public bool key_intervals;
    public bool values;
    public bool ts_start;
    public bool ts_finish;
    public bool flags;
  }

  public SpecInterval()
  {
  }

  public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list20 = await iprot.ReadListBeginAsync(cancellationToken);
                Range_begin = new List<byte[]>(_list20.Count);
                for(int _i21 = 0; _i21 < _list20.Count; ++_i21)
                {
                  byte[] _elem22;
                  _elem22 = await iprot.ReadBinaryAsync(cancellationToken);
                  Range_begin.Add(_elem22);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list23 = await iprot.ReadListBeginAsync(cancellationToken);
                Range_end = new List<byte[]>(_list23.Count);
                for(int _i24 = 0; _i24 < _list23.Count; ++_i24)
                {
                  byte[] _elem25;
                  _elem25 = await iprot.ReadBinaryAsync(cancellationToken);
                  Range_end.Add(_elem25);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list26 = await iprot.ReadListBeginAsync(cancellationToken);
                Range_offset = new List<byte[]>(_list26.Count);
                for(int _i27 = 0; _i27 < _list26.Count; ++_i27)
                {
                  byte[] _elem28;
                  _elem28 = await iprot.ReadBinaryAsync(cancellationToken);
                  Range_offset.Add(_elem28);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.List)
            {
              {
                TList _list29 = await iprot.ReadListBeginAsync(cancellationToken);
                Offset_key = new List<byte[]>(_list29.Count);
                for(int _i30 = 0; _i30 < _list29.Count; ++_i30)
                {
                  byte[] _elem31;
                  _elem31 = await iprot.ReadBinaryAsync(cancellationToken);
                  Offset_key.Add(_elem31);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I64)
            {
              Offset_rev = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.List)
            {
              {
                TList _list32 = await iprot.ReadListBeginAsync(cancellationToken);
                Key_intervals = new List<SpecKeyInterval>(_list32.Count);
                for(int _i33 = 0; _i33 < _list32.Count; ++_i33)
                {
                  SpecKeyInterval _elem34;
                  _elem34 = new SpecKeyInterval();
                  await _elem34.ReadAsync(iprot, cancellationToken);
                  Key_intervals.Add(_elem34);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list35 = await iprot.ReadListBeginAsync(cancellationToken);
                Values = new List<SpecValue>(_list35.Count);
                for(int _i36 = 0; _i36 < _list35.Count; ++_i36)
                {
                  SpecValue _elem37;
                  _elem37 = new SpecValue();
                  await _elem37.ReadAsync(iprot, cancellationToken);
                  Values.Add(_elem37);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.Struct)
            {
              Ts_start = new SpecTimestamp();
              await Ts_start.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.Struct)
            {
              Ts_finish = new SpecTimestamp();
              await Ts_finish.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Struct)
            {
              Flags = new SpecFlags();
              await Flags.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SpecInterval");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if (Range_begin != null && __isset.range_begin)
      {
        field.Name = "range_begin";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Range_begin.Count), cancellationToken);
          foreach (byte[] _iter38 in Range_begin)
          {
            await oprot.WriteBinaryAsync(_iter38, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Range_end != null && __isset.range_end)
      {
        field.Name = "range_end";
        field.Type = TType.List;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Range_end.Count), cancellationToken);
          foreach (byte[] _iter39 in Range_end)
          {
            await oprot.WriteBinaryAsync(_iter39, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Range_offset != null && __isset.range_offset)
      {
        field.Name = "range_offset";
        field.Type = TType.List;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Range_offset.Count), cancellationToken);
          foreach (byte[] _iter40 in Range_offset)
          {
            await oprot.WriteBinaryAsync(_iter40, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Offset_key != null && __isset.offset_key)
      {
        field.Name = "offset_key";
        field.Type = TType.List;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Offset_key.Count), cancellationToken);
          foreach (byte[] _iter41 in Offset_key)
          {
            await oprot.WriteBinaryAsync(_iter41, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (__isset.offset_rev)
      {
        field.Name = "offset_rev";
        field.Type = TType.I64;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Offset_rev, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Key_intervals != null && __isset.key_intervals)
      {
        field.Name = "key_intervals";
        field.Type = TType.List;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Key_intervals.Count), cancellationToken);
          foreach (SpecKeyInterval _iter42 in Key_intervals)
          {
            await _iter42.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Values != null && __isset.values)
      {
        field.Name = "values";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Values.Count), cancellationToken);
          foreach (SpecValue _iter43 in Values)
          {
            await _iter43.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Ts_start != null && __isset.ts_start)
      {
        field.Name = "ts_start";
        field.Type = TType.Struct;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Ts_start.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Ts_finish != null && __isset.ts_finish)
      {
        field.Name = "ts_finish";
        field.Type = TType.Struct;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Ts_finish.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if (Flags != null && __isset.flags)
      {
        field.Name = "flags";
        field.Type = TType.Struct;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Flags.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    var other = that as SpecInterval;
    if (other == null) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.range_begin == other.__isset.range_begin) && ((!__isset.range_begin) || (System.Object.Equals(Range_begin, other.Range_begin))))
      && ((__isset.range_end == other.__isset.range_end) && ((!__isset.range_end) || (System.Object.Equals(Range_end, other.Range_end))))
      && ((__isset.range_offset == other.__isset.range_offset) && ((!__isset.range_offset) || (System.Object.Equals(Range_offset, other.Range_offset))))
      && ((__isset.offset_key == other.__isset.offset_key) && ((!__isset.offset_key) || (System.Object.Equals(Offset_key, other.Offset_key))))
      && ((__isset.offset_rev == other.__isset.offset_rev) && ((!__isset.offset_rev) || (System.Object.Equals(Offset_rev, other.Offset_rev))))
      && ((__isset.key_intervals == other.__isset.key_intervals) && ((!__isset.key_intervals) || (System.Object.Equals(Key_intervals, other.Key_intervals))))
      && ((__isset.values == other.__isset.values) && ((!__isset.values) || (System.Object.Equals(Values, other.Values))))
      && ((__isset.ts_start == other.__isset.ts_start) && ((!__isset.ts_start) || (System.Object.Equals(Ts_start, other.Ts_start))))
      && ((__isset.ts_finish == other.__isset.ts_finish) && ((!__isset.ts_finish) || (System.Object.Equals(Ts_finish, other.Ts_finish))))
      && ((__isset.flags == other.__isset.flags) && ((!__isset.flags) || (System.Object.Equals(Flags, other.Flags))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.range_begin)
        hashcode = (hashcode * 397) + Range_begin.GetHashCode();
      if(__isset.range_end)
        hashcode = (hashcode * 397) + Range_end.GetHashCode();
      if(__isset.range_offset)
        hashcode = (hashcode * 397) + Range_offset.GetHashCode();
      if(__isset.offset_key)
        hashcode = (hashcode * 397) + Offset_key.GetHashCode();
      if(__isset.offset_rev)
        hashcode = (hashcode * 397) + Offset_rev.GetHashCode();
      if(__isset.key_intervals)
        hashcode = (hashcode * 397) + Key_intervals.GetHashCode();
      if(__isset.values)
        hashcode = (hashcode * 397) + Values.GetHashCode();
      if(__isset.ts_start)
        hashcode = (hashcode * 397) + Ts_start.GetHashCode();
      if(__isset.ts_finish)
        hashcode = (hashcode * 397) + Ts_finish.GetHashCode();
      if(__isset.flags)
        hashcode = (hashcode * 397) + Flags.GetHashCode();
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SpecInterval(");
    bool __first = true;
    if (Range_begin != null && __isset.range_begin)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Range_begin: ");
      sb.Append(Range_begin);
    }
    if (Range_end != null && __isset.range_end)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Range_end: ");
      sb.Append(Range_end);
    }
    if (Range_offset != null && __isset.range_offset)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Range_offset: ");
      sb.Append(Range_offset);
    }
    if (Offset_key != null && __isset.offset_key)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Offset_key: ");
      sb.Append(Offset_key);
    }
    if (__isset.offset_rev)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Offset_rev: ");
      sb.Append(Offset_rev);
    }
    if (Key_intervals != null && __isset.key_intervals)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Key_intervals: ");
      sb.Append(Key_intervals);
    }
    if (Values != null && __isset.values)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Values: ");
      sb.Append(Values);
    }
    if (Ts_start != null && __isset.ts_start)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Ts_start: ");
      sb.Append(Ts_start== null ? "<null>" : Ts_start.ToString());
    }
    if (Ts_finish != null && __isset.ts_finish)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Ts_finish: ");
      sb.Append(Ts_finish== null ? "<null>" : Ts_finish.ToString());
    }
    if (Flags != null && __isset.flags)
    {
      if(!__first) { sb.Append(", "); }
      __first = false;
      sb.Append("Flags: ");
      sb.Append(Flags== null ? "<null>" : Flags.ToString());
    }
    sb.Append(")");
    return sb.ToString();
  }
}

