/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * The Key Interval Specifications
 */
public class SpecKeyInterval implements org.apache.thrift.TBase<SpecKeyInterval, SpecKeyInterval._Fields>, java.io.Serializable, Cloneable, Comparable<SpecKeyInterval> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecKeyInterval");

  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecKeyIntervalStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecKeyIntervalTupleSchemeFactory();

  /**
   * The Key Start Spec, the start of cells-interval key match
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> start; // optional
  /**
   * The Key Finish Spec, the finish of cells-interval key match
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> finish; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Key Start Spec, the start of cells-interval key match
     */
    START((short)1, "start"),
    /**
     * The Key Finish Spec, the finish of cells-interval key match
     */
    FINISH((short)2, "finish");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // START
          return START;
        case 2: // FINISH
          return FINISH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.START,_Fields.FINISH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "SpecKey")));
    tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "SpecKey")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecKeyInterval.class, metaDataMap);
  }

  public SpecKeyInterval() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecKeyInterval(SpecKeyInterval other) {
    if (other.isSetStart()) {
      java.util.List<SpecFraction> __this__start = new java.util.ArrayList<SpecFraction>(other.start.size());
      for (SpecFraction other_element : other.start) {
        __this__start.add(new SpecFraction(other_element));
      }
      this.start = __this__start;
    }
    if (other.isSetFinish()) {
      java.util.List<SpecFraction> __this__finish = new java.util.ArrayList<SpecFraction>(other.finish.size());
      for (SpecFraction other_element : other.finish) {
        __this__finish.add(new SpecFraction(other_element));
      }
      this.finish = __this__finish;
    }
  }

  public SpecKeyInterval deepCopy() {
    return new SpecKeyInterval(this);
  }

  @Override
  public void clear() {
    this.start = null;
    this.finish = null;
  }

  public int getStartSize() {
    return (this.start == null) ? 0 : this.start.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecFraction> getStartIterator() {
    return (this.start == null) ? null : this.start.iterator();
  }

  public void addToStart(SpecFraction elem) {
    if (this.start == null) {
      this.start = new java.util.ArrayList<SpecFraction>();
    }
    this.start.add(elem);
  }

  /**
   * The Key Start Spec, the start of cells-interval key match
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecFraction> getStart() {
    return this.start;
  }

  /**
   * The Key Start Spec, the start of cells-interval key match
   */
  public SpecKeyInterval setStart(@org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> start) {
    this.start = start;
    return this;
  }

  public void unsetStart() {
    this.start = null;
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return this.start != null;
  }

  public void setStartIsSet(boolean value) {
    if (!value) {
      this.start = null;
    }
  }

  public int getFinishSize() {
    return (this.finish == null) ? 0 : this.finish.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecFraction> getFinishIterator() {
    return (this.finish == null) ? null : this.finish.iterator();
  }

  public void addToFinish(SpecFraction elem) {
    if (this.finish == null) {
      this.finish = new java.util.ArrayList<SpecFraction>();
    }
    this.finish.add(elem);
  }

  /**
   * The Key Finish Spec, the finish of cells-interval key match
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecFraction> getFinish() {
    return this.finish;
  }

  /**
   * The Key Finish Spec, the finish of cells-interval key match
   */
  public SpecKeyInterval setFinish(@org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> finish) {
    this.finish = finish;
    return this;
  }

  public void unsetFinish() {
    this.finish = null;
  }

  /** Returns true if field finish is set (has been assigned a value) and false otherwise */
  public boolean isSetFinish() {
    return this.finish != null;
  }

  public void setFinishIsSet(boolean value) {
    if (!value) {
      this.finish = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((java.util.List<SpecFraction>)value);
      }
      break;

    case FINISH:
      if (value == null) {
        unsetFinish();
      } else {
        setFinish((java.util.List<SpecFraction>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case START:
      return getStart();

    case FINISH:
      return getFinish();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case START:
      return isSetStart();
    case FINISH:
      return isSetFinish();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpecKeyInterval)
      return this.equals((SpecKeyInterval)that);
    return false;
  }

  public boolean equals(SpecKeyInterval that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_start = true && this.isSetStart();
    boolean that_present_start = true && that.isSetStart();
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (!this.start.equals(that.start))
        return false;
    }

    boolean this_present_finish = true && this.isSetFinish();
    boolean that_present_finish = true && that.isSetFinish();
    if (this_present_finish || that_present_finish) {
      if (!(this_present_finish && that_present_finish))
        return false;
      if (!this.finish.equals(that.finish))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStart()) ? 131071 : 524287);
    if (isSetStart())
      hashCode = hashCode * 8191 + start.hashCode();

    hashCode = hashCode * 8191 + ((isSetFinish()) ? 131071 : 524287);
    if (isSetFinish())
      hashCode = hashCode * 8191 + finish.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpecKeyInterval other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFinish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecKeyInterval(");
    boolean first = true;

    if (isSetStart()) {
      sb.append("start:");
      if (this.start == null) {
        sb.append("null");
      } else {
        sb.append(this.start);
      }
      first = false;
    }
    if (isSetFinish()) {
      if (!first) sb.append(", ");
      sb.append("finish:");
      if (this.finish == null) {
        sb.append("null");
      } else {
        sb.append(this.finish);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecKeyIntervalStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecKeyIntervalStandardScheme getScheme() {
      return new SpecKeyIntervalStandardScheme();
    }
  }

  private static class SpecKeyIntervalStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecKeyInterval> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecKeyInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.start = new java.util.ArrayList<SpecFraction>(_list24.size);
                @org.apache.thrift.annotation.Nullable SpecFraction _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new SpecFraction();
                  _elem25.read(iprot);
                  struct.start.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FINISH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.finish = new java.util.ArrayList<SpecFraction>(_list27.size);
                @org.apache.thrift.annotation.Nullable SpecFraction _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new SpecFraction();
                  _elem28.read(iprot);
                  struct.finish.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setFinishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecKeyInterval struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.start != null) {
        if (struct.isSetStart()) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.start.size()));
            for (SpecFraction _iter30 : struct.start)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.finish != null) {
        if (struct.isSetFinish()) {
          oprot.writeFieldBegin(FINISH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.finish.size()));
            for (SpecFraction _iter31 : struct.finish)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecKeyIntervalTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecKeyIntervalTupleScheme getScheme() {
      return new SpecKeyIntervalTupleScheme();
    }
  }

  private static class SpecKeyIntervalTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecKeyInterval> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecKeyInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStart()) {
        optionals.set(0);
      }
      if (struct.isSetFinish()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStart()) {
        {
          oprot.writeI32(struct.start.size());
          for (SpecFraction _iter32 : struct.start)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetFinish()) {
        {
          oprot.writeI32(struct.finish.size());
          for (SpecFraction _iter33 : struct.finish)
          {
            _iter33.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecKeyInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.start = new java.util.ArrayList<SpecFraction>(_list34.size);
          @org.apache.thrift.annotation.Nullable SpecFraction _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new SpecFraction();
            _elem35.read(iprot);
            struct.start.add(_elem35);
          }
        }
        struct.setStartIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.finish = new java.util.ArrayList<SpecFraction>(_list37.size);
          @org.apache.thrift.annotation.Nullable SpecFraction _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new SpecFraction();
            _elem38.read(iprot);
            struct.finish.add(_elem38);
          }
        }
        struct.setFinishIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

