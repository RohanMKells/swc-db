/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * The Specs for Schemas for using with list_columns or compact_columns
 */
public class SpecSchemas implements org.apache.thrift.TBase<SpecSchemas, SpecSchemas._Fields>, java.io.Serializable, Cloneable, Comparable<SpecSchemas> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecSchemas");

  private static final org.apache.thrift.protocol.TField CIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cids", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("names", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField PATTERNS_FIELD_DESC = new org.apache.thrift.protocol.TField("patterns", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecSchemasStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecSchemasTupleSchemeFactory();

  /**
   * The Column IDs
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> cids; // optional
  /**
   * The Column Names
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names; // optional
  /**
   * The Schema's Column Name patterns
   */
  public @org.apache.thrift.annotation.Nullable java.util.List<SchemaPattern> patterns; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * The Column IDs
     */
    CIDS((short)1, "cids"),
    /**
     * The Column Names
     */
    NAMES((short)2, "names"),
    /**
     * The Schema's Column Name patterns
     */
    PATTERNS((short)3, "patterns");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CIDS
          return CIDS;
        case 2: // NAMES
          return NAMES;
        case 3: // PATTERNS
          return PATTERNS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CIDS,_Fields.NAMES,_Fields.PATTERNS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CIDS, new org.apache.thrift.meta_data.FieldMetaData("cids", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.NAMES, new org.apache.thrift.meta_data.FieldMetaData("names", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PATTERNS, new org.apache.thrift.meta_data.FieldMetaData("patterns", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SchemaPattern.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecSchemas.class, metaDataMap);
  }

  public SpecSchemas() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecSchemas(SpecSchemas other) {
    if (other.isSetCids()) {
      java.util.List<java.lang.Long> __this__cids = new java.util.ArrayList<java.lang.Long>(other.cids);
      this.cids = __this__cids;
    }
    if (other.isSetNames()) {
      java.util.List<java.lang.String> __this__names = new java.util.ArrayList<java.lang.String>(other.names);
      this.names = __this__names;
    }
    if (other.isSetPatterns()) {
      java.util.List<SchemaPattern> __this__patterns = new java.util.ArrayList<SchemaPattern>(other.patterns.size());
      for (SchemaPattern other_element : other.patterns) {
        __this__patterns.add(new SchemaPattern(other_element));
      }
      this.patterns = __this__patterns;
    }
  }

  public SpecSchemas deepCopy() {
    return new SpecSchemas(this);
  }

  @Override
  public void clear() {
    this.cids = null;
    this.names = null;
    this.patterns = null;
  }

  public int getCidsSize() {
    return (this.cids == null) ? 0 : this.cids.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Long> getCidsIterator() {
    return (this.cids == null) ? null : this.cids.iterator();
  }

  public void addToCids(long elem) {
    if (this.cids == null) {
      this.cids = new java.util.ArrayList<java.lang.Long>();
    }
    this.cids.add(elem);
  }

  /**
   * The Column IDs
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Long> getCids() {
    return this.cids;
  }

  /**
   * The Column IDs
   */
  public SpecSchemas setCids(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Long> cids) {
    this.cids = cids;
    return this;
  }

  public void unsetCids() {
    this.cids = null;
  }

  /** Returns true if field cids is set (has been assigned a value) and false otherwise */
  public boolean isSetCids() {
    return this.cids != null;
  }

  public void setCidsIsSet(boolean value) {
    if (!value) {
      this.cids = null;
    }
  }

  public int getNamesSize() {
    return (this.names == null) ? 0 : this.names.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNamesIterator() {
    return (this.names == null) ? null : this.names.iterator();
  }

  public void addToNames(java.lang.String elem) {
    if (this.names == null) {
      this.names = new java.util.ArrayList<java.lang.String>();
    }
    this.names.add(elem);
  }

  /**
   * The Column Names
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNames() {
    return this.names;
  }

  /**
   * The Column Names
   */
  public SpecSchemas setNames(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> names) {
    this.names = names;
    return this;
  }

  public void unsetNames() {
    this.names = null;
  }

  /** Returns true if field names is set (has been assigned a value) and false otherwise */
  public boolean isSetNames() {
    return this.names != null;
  }

  public void setNamesIsSet(boolean value) {
    if (!value) {
      this.names = null;
    }
  }

  public int getPatternsSize() {
    return (this.patterns == null) ? 0 : this.patterns.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SchemaPattern> getPatternsIterator() {
    return (this.patterns == null) ? null : this.patterns.iterator();
  }

  public void addToPatterns(SchemaPattern elem) {
    if (this.patterns == null) {
      this.patterns = new java.util.ArrayList<SchemaPattern>();
    }
    this.patterns.add(elem);
  }

  /**
   * The Schema's Column Name patterns
   */
  @org.apache.thrift.annotation.Nullable
  public java.util.List<SchemaPattern> getPatterns() {
    return this.patterns;
  }

  /**
   * The Schema's Column Name patterns
   */
  public SpecSchemas setPatterns(@org.apache.thrift.annotation.Nullable java.util.List<SchemaPattern> patterns) {
    this.patterns = patterns;
    return this;
  }

  public void unsetPatterns() {
    this.patterns = null;
  }

  /** Returns true if field patterns is set (has been assigned a value) and false otherwise */
  public boolean isSetPatterns() {
    return this.patterns != null;
  }

  public void setPatternsIsSet(boolean value) {
    if (!value) {
      this.patterns = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CIDS:
      if (value == null) {
        unsetCids();
      } else {
        setCids((java.util.List<java.lang.Long>)value);
      }
      break;

    case NAMES:
      if (value == null) {
        unsetNames();
      } else {
        setNames((java.util.List<java.lang.String>)value);
      }
      break;

    case PATTERNS:
      if (value == null) {
        unsetPatterns();
      } else {
        setPatterns((java.util.List<SchemaPattern>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CIDS:
      return getCids();

    case NAMES:
      return getNames();

    case PATTERNS:
      return getPatterns();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CIDS:
      return isSetCids();
    case NAMES:
      return isSetNames();
    case PATTERNS:
      return isSetPatterns();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpecSchemas)
      return this.equals((SpecSchemas)that);
    return false;
  }

  public boolean equals(SpecSchemas that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_cids = true && this.isSetCids();
    boolean that_present_cids = true && that.isSetCids();
    if (this_present_cids || that_present_cids) {
      if (!(this_present_cids && that_present_cids))
        return false;
      if (!this.cids.equals(that.cids))
        return false;
    }

    boolean this_present_names = true && this.isSetNames();
    boolean that_present_names = true && that.isSetNames();
    if (this_present_names || that_present_names) {
      if (!(this_present_names && that_present_names))
        return false;
      if (!this.names.equals(that.names))
        return false;
    }

    boolean this_present_patterns = true && this.isSetPatterns();
    boolean that_present_patterns = true && that.isSetPatterns();
    if (this_present_patterns || that_present_patterns) {
      if (!(this_present_patterns && that_present_patterns))
        return false;
      if (!this.patterns.equals(that.patterns))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCids()) ? 131071 : 524287);
    if (isSetCids())
      hashCode = hashCode * 8191 + cids.hashCode();

    hashCode = hashCode * 8191 + ((isSetNames()) ? 131071 : 524287);
    if (isSetNames())
      hashCode = hashCode * 8191 + names.hashCode();

    hashCode = hashCode * 8191 + ((isSetPatterns()) ? 131071 : 524287);
    if (isSetPatterns())
      hashCode = hashCode * 8191 + patterns.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpecSchemas other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCids()).compareTo(other.isSetCids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cids, other.cids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNames()).compareTo(other.isSetNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.names, other.names);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPatterns()).compareTo(other.isSetPatterns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPatterns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.patterns, other.patterns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecSchemas(");
    boolean first = true;

    if (isSetCids()) {
      sb.append("cids:");
      if (this.cids == null) {
        sb.append("null");
      } else {
        sb.append(this.cids);
      }
      first = false;
    }
    if (isSetNames()) {
      if (!first) sb.append(", ");
      sb.append("names:");
      if (this.names == null) {
        sb.append("null");
      } else {
        sb.append(this.names);
      }
      first = false;
    }
    if (isSetPatterns()) {
      if (!first) sb.append(", ");
      sb.append("patterns:");
      if (this.patterns == null) {
        sb.append("null");
      } else {
        sb.append(this.patterns);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecSchemasStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecSchemasStandardScheme getScheme() {
      return new SpecSchemasStandardScheme();
    }
  }

  private static class SpecSchemasStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecSchemas> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecSchemas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.cids = new java.util.ArrayList<java.lang.Long>(_list0.size);
                long _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI64();
                  struct.cids.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.names = new java.util.ArrayList<java.lang.String>(_list3.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readString();
                  struct.names.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PATTERNS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list6 = iprot.readListBegin();
                struct.patterns = new java.util.ArrayList<SchemaPattern>(_list6.size);
                @org.apache.thrift.annotation.Nullable SchemaPattern _elem7;
                for (int _i8 = 0; _i8 < _list6.size; ++_i8)
                {
                  _elem7 = new SchemaPattern();
                  _elem7.read(iprot);
                  struct.patterns.add(_elem7);
                }
                iprot.readListEnd();
              }
              struct.setPatternsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecSchemas struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.cids != null) {
        if (struct.isSetCids()) {
          oprot.writeFieldBegin(CIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.cids.size()));
            for (long _iter9 : struct.cids)
            {
              oprot.writeI64(_iter9);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.names != null) {
        if (struct.isSetNames()) {
          oprot.writeFieldBegin(NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.names.size()));
            for (java.lang.String _iter10 : struct.names)
            {
              oprot.writeString(_iter10);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.patterns != null) {
        if (struct.isSetPatterns()) {
          oprot.writeFieldBegin(PATTERNS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.patterns.size()));
            for (SchemaPattern _iter11 : struct.patterns)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecSchemasTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecSchemasTupleScheme getScheme() {
      return new SpecSchemasTupleScheme();
    }
  }

  private static class SpecSchemasTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecSchemas> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecSchemas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCids()) {
        optionals.set(0);
      }
      if (struct.isSetNames()) {
        optionals.set(1);
      }
      if (struct.isSetPatterns()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCids()) {
        {
          oprot.writeI32(struct.cids.size());
          for (long _iter12 : struct.cids)
          {
            oprot.writeI64(_iter12);
          }
        }
      }
      if (struct.isSetNames()) {
        {
          oprot.writeI32(struct.names.size());
          for (java.lang.String _iter13 : struct.names)
          {
            oprot.writeString(_iter13);
          }
        }
      }
      if (struct.isSetPatterns()) {
        {
          oprot.writeI32(struct.patterns.size());
          for (SchemaPattern _iter14 : struct.patterns)
          {
            _iter14.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecSchemas struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list15 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.cids = new java.util.ArrayList<java.lang.Long>(_list15.size);
          long _elem16;
          for (int _i17 = 0; _i17 < _list15.size; ++_i17)
          {
            _elem16 = iprot.readI64();
            struct.cids.add(_elem16);
          }
        }
        struct.setCidsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.names = new java.util.ArrayList<java.lang.String>(_list18.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem19;
          for (int _i20 = 0; _i20 < _list18.size; ++_i20)
          {
            _elem19 = iprot.readString();
            struct.names.add(_elem19);
          }
        }
        struct.setNamesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.patterns = new java.util.ArrayList<SchemaPattern>(_list21.size);
          @org.apache.thrift.annotation.Nullable SchemaPattern _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new SchemaPattern();
            _elem22.read(iprot);
            struct.patterns.add(_elem22);
          }
        }
        struct.setPatternsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

