/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;


/**
 * The available logical Comparators, plus extended logic options applied with 'v' for VOLUME
 */
public enum Comp implements org.apache.thrift.TEnum {
  /**
   * [      ]  :   none           (no comparison aplied)
   */
  NONE(0),
  /**
   * [  =^  ]  :   -pf [prefix]   (starts-with)
   */
  PF(1),
  /**
   * [  >   ]  :   -gt            (greater-than)
   */
  GT(2),
  /**
   * [  >=  ]  :   -ge            (greater-equal)
   */
  GE(3),
  /**
   * [  =   ]  :   -eq            (equal)
   */
  EQ(4),
  /**
   * [  <=  ]  :   -le            (lower-equal)
   */
  LE(5),
  /**
   * [  <   ]  :   -lt            (lower-than)
   */
  LT(6),
  /**
   * [  !=  ]  :   -ne            (not-equal)
   */
  NE(7),
  /**
   * [  re  ]  :   -re [r,regexp] (regular-expression)
   */
  RE(8),
  /**
   * [  v>  ]  :   -vgt           (vol greater-than)
   */
  VGT(9),
  /**
   * [  v>= ]  :   -vge           (vol greater-equal)
   */
  VGE(10),
  /**
   * [  v<= ]  :   -vle           (vol lower-equal)
   */
  VLE(11),
  /**
   * [  v<  ]  :   -vlt           (vol lower-than)
   */
  VLT(12);

  private final int value;

  private Comp(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  @org.apache.thrift.annotation.Nullable
  public static Comp findByValue(int value) { 
    switch (value) {
      case 0:
        return NONE;
      case 1:
        return PF;
      case 2:
        return GT;
      case 3:
        return GE;
      case 4:
        return EQ;
      case 5:
        return LE;
      case 6:
        return LT;
      case 7:
        return NE;
      case 8:
        return RE;
      case 9:
        return VGT;
      case 10:
        return VGE;
      case 11:
        return VLE;
      case 12:
        return VLT;
      default:
        return null;
    }
  }
}
