/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.swcdb.thrift.gen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-07-14")
public class SpecInterval implements org.apache.thrift.TBase<SpecInterval, SpecInterval._Fields>, java.io.Serializable, Cloneable, Comparable<SpecInterval> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecInterval");

  private static final org.apache.thrift.protocol.TField RANGE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("range_begin", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RANGE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("range_end", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField RANGE_OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("range_offset", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField OFFSET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("offset_key", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField OFFSET_REV_FIELD_DESC = new org.apache.thrift.protocol.TField("offset_rev", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField KEY_START_FIELD_DESC = new org.apache.thrift.protocol.TField("key_start", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField KEY_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("key_finish", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField TS_START_FIELD_DESC = new org.apache.thrift.protocol.TField("ts_start", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField TS_FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("ts_finish", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.STRUCT, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpecIntervalStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpecIntervalTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_begin; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_end; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_offset; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> offset_key; // optional
  public long offset_rev; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> key_start; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> key_finish; // optional
  public @org.apache.thrift.annotation.Nullable SpecValue value; // optional
  public @org.apache.thrift.annotation.Nullable SpecTimestamp ts_start; // optional
  public @org.apache.thrift.annotation.Nullable SpecTimestamp ts_finish; // optional
  public @org.apache.thrift.annotation.Nullable SpecFlags flags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RANGE_BEGIN((short)1, "range_begin"),
    RANGE_END((short)2, "range_end"),
    RANGE_OFFSET((short)3, "range_offset"),
    OFFSET_KEY((short)4, "offset_key"),
    OFFSET_REV((short)5, "offset_rev"),
    KEY_START((short)6, "key_start"),
    KEY_FINISH((short)7, "key_finish"),
    VALUE((short)8, "value"),
    TS_START((short)9, "ts_start"),
    TS_FINISH((short)10, "ts_finish"),
    FLAGS((short)11, "flags");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RANGE_BEGIN
          return RANGE_BEGIN;
        case 2: // RANGE_END
          return RANGE_END;
        case 3: // RANGE_OFFSET
          return RANGE_OFFSET;
        case 4: // OFFSET_KEY
          return OFFSET_KEY;
        case 5: // OFFSET_REV
          return OFFSET_REV;
        case 6: // KEY_START
          return KEY_START;
        case 7: // KEY_FINISH
          return KEY_FINISH;
        case 8: // VALUE
          return VALUE;
        case 9: // TS_START
          return TS_START;
        case 10: // TS_FINISH
          return TS_FINISH;
        case 11: // FLAGS
          return FLAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFSET_REV_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RANGE_BEGIN,_Fields.RANGE_END,_Fields.RANGE_OFFSET,_Fields.OFFSET_KEY,_Fields.OFFSET_REV,_Fields.KEY_START,_Fields.KEY_FINISH,_Fields.VALUE,_Fields.TS_START,_Fields.TS_FINISH,_Fields.FLAGS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RANGE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("range_begin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Key")));
    tmpMap.put(_Fields.RANGE_END, new org.apache.thrift.meta_data.FieldMetaData("range_end", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Key")));
    tmpMap.put(_Fields.RANGE_OFFSET, new org.apache.thrift.meta_data.FieldMetaData("range_offset", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Key")));
    tmpMap.put(_Fields.OFFSET_KEY, new org.apache.thrift.meta_data.FieldMetaData("offset_key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "Key")));
    tmpMap.put(_Fields.OFFSET_REV, new org.apache.thrift.meta_data.FieldMetaData("offset_rev", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_START, new org.apache.thrift.meta_data.FieldMetaData("key_start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "SpecKey")));
    tmpMap.put(_Fields.KEY_FINISH, new org.apache.thrift.meta_data.FieldMetaData("key_finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "SpecKey")));
    tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecValue.class)));
    tmpMap.put(_Fields.TS_START, new org.apache.thrift.meta_data.FieldMetaData("ts_start", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecTimestamp.class)));
    tmpMap.put(_Fields.TS_FINISH, new org.apache.thrift.meta_data.FieldMetaData("ts_finish", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecTimestamp.class)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpecFlags.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecInterval.class, metaDataMap);
  }

  public SpecInterval() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecInterval(SpecInterval other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRange_begin()) {
      java.util.List<java.nio.ByteBuffer> __this__range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(other.range_begin);
      this.range_begin = __this__range_begin;
    }
    if (other.isSetRange_end()) {
      java.util.List<java.nio.ByteBuffer> __this__range_end = new java.util.ArrayList<java.nio.ByteBuffer>(other.range_end);
      this.range_end = __this__range_end;
    }
    if (other.isSetRange_offset()) {
      java.util.List<java.nio.ByteBuffer> __this__range_offset = new java.util.ArrayList<java.nio.ByteBuffer>(other.range_offset);
      this.range_offset = __this__range_offset;
    }
    if (other.isSetOffset_key()) {
      java.util.List<java.nio.ByteBuffer> __this__offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(other.offset_key);
      this.offset_key = __this__offset_key;
    }
    this.offset_rev = other.offset_rev;
    if (other.isSetKey_start()) {
      java.util.List<SpecFraction> __this__key_start = new java.util.ArrayList<SpecFraction>(other.key_start.size());
      for (SpecFraction other_element : other.key_start) {
        __this__key_start.add(new SpecFraction(other_element));
      }
      this.key_start = __this__key_start;
    }
    if (other.isSetKey_finish()) {
      java.util.List<SpecFraction> __this__key_finish = new java.util.ArrayList<SpecFraction>(other.key_finish.size());
      for (SpecFraction other_element : other.key_finish) {
        __this__key_finish.add(new SpecFraction(other_element));
      }
      this.key_finish = __this__key_finish;
    }
    if (other.isSetValue()) {
      this.value = new SpecValue(other.value);
    }
    if (other.isSetTs_start()) {
      this.ts_start = new SpecTimestamp(other.ts_start);
    }
    if (other.isSetTs_finish()) {
      this.ts_finish = new SpecTimestamp(other.ts_finish);
    }
    if (other.isSetFlags()) {
      this.flags = new SpecFlags(other.flags);
    }
  }

  public SpecInterval deepCopy() {
    return new SpecInterval(this);
  }

  @Override
  public void clear() {
    this.range_begin = null;
    this.range_end = null;
    this.range_offset = null;
    this.offset_key = null;
    setOffset_revIsSet(false);
    this.offset_rev = 0;
    this.key_start = null;
    this.key_finish = null;
    this.value = null;
    this.ts_start = null;
    this.ts_finish = null;
    this.flags = null;
  }

  public int getRange_beginSize() {
    return (this.range_begin == null) ? 0 : this.range_begin.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRange_beginIterator() {
    return (this.range_begin == null) ? null : this.range_begin.iterator();
  }

  public void addToRange_begin(java.nio.ByteBuffer elem) {
    if (this.range_begin == null) {
      this.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.range_begin.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRange_begin() {
    return this.range_begin;
  }

  public SpecInterval setRange_begin(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_begin) {
    this.range_begin = range_begin;
    return this;
  }

  public void unsetRange_begin() {
    this.range_begin = null;
  }

  /** Returns true if field range_begin is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_begin() {
    return this.range_begin != null;
  }

  public void setRange_beginIsSet(boolean value) {
    if (!value) {
      this.range_begin = null;
    }
  }

  public int getRange_endSize() {
    return (this.range_end == null) ? 0 : this.range_end.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRange_endIterator() {
    return (this.range_end == null) ? null : this.range_end.iterator();
  }

  public void addToRange_end(java.nio.ByteBuffer elem) {
    if (this.range_end == null) {
      this.range_end = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.range_end.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRange_end() {
    return this.range_end;
  }

  public SpecInterval setRange_end(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_end) {
    this.range_end = range_end;
    return this;
  }

  public void unsetRange_end() {
    this.range_end = null;
  }

  /** Returns true if field range_end is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_end() {
    return this.range_end != null;
  }

  public void setRange_endIsSet(boolean value) {
    if (!value) {
      this.range_end = null;
    }
  }

  public int getRange_offsetSize() {
    return (this.range_offset == null) ? 0 : this.range_offset.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getRange_offsetIterator() {
    return (this.range_offset == null) ? null : this.range_offset.iterator();
  }

  public void addToRange_offset(java.nio.ByteBuffer elem) {
    if (this.range_offset == null) {
      this.range_offset = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.range_offset.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getRange_offset() {
    return this.range_offset;
  }

  public SpecInterval setRange_offset(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> range_offset) {
    this.range_offset = range_offset;
    return this;
  }

  public void unsetRange_offset() {
    this.range_offset = null;
  }

  /** Returns true if field range_offset is set (has been assigned a value) and false otherwise */
  public boolean isSetRange_offset() {
    return this.range_offset != null;
  }

  public void setRange_offsetIsSet(boolean value) {
    if (!value) {
      this.range_offset = null;
    }
  }

  public int getOffset_keySize() {
    return (this.offset_key == null) ? 0 : this.offset_key.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getOffset_keyIterator() {
    return (this.offset_key == null) ? null : this.offset_key.iterator();
  }

  public void addToOffset_key(java.nio.ByteBuffer elem) {
    if (this.offset_key == null) {
      this.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.offset_key.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getOffset_key() {
    return this.offset_key;
  }

  public SpecInterval setOffset_key(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> offset_key) {
    this.offset_key = offset_key;
    return this;
  }

  public void unsetOffset_key() {
    this.offset_key = null;
  }

  /** Returns true if field offset_key is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset_key() {
    return this.offset_key != null;
  }

  public void setOffset_keyIsSet(boolean value) {
    if (!value) {
      this.offset_key = null;
    }
  }

  public long getOffset_rev() {
    return this.offset_rev;
  }

  public SpecInterval setOffset_rev(long offset_rev) {
    this.offset_rev = offset_rev;
    setOffset_revIsSet(true);
    return this;
  }

  public void unsetOffset_rev() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_REV_ISSET_ID);
  }

  /** Returns true if field offset_rev is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset_rev() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_REV_ISSET_ID);
  }

  public void setOffset_revIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_REV_ISSET_ID, value);
  }

  public int getKey_startSize() {
    return (this.key_start == null) ? 0 : this.key_start.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecFraction> getKey_startIterator() {
    return (this.key_start == null) ? null : this.key_start.iterator();
  }

  public void addToKey_start(SpecFraction elem) {
    if (this.key_start == null) {
      this.key_start = new java.util.ArrayList<SpecFraction>();
    }
    this.key_start.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecFraction> getKey_start() {
    return this.key_start;
  }

  public SpecInterval setKey_start(@org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> key_start) {
    this.key_start = key_start;
    return this;
  }

  public void unsetKey_start() {
    this.key_start = null;
  }

  /** Returns true if field key_start is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_start() {
    return this.key_start != null;
  }

  public void setKey_startIsSet(boolean value) {
    if (!value) {
      this.key_start = null;
    }
  }

  public int getKey_finishSize() {
    return (this.key_finish == null) ? 0 : this.key_finish.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<SpecFraction> getKey_finishIterator() {
    return (this.key_finish == null) ? null : this.key_finish.iterator();
  }

  public void addToKey_finish(SpecFraction elem) {
    if (this.key_finish == null) {
      this.key_finish = new java.util.ArrayList<SpecFraction>();
    }
    this.key_finish.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<SpecFraction> getKey_finish() {
    return this.key_finish;
  }

  public SpecInterval setKey_finish(@org.apache.thrift.annotation.Nullable java.util.List<SpecFraction> key_finish) {
    this.key_finish = key_finish;
    return this;
  }

  public void unsetKey_finish() {
    this.key_finish = null;
  }

  /** Returns true if field key_finish is set (has been assigned a value) and false otherwise */
  public boolean isSetKey_finish() {
    return this.key_finish != null;
  }

  public void setKey_finishIsSet(boolean value) {
    if (!value) {
      this.key_finish = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SpecValue getValue() {
    return this.value;
  }

  public SpecInterval setValue(@org.apache.thrift.annotation.Nullable SpecValue value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  /** Returns true if field value is set (has been assigned a value) and false otherwise */
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SpecTimestamp getTs_start() {
    return this.ts_start;
  }

  public SpecInterval setTs_start(@org.apache.thrift.annotation.Nullable SpecTimestamp ts_start) {
    this.ts_start = ts_start;
    return this;
  }

  public void unsetTs_start() {
    this.ts_start = null;
  }

  /** Returns true if field ts_start is set (has been assigned a value) and false otherwise */
  public boolean isSetTs_start() {
    return this.ts_start != null;
  }

  public void setTs_startIsSet(boolean value) {
    if (!value) {
      this.ts_start = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SpecTimestamp getTs_finish() {
    return this.ts_finish;
  }

  public SpecInterval setTs_finish(@org.apache.thrift.annotation.Nullable SpecTimestamp ts_finish) {
    this.ts_finish = ts_finish;
    return this;
  }

  public void unsetTs_finish() {
    this.ts_finish = null;
  }

  /** Returns true if field ts_finish is set (has been assigned a value) and false otherwise */
  public boolean isSetTs_finish() {
    return this.ts_finish != null;
  }

  public void setTs_finishIsSet(boolean value) {
    if (!value) {
      this.ts_finish = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public SpecFlags getFlags() {
    return this.flags;
  }

  public SpecInterval setFlags(@org.apache.thrift.annotation.Nullable SpecFlags flags) {
    this.flags = flags;
    return this;
  }

  public void unsetFlags() {
    this.flags = null;
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return this.flags != null;
  }

  public void setFlagsIsSet(boolean value) {
    if (!value) {
      this.flags = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RANGE_BEGIN:
      if (value == null) {
        unsetRange_begin();
      } else {
        setRange_begin((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case RANGE_END:
      if (value == null) {
        unsetRange_end();
      } else {
        setRange_end((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case RANGE_OFFSET:
      if (value == null) {
        unsetRange_offset();
      } else {
        setRange_offset((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OFFSET_KEY:
      if (value == null) {
        unsetOffset_key();
      } else {
        setOffset_key((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case OFFSET_REV:
      if (value == null) {
        unsetOffset_rev();
      } else {
        setOffset_rev((java.lang.Long)value);
      }
      break;

    case KEY_START:
      if (value == null) {
        unsetKey_start();
      } else {
        setKey_start((java.util.List<SpecFraction>)value);
      }
      break;

    case KEY_FINISH:
      if (value == null) {
        unsetKey_finish();
      } else {
        setKey_finish((java.util.List<SpecFraction>)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((SpecValue)value);
      }
      break;

    case TS_START:
      if (value == null) {
        unsetTs_start();
      } else {
        setTs_start((SpecTimestamp)value);
      }
      break;

    case TS_FINISH:
      if (value == null) {
        unsetTs_finish();
      } else {
        setTs_finish((SpecTimestamp)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((SpecFlags)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RANGE_BEGIN:
      return getRange_begin();

    case RANGE_END:
      return getRange_end();

    case RANGE_OFFSET:
      return getRange_offset();

    case OFFSET_KEY:
      return getOffset_key();

    case OFFSET_REV:
      return getOffset_rev();

    case KEY_START:
      return getKey_start();

    case KEY_FINISH:
      return getKey_finish();

    case VALUE:
      return getValue();

    case TS_START:
      return getTs_start();

    case TS_FINISH:
      return getTs_finish();

    case FLAGS:
      return getFlags();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RANGE_BEGIN:
      return isSetRange_begin();
    case RANGE_END:
      return isSetRange_end();
    case RANGE_OFFSET:
      return isSetRange_offset();
    case OFFSET_KEY:
      return isSetOffset_key();
    case OFFSET_REV:
      return isSetOffset_rev();
    case KEY_START:
      return isSetKey_start();
    case KEY_FINISH:
      return isSetKey_finish();
    case VALUE:
      return isSetValue();
    case TS_START:
      return isSetTs_start();
    case TS_FINISH:
      return isSetTs_finish();
    case FLAGS:
      return isSetFlags();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpecInterval)
      return this.equals((SpecInterval)that);
    return false;
  }

  public boolean equals(SpecInterval that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_range_begin = true && this.isSetRange_begin();
    boolean that_present_range_begin = true && that.isSetRange_begin();
    if (this_present_range_begin || that_present_range_begin) {
      if (!(this_present_range_begin && that_present_range_begin))
        return false;
      if (!this.range_begin.equals(that.range_begin))
        return false;
    }

    boolean this_present_range_end = true && this.isSetRange_end();
    boolean that_present_range_end = true && that.isSetRange_end();
    if (this_present_range_end || that_present_range_end) {
      if (!(this_present_range_end && that_present_range_end))
        return false;
      if (!this.range_end.equals(that.range_end))
        return false;
    }

    boolean this_present_range_offset = true && this.isSetRange_offset();
    boolean that_present_range_offset = true && that.isSetRange_offset();
    if (this_present_range_offset || that_present_range_offset) {
      if (!(this_present_range_offset && that_present_range_offset))
        return false;
      if (!this.range_offset.equals(that.range_offset))
        return false;
    }

    boolean this_present_offset_key = true && this.isSetOffset_key();
    boolean that_present_offset_key = true && that.isSetOffset_key();
    if (this_present_offset_key || that_present_offset_key) {
      if (!(this_present_offset_key && that_present_offset_key))
        return false;
      if (!this.offset_key.equals(that.offset_key))
        return false;
    }

    boolean this_present_offset_rev = true && this.isSetOffset_rev();
    boolean that_present_offset_rev = true && that.isSetOffset_rev();
    if (this_present_offset_rev || that_present_offset_rev) {
      if (!(this_present_offset_rev && that_present_offset_rev))
        return false;
      if (this.offset_rev != that.offset_rev)
        return false;
    }

    boolean this_present_key_start = true && this.isSetKey_start();
    boolean that_present_key_start = true && that.isSetKey_start();
    if (this_present_key_start || that_present_key_start) {
      if (!(this_present_key_start && that_present_key_start))
        return false;
      if (!this.key_start.equals(that.key_start))
        return false;
    }

    boolean this_present_key_finish = true && this.isSetKey_finish();
    boolean that_present_key_finish = true && that.isSetKey_finish();
    if (this_present_key_finish || that_present_key_finish) {
      if (!(this_present_key_finish && that_present_key_finish))
        return false;
      if (!this.key_finish.equals(that.key_finish))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!this.value.equals(that.value))
        return false;
    }

    boolean this_present_ts_start = true && this.isSetTs_start();
    boolean that_present_ts_start = true && that.isSetTs_start();
    if (this_present_ts_start || that_present_ts_start) {
      if (!(this_present_ts_start && that_present_ts_start))
        return false;
      if (!this.ts_start.equals(that.ts_start))
        return false;
    }

    boolean this_present_ts_finish = true && this.isSetTs_finish();
    boolean that_present_ts_finish = true && that.isSetTs_finish();
    if (this_present_ts_finish || that_present_ts_finish) {
      if (!(this_present_ts_finish && that_present_ts_finish))
        return false;
      if (!this.ts_finish.equals(that.ts_finish))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (!this.flags.equals(that.flags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRange_begin()) ? 131071 : 524287);
    if (isSetRange_begin())
      hashCode = hashCode * 8191 + range_begin.hashCode();

    hashCode = hashCode * 8191 + ((isSetRange_end()) ? 131071 : 524287);
    if (isSetRange_end())
      hashCode = hashCode * 8191 + range_end.hashCode();

    hashCode = hashCode * 8191 + ((isSetRange_offset()) ? 131071 : 524287);
    if (isSetRange_offset())
      hashCode = hashCode * 8191 + range_offset.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset_key()) ? 131071 : 524287);
    if (isSetOffset_key())
      hashCode = hashCode * 8191 + offset_key.hashCode();

    hashCode = hashCode * 8191 + ((isSetOffset_rev()) ? 131071 : 524287);
    if (isSetOffset_rev())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset_rev);

    hashCode = hashCode * 8191 + ((isSetKey_start()) ? 131071 : 524287);
    if (isSetKey_start())
      hashCode = hashCode * 8191 + key_start.hashCode();

    hashCode = hashCode * 8191 + ((isSetKey_finish()) ? 131071 : 524287);
    if (isSetKey_finish())
      hashCode = hashCode * 8191 + key_finish.hashCode();

    hashCode = hashCode * 8191 + ((isSetValue()) ? 131071 : 524287);
    if (isSetValue())
      hashCode = hashCode * 8191 + value.hashCode();

    hashCode = hashCode * 8191 + ((isSetTs_start()) ? 131071 : 524287);
    if (isSetTs_start())
      hashCode = hashCode * 8191 + ts_start.hashCode();

    hashCode = hashCode * 8191 + ((isSetTs_finish()) ? 131071 : 524287);
    if (isSetTs_finish())
      hashCode = hashCode * 8191 + ts_finish.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlags()) ? 131071 : 524287);
    if (isSetFlags())
      hashCode = hashCode * 8191 + flags.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SpecInterval other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRange_begin()).compareTo(other.isSetRange_begin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_begin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_begin, other.range_begin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRange_end()).compareTo(other.isSetRange_end());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_end()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_end, other.range_end);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRange_offset()).compareTo(other.isSetRange_offset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRange_offset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.range_offset, other.range_offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffset_key()).compareTo(other.isSetOffset_key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset_key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset_key, other.offset_key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffset_rev()).compareTo(other.isSetOffset_rev());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset_rev()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset_rev, other.offset_rev);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey_start()).compareTo(other.isSetKey_start());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_start()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_start, other.key_start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKey_finish()).compareTo(other.isSetKey_finish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey_finish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key_finish, other.key_finish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTs_start()).compareTo(other.isSetTs_start());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs_start()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts_start, other.ts_start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTs_finish()).compareTo(other.isSetTs_finish());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTs_finish()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ts_finish, other.ts_finish);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpecInterval(");
    boolean first = true;

    if (isSetRange_begin()) {
      sb.append("range_begin:");
      if (this.range_begin == null) {
        sb.append("null");
      } else {
        sb.append(this.range_begin);
      }
      first = false;
    }
    if (isSetRange_end()) {
      if (!first) sb.append(", ");
      sb.append("range_end:");
      if (this.range_end == null) {
        sb.append("null");
      } else {
        sb.append(this.range_end);
      }
      first = false;
    }
    if (isSetRange_offset()) {
      if (!first) sb.append(", ");
      sb.append("range_offset:");
      if (this.range_offset == null) {
        sb.append("null");
      } else {
        sb.append(this.range_offset);
      }
      first = false;
    }
    if (isSetOffset_key()) {
      if (!first) sb.append(", ");
      sb.append("offset_key:");
      if (this.offset_key == null) {
        sb.append("null");
      } else {
        sb.append(this.offset_key);
      }
      first = false;
    }
    if (isSetOffset_rev()) {
      if (!first) sb.append(", ");
      sb.append("offset_rev:");
      sb.append(this.offset_rev);
      first = false;
    }
    if (isSetKey_start()) {
      if (!first) sb.append(", ");
      sb.append("key_start:");
      if (this.key_start == null) {
        sb.append("null");
      } else {
        sb.append(this.key_start);
      }
      first = false;
    }
    if (isSetKey_finish()) {
      if (!first) sb.append(", ");
      sb.append("key_finish:");
      if (this.key_finish == null) {
        sb.append("null");
      } else {
        sb.append(this.key_finish);
      }
      first = false;
    }
    if (isSetValue()) {
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
    }
    if (isSetTs_start()) {
      if (!first) sb.append(", ");
      sb.append("ts_start:");
      if (this.ts_start == null) {
        sb.append("null");
      } else {
        sb.append(this.ts_start);
      }
      first = false;
    }
    if (isSetTs_finish()) {
      if (!first) sb.append(", ");
      sb.append("ts_finish:");
      if (this.ts_finish == null) {
        sb.append("null");
      } else {
        sb.append(this.ts_finish);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      if (this.flags == null) {
        sb.append("null");
      } else {
        sb.append(this.flags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (value != null) {
      value.validate();
    }
    if (ts_start != null) {
      ts_start.validate();
    }
    if (ts_finish != null) {
      ts_finish.validate();
    }
    if (flags != null) {
      flags.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecIntervalStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecIntervalStandardScheme getScheme() {
      return new SpecIntervalStandardScheme();
    }
  }

  private static class SpecIntervalStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpecInterval> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RANGE_BEGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(_list24.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = iprot.readBinary();
                  struct.range_begin.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setRange_beginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGE_END
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.range_end = new java.util.ArrayList<java.nio.ByteBuffer>(_list27.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = iprot.readBinary();
                  struct.range_end.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setRange_endIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANGE_OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.range_offset = new java.util.ArrayList<java.nio.ByteBuffer>(_list30.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem31;
                for (int _i32 = 0; _i32 < _list30.size; ++_i32)
                {
                  _elem31 = iprot.readBinary();
                  struct.range_offset.add(_elem31);
                }
                iprot.readListEnd();
              }
              struct.setRange_offsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OFFSET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list33.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem34;
                for (int _i35 = 0; _i35 < _list33.size; ++_i35)
                {
                  _elem34 = iprot.readBinary();
                  struct.offset_key.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setOffset_keyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFSET_REV
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset_rev = iprot.readI64();
              struct.setOffset_revIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // KEY_START
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.key_start = new java.util.ArrayList<SpecFraction>(_list36.size);
                @org.apache.thrift.annotation.Nullable SpecFraction _elem37;
                for (int _i38 = 0; _i38 < _list36.size; ++_i38)
                {
                  _elem37 = new SpecFraction();
                  _elem37.read(iprot);
                  struct.key_start.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setKey_startIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEY_FINISH
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list39 = iprot.readListBegin();
                struct.key_finish = new java.util.ArrayList<SpecFraction>(_list39.size);
                @org.apache.thrift.annotation.Nullable SpecFraction _elem40;
                for (int _i41 = 0; _i41 < _list39.size; ++_i41)
                {
                  _elem40 = new SpecFraction();
                  _elem40.read(iprot);
                  struct.key_finish.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setKey_finishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.value = new SpecValue();
              struct.value.read(iprot);
              struct.setValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TS_START
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ts_start = new SpecTimestamp();
              struct.ts_start.read(iprot);
              struct.setTs_startIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TS_FINISH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ts_finish = new SpecTimestamp();
              struct.ts_finish.read(iprot);
              struct.setTs_finishIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.flags = new SpecFlags();
              struct.flags.read(iprot);
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecInterval struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.range_begin != null) {
        if (struct.isSetRange_begin()) {
          oprot.writeFieldBegin(RANGE_BEGIN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_begin.size()));
            for (java.nio.ByteBuffer _iter42 : struct.range_begin)
            {
              oprot.writeBinary(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.range_end != null) {
        if (struct.isSetRange_end()) {
          oprot.writeFieldBegin(RANGE_END_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_end.size()));
            for (java.nio.ByteBuffer _iter43 : struct.range_end)
            {
              oprot.writeBinary(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.range_offset != null) {
        if (struct.isSetRange_offset()) {
          oprot.writeFieldBegin(RANGE_OFFSET_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.range_offset.size()));
            for (java.nio.ByteBuffer _iter44 : struct.range_offset)
            {
              oprot.writeBinary(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.offset_key != null) {
        if (struct.isSetOffset_key()) {
          oprot.writeFieldBegin(OFFSET_KEY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.offset_key.size()));
            for (java.nio.ByteBuffer _iter45 : struct.offset_key)
            {
              oprot.writeBinary(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOffset_rev()) {
        oprot.writeFieldBegin(OFFSET_REV_FIELD_DESC);
        oprot.writeI64(struct.offset_rev);
        oprot.writeFieldEnd();
      }
      if (struct.key_start != null) {
        if (struct.isSetKey_start()) {
          oprot.writeFieldBegin(KEY_START_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.key_start.size()));
            for (SpecFraction _iter46 : struct.key_start)
            {
              _iter46.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key_finish != null) {
        if (struct.isSetKey_finish()) {
          oprot.writeFieldBegin(KEY_FINISH_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.key_finish.size()));
            for (SpecFraction _iter47 : struct.key_finish)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.value != null) {
        if (struct.isSetValue()) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          struct.value.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ts_start != null) {
        if (struct.isSetTs_start()) {
          oprot.writeFieldBegin(TS_START_FIELD_DESC);
          struct.ts_start.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ts_finish != null) {
        if (struct.isSetTs_finish()) {
          oprot.writeFieldBegin(TS_FINISH_FIELD_DESC);
          struct.ts_finish.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.flags != null) {
        if (struct.isSetFlags()) {
          oprot.writeFieldBegin(FLAGS_FIELD_DESC);
          struct.flags.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecIntervalTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpecIntervalTupleScheme getScheme() {
      return new SpecIntervalTupleScheme();
    }
  }

  private static class SpecIntervalTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpecInterval> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRange_begin()) {
        optionals.set(0);
      }
      if (struct.isSetRange_end()) {
        optionals.set(1);
      }
      if (struct.isSetRange_offset()) {
        optionals.set(2);
      }
      if (struct.isSetOffset_key()) {
        optionals.set(3);
      }
      if (struct.isSetOffset_rev()) {
        optionals.set(4);
      }
      if (struct.isSetKey_start()) {
        optionals.set(5);
      }
      if (struct.isSetKey_finish()) {
        optionals.set(6);
      }
      if (struct.isSetValue()) {
        optionals.set(7);
      }
      if (struct.isSetTs_start()) {
        optionals.set(8);
      }
      if (struct.isSetTs_finish()) {
        optionals.set(9);
      }
      if (struct.isSetFlags()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRange_begin()) {
        {
          oprot.writeI32(struct.range_begin.size());
          for (java.nio.ByteBuffer _iter48 : struct.range_begin)
          {
            oprot.writeBinary(_iter48);
          }
        }
      }
      if (struct.isSetRange_end()) {
        {
          oprot.writeI32(struct.range_end.size());
          for (java.nio.ByteBuffer _iter49 : struct.range_end)
          {
            oprot.writeBinary(_iter49);
          }
        }
      }
      if (struct.isSetRange_offset()) {
        {
          oprot.writeI32(struct.range_offset.size());
          for (java.nio.ByteBuffer _iter50 : struct.range_offset)
          {
            oprot.writeBinary(_iter50);
          }
        }
      }
      if (struct.isSetOffset_key()) {
        {
          oprot.writeI32(struct.offset_key.size());
          for (java.nio.ByteBuffer _iter51 : struct.offset_key)
          {
            oprot.writeBinary(_iter51);
          }
        }
      }
      if (struct.isSetOffset_rev()) {
        oprot.writeI64(struct.offset_rev);
      }
      if (struct.isSetKey_start()) {
        {
          oprot.writeI32(struct.key_start.size());
          for (SpecFraction _iter52 : struct.key_start)
          {
            _iter52.write(oprot);
          }
        }
      }
      if (struct.isSetKey_finish()) {
        {
          oprot.writeI32(struct.key_finish.size());
          for (SpecFraction _iter53 : struct.key_finish)
          {
            _iter53.write(oprot);
          }
        }
      }
      if (struct.isSetValue()) {
        struct.value.write(oprot);
      }
      if (struct.isSetTs_start()) {
        struct.ts_start.write(oprot);
      }
      if (struct.isSetTs_finish()) {
        struct.ts_finish.write(oprot);
      }
      if (struct.isSetFlags()) {
        struct.flags.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecInterval struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list54 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.range_begin = new java.util.ArrayList<java.nio.ByteBuffer>(_list54.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem55;
          for (int _i56 = 0; _i56 < _list54.size; ++_i56)
          {
            _elem55 = iprot.readBinary();
            struct.range_begin.add(_elem55);
          }
        }
        struct.setRange_beginIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list57 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.range_end = new java.util.ArrayList<java.nio.ByteBuffer>(_list57.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem58;
          for (int _i59 = 0; _i59 < _list57.size; ++_i59)
          {
            _elem58 = iprot.readBinary();
            struct.range_end.add(_elem58);
          }
        }
        struct.setRange_endIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list60 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.range_offset = new java.util.ArrayList<java.nio.ByteBuffer>(_list60.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem61;
          for (int _i62 = 0; _i62 < _list60.size; ++_i62)
          {
            _elem61 = iprot.readBinary();
            struct.range_offset.add(_elem61);
          }
        }
        struct.setRange_offsetIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list63 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.offset_key = new java.util.ArrayList<java.nio.ByteBuffer>(_list63.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem64;
          for (int _i65 = 0; _i65 < _list63.size; ++_i65)
          {
            _elem64 = iprot.readBinary();
            struct.offset_key.add(_elem64);
          }
        }
        struct.setOffset_keyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.offset_rev = iprot.readI64();
        struct.setOffset_revIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list66 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.key_start = new java.util.ArrayList<SpecFraction>(_list66.size);
          @org.apache.thrift.annotation.Nullable SpecFraction _elem67;
          for (int _i68 = 0; _i68 < _list66.size; ++_i68)
          {
            _elem67 = new SpecFraction();
            _elem67.read(iprot);
            struct.key_start.add(_elem67);
          }
        }
        struct.setKey_startIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.key_finish = new java.util.ArrayList<SpecFraction>(_list69.size);
          @org.apache.thrift.annotation.Nullable SpecFraction _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new SpecFraction();
            _elem70.read(iprot);
            struct.key_finish.add(_elem70);
          }
        }
        struct.setKey_finishIsSet(true);
      }
      if (incoming.get(7)) {
        struct.value = new SpecValue();
        struct.value.read(iprot);
        struct.setValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ts_start = new SpecTimestamp();
        struct.ts_start.read(iprot);
        struct.setTs_startIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ts_finish = new SpecTimestamp();
        struct.ts_finish.read(iprot);
        struct.setTs_finishIsSet(true);
      }
      if (incoming.get(10)) {
        struct.flags = new SpecFlags();
        struct.flags.read(iprot);
        struct.setFlagsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

