/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


/// <summary>
/// The Schema Definition
/// </summary>
public partial class Schema : TBase
{
  private long _cid;
  private string _col_name;
  private KeySeq _col_seq;
  private ColumnType _col_type;
  private int _cell_versions;
  private int _cell_ttl;
  private EncodingType _blk_encoding;
  private int _blk_size;
  private int _blk_cells;
  private sbyte _cs_replication;
  private int _cs_size;
  private sbyte _cs_max;
  private sbyte _log_rollout_ratio;
  private sbyte _log_compact_cointervaling;
  private sbyte _log_fragment_preload;
  private sbyte _compact_percent;
  private long _revision;

  /// <summary>
  /// Column ID
  /// </summary>
  public long Cid
  {
    get
    {
      return _cid;
    }
    set
    {
      __isset.cid = true;
      this._cid = value;
    }
  }

  /// <summary>
  /// Column Name
  /// </summary>
  public string Col_name
  {
    get
    {
      return _col_name;
    }
    set
    {
      __isset.col_name = true;
      this._col_name = value;
    }
  }

  /// <summary>
  /// Column Key Sequence
  /// 
  /// <seealso cref="global::.KeySeq"/>
  /// </summary>
  public KeySeq Col_seq
  {
    get
    {
      return _col_seq;
    }
    set
    {
      __isset.col_seq = true;
      this._col_seq = value;
    }
  }

  /// <summary>
  /// Column Type
  /// 
  /// <seealso cref="global::.ColumnType"/>
  /// </summary>
  public ColumnType Col_type
  {
    get
    {
      return _col_type;
    }
    set
    {
      __isset.col_type = true;
      this._col_type = value;
    }
  }

  /// <summary>
  /// Cell Versions
  /// </summary>
  public int Cell_versions
  {
    get
    {
      return _cell_versions;
    }
    set
    {
      __isset.cell_versions = true;
      this._cell_versions = value;
    }
  }

  /// <summary>
  /// Cell Time to Live
  /// </summary>
  public int Cell_ttl
  {
    get
    {
      return _cell_ttl;
    }
    set
    {
      __isset.cell_ttl = true;
      this._cell_ttl = value;
    }
  }

  /// <summary>
  /// Block Encoding
  /// 
  /// <seealso cref="global::.EncodingType"/>
  /// </summary>
  public EncodingType Blk_encoding
  {
    get
    {
      return _blk_encoding;
    }
    set
    {
      __isset.blk_encoding = true;
      this._blk_encoding = value;
    }
  }

  /// <summary>
  /// Block Size in Bytes
  /// </summary>
  public int Blk_size
  {
    get
    {
      return _blk_size;
    }
    set
    {
      __isset.blk_size = true;
      this._blk_size = value;
    }
  }

  /// <summary>
  /// Number of Cells in Block
  /// </summary>
  public int Blk_cells
  {
    get
    {
      return _blk_cells;
    }
    set
    {
      __isset.blk_cells = true;
      this._blk_cells = value;
    }
  }

  /// <summary>
  /// CellStore file Replication
  /// </summary>
  public sbyte Cs_replication
  {
    get
    {
      return _cs_replication;
    }
    set
    {
      __isset.cs_replication = true;
      this._cs_replication = value;
    }
  }

  /// <summary>
  /// CellStore Size in Bytes
  /// </summary>
  public int Cs_size
  {
    get
    {
      return _cs_size;
    }
    set
    {
      __isset.cs_size = true;
      this._cs_size = value;
    }
  }

  /// <summary>
  /// Max CellStores in a Range
  /// </summary>
  public sbyte Cs_max
  {
    get
    {
      return _cs_max;
    }
    set
    {
      __isset.cs_max = true;
      this._cs_max = value;
    }
  }

  /// <summary>
  /// Write Fragment File on ratio reached
  /// </summary>
  public sbyte Log_rollout_ratio
  {
    get
    {
      return _log_rollout_ratio;
    }
    set
    {
      __isset.log_rollout_ratio = true;
      this._log_rollout_ratio = value;
    }
  }

  /// <summary>
  /// Min. Cointervaling Fragments for Compaction
  /// </summary>
  public sbyte Log_compact_cointervaling
  {
    get
    {
      return _log_compact_cointervaling;
    }
    set
    {
      __isset.log_compact_cointervaling = true;
      this._log_compact_cointervaling = value;
    }
  }

  /// <summary>
  /// Number of Fragment to Preload
  /// </summary>
  public sbyte Log_fragment_preload
  {
    get
    {
      return _log_fragment_preload;
    }
    set
    {
      __isset.log_fragment_preload = true;
      this._log_fragment_preload = value;
    }
  }

  /// <summary>
  /// Compact at percent reach
  /// </summary>
  public sbyte Compact_percent
  {
    get
    {
      return _compact_percent;
    }
    set
    {
      __isset.compact_percent = true;
      this._compact_percent = value;
    }
  }

  /// <summary>
  /// Schema's revision/id
  /// </summary>
  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool cid;
    public bool col_name;
    public bool col_seq;
    public bool col_type;
    public bool cell_versions;
    public bool cell_ttl;
    public bool blk_encoding;
    public bool blk_size;
    public bool blk_cells;
    public bool cs_replication;
    public bool cs_size;
    public bool cs_max;
    public bool log_rollout_ratio;
    public bool log_compact_cointervaling;
    public bool log_fragment_preload;
    public bool compact_percent;
    public bool revision;
  }

  public Schema()
  {
  }

  public Schema DeepCopy()
  {
    var tmp2 = new Schema();
    if(__isset.cid)
    {
      tmp2.Cid = this.Cid;
    }
    tmp2.__isset.cid = this.__isset.cid;
    if((Col_name != null) && __isset.col_name)
    {
      tmp2.Col_name = this.Col_name;
    }
    tmp2.__isset.col_name = this.__isset.col_name;
    if(__isset.col_seq)
    {
      tmp2.Col_seq = this.Col_seq;
    }
    tmp2.__isset.col_seq = this.__isset.col_seq;
    if(__isset.col_type)
    {
      tmp2.Col_type = this.Col_type;
    }
    tmp2.__isset.col_type = this.__isset.col_type;
    if(__isset.cell_versions)
    {
      tmp2.Cell_versions = this.Cell_versions;
    }
    tmp2.__isset.cell_versions = this.__isset.cell_versions;
    if(__isset.cell_ttl)
    {
      tmp2.Cell_ttl = this.Cell_ttl;
    }
    tmp2.__isset.cell_ttl = this.__isset.cell_ttl;
    if(__isset.blk_encoding)
    {
      tmp2.Blk_encoding = this.Blk_encoding;
    }
    tmp2.__isset.blk_encoding = this.__isset.blk_encoding;
    if(__isset.blk_size)
    {
      tmp2.Blk_size = this.Blk_size;
    }
    tmp2.__isset.blk_size = this.__isset.blk_size;
    if(__isset.blk_cells)
    {
      tmp2.Blk_cells = this.Blk_cells;
    }
    tmp2.__isset.blk_cells = this.__isset.blk_cells;
    if(__isset.cs_replication)
    {
      tmp2.Cs_replication = this.Cs_replication;
    }
    tmp2.__isset.cs_replication = this.__isset.cs_replication;
    if(__isset.cs_size)
    {
      tmp2.Cs_size = this.Cs_size;
    }
    tmp2.__isset.cs_size = this.__isset.cs_size;
    if(__isset.cs_max)
    {
      tmp2.Cs_max = this.Cs_max;
    }
    tmp2.__isset.cs_max = this.__isset.cs_max;
    if(__isset.log_rollout_ratio)
    {
      tmp2.Log_rollout_ratio = this.Log_rollout_ratio;
    }
    tmp2.__isset.log_rollout_ratio = this.__isset.log_rollout_ratio;
    if(__isset.log_compact_cointervaling)
    {
      tmp2.Log_compact_cointervaling = this.Log_compact_cointervaling;
    }
    tmp2.__isset.log_compact_cointervaling = this.__isset.log_compact_cointervaling;
    if(__isset.log_fragment_preload)
    {
      tmp2.Log_fragment_preload = this.Log_fragment_preload;
    }
    tmp2.__isset.log_fragment_preload = this.__isset.log_fragment_preload;
    if(__isset.compact_percent)
    {
      tmp2.Compact_percent = this.Compact_percent;
    }
    tmp2.__isset.compact_percent = this.__isset.compact_percent;
    if(__isset.revision)
    {
      tmp2.Revision = this.Revision;
    }
    tmp2.__isset.revision = this.__isset.revision;
    return tmp2;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Cid = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.String)
            {
              Col_name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Col_seq = (KeySeq)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.I32)
            {
              Col_type = (ColumnType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.I32)
            {
              Cell_versions = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              Cell_ttl = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.I32)
            {
              Blk_encoding = (EncodingType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.I32)
            {
              Blk_size = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 9:
            if (field.Type == TType.I32)
            {
              Blk_cells = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 10:
            if (field.Type == TType.Byte)
            {
              Cs_replication = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 11:
            if (field.Type == TType.I32)
            {
              Cs_size = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 12:
            if (field.Type == TType.Byte)
            {
              Cs_max = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 13:
            if (field.Type == TType.Byte)
            {
              Log_rollout_ratio = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 14:
            if (field.Type == TType.Byte)
            {
              Log_compact_cointervaling = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 15:
            if (field.Type == TType.Byte)
            {
              Log_fragment_preload = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 16:
            if (field.Type == TType.Byte)
            {
              Compact_percent = await iprot.ReadByteAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 17:
            if (field.Type == TType.I64)
            {
              Revision = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("Schema");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if(__isset.cid)
      {
        field.Name = "cid";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Cid, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Col_name != null) && __isset.col_name)
      {
        field.Name = "col_name";
        field.Type = TType.String;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Col_name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.col_seq)
      {
        field.Name = "col_seq";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Col_seq, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.col_type)
      {
        field.Name = "col_type";
        field.Type = TType.I32;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Col_type, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.cell_versions)
      {
        field.Name = "cell_versions";
        field.Type = TType.I32;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Cell_versions, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.cell_ttl)
      {
        field.Name = "cell_ttl";
        field.Type = TType.I32;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Cell_ttl, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.blk_encoding)
      {
        field.Name = "blk_encoding";
        field.Type = TType.I32;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async((int)Blk_encoding, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.blk_size)
      {
        field.Name = "blk_size";
        field.Type = TType.I32;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Blk_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.blk_cells)
      {
        field.Name = "blk_cells";
        field.Type = TType.I32;
        field.ID = 9;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Blk_cells, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.cs_replication)
      {
        field.Name = "cs_replication";
        field.Type = TType.Byte;
        field.ID = 10;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Cs_replication, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.cs_size)
      {
        field.Name = "cs_size";
        field.Type = TType.I32;
        field.ID = 11;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Cs_size, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.cs_max)
      {
        field.Name = "cs_max";
        field.Type = TType.Byte;
        field.ID = 12;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Cs_max, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.log_rollout_ratio)
      {
        field.Name = "log_rollout_ratio";
        field.Type = TType.Byte;
        field.ID = 13;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Log_rollout_ratio, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.log_compact_cointervaling)
      {
        field.Name = "log_compact_cointervaling";
        field.Type = TType.Byte;
        field.ID = 14;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Log_compact_cointervaling, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.log_fragment_preload)
      {
        field.Name = "log_fragment_preload";
        field.Type = TType.Byte;
        field.ID = 15;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Log_fragment_preload, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.compact_percent)
      {
        field.Name = "compact_percent";
        field.Type = TType.Byte;
        field.ID = 16;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteByteAsync(Compact_percent, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.revision)
      {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 17;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Revision, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is Schema other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.cid == other.__isset.cid) && ((!__isset.cid) || (System.Object.Equals(Cid, other.Cid))))
      && ((__isset.col_name == other.__isset.col_name) && ((!__isset.col_name) || (System.Object.Equals(Col_name, other.Col_name))))
      && ((__isset.col_seq == other.__isset.col_seq) && ((!__isset.col_seq) || (System.Object.Equals(Col_seq, other.Col_seq))))
      && ((__isset.col_type == other.__isset.col_type) && ((!__isset.col_type) || (System.Object.Equals(Col_type, other.Col_type))))
      && ((__isset.cell_versions == other.__isset.cell_versions) && ((!__isset.cell_versions) || (System.Object.Equals(Cell_versions, other.Cell_versions))))
      && ((__isset.cell_ttl == other.__isset.cell_ttl) && ((!__isset.cell_ttl) || (System.Object.Equals(Cell_ttl, other.Cell_ttl))))
      && ((__isset.blk_encoding == other.__isset.blk_encoding) && ((!__isset.blk_encoding) || (System.Object.Equals(Blk_encoding, other.Blk_encoding))))
      && ((__isset.blk_size == other.__isset.blk_size) && ((!__isset.blk_size) || (System.Object.Equals(Blk_size, other.Blk_size))))
      && ((__isset.blk_cells == other.__isset.blk_cells) && ((!__isset.blk_cells) || (System.Object.Equals(Blk_cells, other.Blk_cells))))
      && ((__isset.cs_replication == other.__isset.cs_replication) && ((!__isset.cs_replication) || (System.Object.Equals(Cs_replication, other.Cs_replication))))
      && ((__isset.cs_size == other.__isset.cs_size) && ((!__isset.cs_size) || (System.Object.Equals(Cs_size, other.Cs_size))))
      && ((__isset.cs_max == other.__isset.cs_max) && ((!__isset.cs_max) || (System.Object.Equals(Cs_max, other.Cs_max))))
      && ((__isset.log_rollout_ratio == other.__isset.log_rollout_ratio) && ((!__isset.log_rollout_ratio) || (System.Object.Equals(Log_rollout_ratio, other.Log_rollout_ratio))))
      && ((__isset.log_compact_cointervaling == other.__isset.log_compact_cointervaling) && ((!__isset.log_compact_cointervaling) || (System.Object.Equals(Log_compact_cointervaling, other.Log_compact_cointervaling))))
      && ((__isset.log_fragment_preload == other.__isset.log_fragment_preload) && ((!__isset.log_fragment_preload) || (System.Object.Equals(Log_fragment_preload, other.Log_fragment_preload))))
      && ((__isset.compact_percent == other.__isset.compact_percent) && ((!__isset.compact_percent) || (System.Object.Equals(Compact_percent, other.Compact_percent))))
      && ((__isset.revision == other.__isset.revision) && ((!__isset.revision) || (System.Object.Equals(Revision, other.Revision))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.cid)
      {
        hashcode = (hashcode * 397) + Cid.GetHashCode();
      }
      if((Col_name != null) && __isset.col_name)
      {
        hashcode = (hashcode * 397) + Col_name.GetHashCode();
      }
      if(__isset.col_seq)
      {
        hashcode = (hashcode * 397) + Col_seq.GetHashCode();
      }
      if(__isset.col_type)
      {
        hashcode = (hashcode * 397) + Col_type.GetHashCode();
      }
      if(__isset.cell_versions)
      {
        hashcode = (hashcode * 397) + Cell_versions.GetHashCode();
      }
      if(__isset.cell_ttl)
      {
        hashcode = (hashcode * 397) + Cell_ttl.GetHashCode();
      }
      if(__isset.blk_encoding)
      {
        hashcode = (hashcode * 397) + Blk_encoding.GetHashCode();
      }
      if(__isset.blk_size)
      {
        hashcode = (hashcode * 397) + Blk_size.GetHashCode();
      }
      if(__isset.blk_cells)
      {
        hashcode = (hashcode * 397) + Blk_cells.GetHashCode();
      }
      if(__isset.cs_replication)
      {
        hashcode = (hashcode * 397) + Cs_replication.GetHashCode();
      }
      if(__isset.cs_size)
      {
        hashcode = (hashcode * 397) + Cs_size.GetHashCode();
      }
      if(__isset.cs_max)
      {
        hashcode = (hashcode * 397) + Cs_max.GetHashCode();
      }
      if(__isset.log_rollout_ratio)
      {
        hashcode = (hashcode * 397) + Log_rollout_ratio.GetHashCode();
      }
      if(__isset.log_compact_cointervaling)
      {
        hashcode = (hashcode * 397) + Log_compact_cointervaling.GetHashCode();
      }
      if(__isset.log_fragment_preload)
      {
        hashcode = (hashcode * 397) + Log_fragment_preload.GetHashCode();
      }
      if(__isset.compact_percent)
      {
        hashcode = (hashcode * 397) + Compact_percent.GetHashCode();
      }
      if(__isset.revision)
      {
        hashcode = (hashcode * 397) + Revision.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("Schema(");
    int tmp3 = 0;
    if(__isset.cid)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cid: ");
      Cid.ToString(sb);
    }
    if((Col_name != null) && __isset.col_name)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Col_name: ");
      Col_name.ToString(sb);
    }
    if(__isset.col_seq)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Col_seq: ");
      Col_seq.ToString(sb);
    }
    if(__isset.col_type)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Col_type: ");
      Col_type.ToString(sb);
    }
    if(__isset.cell_versions)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cell_versions: ");
      Cell_versions.ToString(sb);
    }
    if(__isset.cell_ttl)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cell_ttl: ");
      Cell_ttl.ToString(sb);
    }
    if(__isset.blk_encoding)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Blk_encoding: ");
      Blk_encoding.ToString(sb);
    }
    if(__isset.blk_size)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Blk_size: ");
      Blk_size.ToString(sb);
    }
    if(__isset.blk_cells)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Blk_cells: ");
      Blk_cells.ToString(sb);
    }
    if(__isset.cs_replication)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cs_replication: ");
      Cs_replication.ToString(sb);
    }
    if(__isset.cs_size)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cs_size: ");
      Cs_size.ToString(sb);
    }
    if(__isset.cs_max)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Cs_max: ");
      Cs_max.ToString(sb);
    }
    if(__isset.log_rollout_ratio)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Log_rollout_ratio: ");
      Log_rollout_ratio.ToString(sb);
    }
    if(__isset.log_compact_cointervaling)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Log_compact_cointervaling: ");
      Log_compact_cointervaling.ToString(sb);
    }
    if(__isset.log_fragment_preload)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Log_fragment_preload: ");
      Log_fragment_preload.ToString(sb);
    }
    if(__isset.compact_percent)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Compact_percent: ");
      Compact_percent.ToString(sb);
    }
    if(__isset.revision)
    {
      if(0 < tmp3++) { sb.Append(", "); }
      sb.Append("Revision: ");
      Revision.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

