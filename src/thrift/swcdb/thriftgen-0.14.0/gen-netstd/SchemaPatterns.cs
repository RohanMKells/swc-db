/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


/// <summary>
/// The Schema Patterns for the SpecSchemas
/// </summary>
public partial class SchemaPatterns : TBase
{
  private List<SchemaPattern> _names;
  private SchemaTagsPatterns _tags;

  /// <summary>
  /// The Schema patterns for selecting by Column Name
  /// </summary>
  public List<SchemaPattern> Names
  {
    get
    {
      return _names;
    }
    set
    {
      __isset.names = true;
      this._names = value;
    }
  }

  /// <summary>
  /// The Schema patterns for selecting by Column Tags
  /// </summary>
  public SchemaTagsPatterns Tags
  {
    get
    {
      return _tags;
    }
    set
    {
      __isset.tags = true;
      this._tags = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool names;
    public bool tags;
  }

  public SchemaPatterns()
  {
  }

  public SchemaPatterns DeepCopy()
  {
    var tmp16 = new SchemaPatterns();
    if((Names != null) && __isset.names)
    {
      tmp16.Names = this.Names.DeepCopy();
    }
    tmp16.__isset.names = this.__isset.names;
    if((Tags != null) && __isset.tags)
    {
      tmp16.Tags = (SchemaTagsPatterns)this.Tags.DeepCopy();
    }
    tmp16.__isset.tags = this.__isset.tags;
    return tmp16;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list17 = await iprot.ReadListBeginAsync(cancellationToken);
                Names = new List<SchemaPattern>(_list17.Count);
                for(int _i18 = 0; _i18 < _list17.Count; ++_i18)
                {
                  SchemaPattern _elem19;
                  _elem19 = new SchemaPattern();
                  await _elem19.ReadAsync(iprot, cancellationToken);
                  Names.Add(_elem19);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Tags = new SchemaTagsPatterns();
              await Tags.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("SchemaPatterns");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if((Names != null) && __isset.names)
      {
        field.Name = "names";
        field.Type = TType.List;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Names.Count), cancellationToken);
          foreach (SchemaPattern _iter20 in Names)
          {
            await _iter20.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Tags != null) && __isset.tags)
      {
        field.Name = "tags";
        field.Type = TType.Struct;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await Tags.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is SchemaPatterns other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.names == other.__isset.names) && ((!__isset.names) || (TCollections.Equals(Names, other.Names))))
      && ((__isset.tags == other.__isset.tags) && ((!__isset.tags) || (System.Object.Equals(Tags, other.Tags))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Names != null) && __isset.names)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Names);
      }
      if((Tags != null) && __isset.tags)
      {
        hashcode = (hashcode * 397) + Tags.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("SchemaPatterns(");
    int tmp21 = 0;
    if((Names != null) && __isset.names)
    {
      if(0 < tmp21++) { sb.Append(", "); }
      sb.Append("Names: ");
      Names.ToString(sb);
    }
    if((Tags != null) && __isset.tags)
    {
      if(0 < tmp21++) { sb.Append(", "); }
      sb.Append("Tags: ");
      Tags.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

