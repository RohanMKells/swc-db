/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

public static class ServiceExtensions
{
  public static bool Equals(this Dictionary<byte[], FCells> instance, object that)
  {
    if (!(that is Dictionary<byte[], FCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<byte[], FCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<byte[], FCells> DeepCopy(this Dictionary<byte[], FCells> source)
  {
    if (source == null)
      return null;

    var tmp426 = new Dictionary<byte[], FCells>(source.Count);
    foreach (var pair in source)
      tmp426.Add((pair.Key != null) ? pair.Key.ToArray() : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp426;
  }


  public static bool Equals(this Dictionary<long, List<UCell>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCell>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCell>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCell>> DeepCopy(this Dictionary<long, List<UCell>> source)
  {
    if (source == null)
      return null;

    var tmp427 = new Dictionary<long, List<UCell>>(source.Count);
    foreach (var pair in source)
      tmp427.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp427;
  }


  public static bool Equals(this Dictionary<long, List<UCellSerial>> instance, object that)
  {
    if (!(that is Dictionary<long, List<UCellSerial>> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<long, List<UCellSerial>> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<long, List<UCellSerial>> DeepCopy(this Dictionary<long, List<UCellSerial>> source)
  {
    if (source == null)
      return null;

    var tmp428 = new Dictionary<long, List<UCellSerial>>(source.Count);
    foreach (var pair in source)
      tmp428.Add(pair.Key, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp428;
  }


  public static bool Equals(this Dictionary<string, ColCells> instance, object that)
  {
    if (!(that is Dictionary<string, ColCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this Dictionary<string, ColCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static Dictionary<string, ColCells> DeepCopy(this Dictionary<string, ColCells> source)
  {
    if (source == null)
      return null;

    var tmp429 = new Dictionary<string, ColCells>(source.Count);
    foreach (var pair in source)
      tmp429.Add((pair.Key != null) ? pair.Key : null, (pair.Value != null) ? pair.Value.DeepCopy() : null);
    return tmp429;
  }


  public static bool Equals(this List<CCell> instance, object that)
  {
    if (!(that is List<CCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCell> DeepCopy(this List<CCell> source)
  {
    if (source == null)
      return null;

    var tmp430 = new List<CCell>(source.Count);
    foreach (var elem in source)
      tmp430.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp430;
  }


  public static bool Equals(this List<CCellSerial> instance, object that)
  {
    if (!(that is List<CCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CCellSerial> DeepCopy(this List<CCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp431 = new List<CCellSerial>(source.Count);
    foreach (var elem in source)
      tmp431.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp431;
  }


  public static bool Equals(this List<Cell> instance, object that)
  {
    if (!(that is List<Cell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Cell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Cell> DeepCopy(this List<Cell> source)
  {
    if (source == null)
      return null;

    var tmp432 = new List<Cell>(source.Count);
    foreach (var elem in source)
      tmp432.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp432;
  }


  public static bool Equals(this List<CellSerial> instance, object that)
  {
    if (!(that is List<CellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellSerial> DeepCopy(this List<CellSerial> source)
  {
    if (source == null)
      return null;

    var tmp433 = new List<CellSerial>(source.Count);
    foreach (var elem in source)
      tmp433.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp433;
  }


  public static bool Equals(this List<CellValueSerial> instance, object that)
  {
    if (!(that is List<CellValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CellValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CellValueSerial> DeepCopy(this List<CellValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp434 = new List<CellValueSerial>(source.Count);
    foreach (var elem in source)
      tmp434.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp434;
  }


  public static bool Equals(this List<CompactResult> instance, object that)
  {
    if (!(that is List<CompactResult> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<CompactResult> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<CompactResult> DeepCopy(this List<CompactResult> source)
  {
    if (source == null)
      return null;

    var tmp435 = new List<CompactResult>(source.Count);
    foreach (var elem in source)
      tmp435.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp435;
  }


  public static bool Equals(this List<FCell> instance, object that)
  {
    if (!(that is List<FCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCell> DeepCopy(this List<FCell> source)
  {
    if (source == null)
      return null;

    var tmp436 = new List<FCell>(source.Count);
    foreach (var elem in source)
      tmp436.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp436;
  }


  public static bool Equals(this List<FCellSerial> instance, object that)
  {
    if (!(that is List<FCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<FCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<FCellSerial> DeepCopy(this List<FCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp437 = new List<FCellSerial>(source.Count);
    foreach (var elem in source)
      tmp437.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp437;
  }


  public static bool Equals(this List<KCell> instance, object that)
  {
    if (!(that is List<KCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCell> DeepCopy(this List<KCell> source)
  {
    if (source == null)
      return null;

    var tmp438 = new List<KCell>(source.Count);
    foreach (var elem in source)
      tmp438.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp438;
  }


  public static bool Equals(this List<KCellSerial> instance, object that)
  {
    if (!(that is List<KCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<KCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<KCellSerial> DeepCopy(this List<KCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp439 = new List<KCellSerial>(source.Count);
    foreach (var elem in source)
      tmp439.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp439;
  }


  public static bool Equals(this List<Schema> instance, object that)
  {
    if (!(that is List<Schema> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<Schema> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<Schema> DeepCopy(this List<Schema> source)
  {
    if (source == null)
      return null;

    var tmp440 = new List<Schema>(source.Count);
    foreach (var elem in source)
      tmp440.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp440;
  }


  public static bool Equals(this List<SchemaPattern> instance, object that)
  {
    if (!(that is List<SchemaPattern> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SchemaPattern> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SchemaPattern> DeepCopy(this List<SchemaPattern> source)
  {
    if (source == null)
      return null;

    var tmp441 = new List<SchemaPattern>(source.Count);
    foreach (var elem in source)
      tmp441.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp441;
  }


  public static bool Equals(this List<SpecColumn> instance, object that)
  {
    if (!(that is List<SpecColumn> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumn> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumn> DeepCopy(this List<SpecColumn> source)
  {
    if (source == null)
      return null;

    var tmp442 = new List<SpecColumn>(source.Count);
    foreach (var elem in source)
      tmp442.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp442;
  }


  public static bool Equals(this List<SpecColumnSerial> instance, object that)
  {
    if (!(that is List<SpecColumnSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecColumnSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecColumnSerial> DeepCopy(this List<SpecColumnSerial> source)
  {
    if (source == null)
      return null;

    var tmp443 = new List<SpecColumnSerial>(source.Count);
    foreach (var elem in source)
      tmp443.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp443;
  }


  public static bool Equals(this List<SpecFraction> instance, object that)
  {
    if (!(that is List<SpecFraction> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecFraction> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecFraction> DeepCopy(this List<SpecFraction> source)
  {
    if (source == null)
      return null;

    var tmp444 = new List<SpecFraction>(source.Count);
    foreach (var elem in source)
      tmp444.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp444;
  }


  public static bool Equals(this List<SpecInterval> instance, object that)
  {
    if (!(that is List<SpecInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecInterval> DeepCopy(this List<SpecInterval> source)
  {
    if (source == null)
      return null;

    var tmp445 = new List<SpecInterval>(source.Count);
    foreach (var elem in source)
      tmp445.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp445;
  }


  public static bool Equals(this List<SpecIntervalSerial> instance, object that)
  {
    if (!(that is List<SpecIntervalSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecIntervalSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecIntervalSerial> DeepCopy(this List<SpecIntervalSerial> source)
  {
    if (source == null)
      return null;

    var tmp446 = new List<SpecIntervalSerial>(source.Count);
    foreach (var elem in source)
      tmp446.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp446;
  }


  public static bool Equals(this List<SpecKeyInterval> instance, object that)
  {
    if (!(that is List<SpecKeyInterval> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecKeyInterval> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecKeyInterval> DeepCopy(this List<SpecKeyInterval> source)
  {
    if (source == null)
      return null;

    var tmp447 = new List<SpecKeyInterval>(source.Count);
    foreach (var elem in source)
      tmp447.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp447;
  }


  public static bool Equals(this List<SpecValue> instance, object that)
  {
    if (!(that is List<SpecValue> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValue> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValue> DeepCopy(this List<SpecValue> source)
  {
    if (source == null)
      return null;

    var tmp448 = new List<SpecValue>(source.Count);
    foreach (var elem in source)
      tmp448.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp448;
  }


  public static bool Equals(this List<SpecValueSerial> instance, object that)
  {
    if (!(that is List<SpecValueSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial> DeepCopy(this List<SpecValueSerial> source)
  {
    if (source == null)
      return null;

    var tmp449 = new List<SpecValueSerial>(source.Count);
    foreach (var elem in source)
      tmp449.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp449;
  }


  public static bool Equals(this List<SpecValueSerialField> instance, object that)
  {
    if (!(that is List<SpecValueSerialField> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerialField> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerialField> DeepCopy(this List<SpecValueSerialField> source)
  {
    if (source == null)
      return null;

    var tmp450 = new List<SpecValueSerialField>(source.Count);
    foreach (var elem in source)
      tmp450.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp450;
  }


  public static bool Equals(this List<SpecValueSerial_BYTES> instance, object that)
  {
    if (!(that is List<SpecValueSerial_BYTES> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_BYTES> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_BYTES> DeepCopy(this List<SpecValueSerial_BYTES> source)
  {
    if (source == null)
      return null;

    var tmp451 = new List<SpecValueSerial_BYTES>(source.Count);
    foreach (var elem in source)
      tmp451.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp451;
  }


  public static bool Equals(this List<SpecValueSerial_INT64> instance, object that)
  {
    if (!(that is List<SpecValueSerial_INT64> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<SpecValueSerial_INT64> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<SpecValueSerial_INT64> DeepCopy(this List<SpecValueSerial_INT64> source)
  {
    if (source == null)
      return null;

    var tmp452 = new List<SpecValueSerial_INT64>(source.Count);
    foreach (var elem in source)
      tmp452.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp452;
  }


  public static bool Equals(this List<UCell> instance, object that)
  {
    if (!(that is List<UCell> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCell> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCell> DeepCopy(this List<UCell> source)
  {
    if (source == null)
      return null;

    var tmp453 = new List<UCell>(source.Count);
    foreach (var elem in source)
      tmp453.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp453;
  }


  public static bool Equals(this List<UCellSerial> instance, object that)
  {
    if (!(that is List<UCellSerial> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<UCellSerial> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<UCellSerial> DeepCopy(this List<UCellSerial> source)
  {
    if (source == null)
      return null;

    var tmp454 = new List<UCellSerial>(source.Count);
    foreach (var elem in source)
      tmp454.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp454;
  }


  public static bool Equals(this List<byte[]> instance, object that)
  {
    if (!(that is List<byte[]> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<byte[]> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<byte[]> DeepCopy(this List<byte[]> source)
  {
    if (source == null)
      return null;

    var tmp455 = new List<byte[]>(source.Count);
    foreach (var elem in source)
      tmp455.Add((elem != null) ? elem.ToArray() : null);
    return tmp455;
  }


  public static bool Equals(this List<kCells> instance, object that)
  {
    if (!(that is List<kCells> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<kCells> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<kCells> DeepCopy(this List<kCells> source)
  {
    if (source == null)
      return null;

    var tmp456 = new List<kCells>(source.Count);
    foreach (var elem in source)
      tmp456.Add((elem != null) ? elem.DeepCopy() : null);
    return tmp456;
  }


  public static bool Equals(this List<long> instance, object that)
  {
    if (!(that is List<long> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<long> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<long> DeepCopy(this List<long> source)
  {
    if (source == null)
      return null;

    var tmp457 = new List<long>(source.Count);
    foreach (var elem in source)
      tmp457.Add(elem);
    return tmp457;
  }


  public static bool Equals(this List<string> instance, object that)
  {
    if (!(that is List<string> other)) return false;
    if (ReferenceEquals(instance, other)) return true;

    return TCollections.Equals(instance, other);
  }


  public static int GetHashCode(this List<string> instance)
  {
    return TCollections.GetHashCode(instance);
  }


  public static List<string> DeepCopy(this List<string> source)
  {
    if (source == null)
      return null;

    var tmp458 = new List<string>(source.Count);
    foreach (var elem in source)
      tmp458.Add((elem != null) ? elem : null);
    return tmp458;
  }


}
