/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Cell data for using with Update
/// </summary>
public partial class UCell : TBase
{
  private Flag _f;
  private List<byte[]> _k;
  private long _ts;
  private bool _ts_desc;
  private byte[] _v;
  private EncodingType _encoder;

  /// <summary>
  /// The Cell Flag
  /// 
  /// <seealso cref="global::.Flag"/>
  /// </summary>
  public Flag F
  {
    get
    {
      return _f;
    }
    set
    {
      __isset.f = true;
      this._f = value;
    }
  }

  /// <summary>
  /// The Cell Key
  /// </summary>
  public List<byte[]> K
  {
    get
    {
      return _k;
    }
    set
    {
      __isset.k = true;
      this._k = value;
    }
  }

  /// <summary>
  /// The Cell Timestamp in nanoseconds
  /// </summary>
  public long Ts
  {
    get
    {
      return _ts;
    }
    set
    {
      __isset.ts = true;
      this._ts = value;
    }
  }

  /// <summary>
  /// The Cell Version is in timestamp descending
  /// </summary>
  public bool Ts_desc
  {
    get
    {
      return _ts_desc;
    }
    set
    {
      __isset.ts_desc = true;
      this._ts_desc = value;
    }
  }

  /// <summary>
  /// The Cell Value
  /// </summary>
  public byte[] V
  {
    get
    {
      return _v;
    }
    set
    {
      __isset.v = true;
      this._v = value;
    }
  }

  /// <summary>
  /// Optionally the Cell Value Encoding Type: ZLIB/SNAPPY/ZSTD
  /// 
  /// <seealso cref="global::.EncodingType"/>
  /// </summary>
  public EncodingType Encoder
  {
    get
    {
      return _encoder;
    }
    set
    {
      __isset.encoder = true;
      this._encoder = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool f;
    public bool k;
    public bool ts;
    public bool ts_desc;
    public bool v;
    public bool encoder;
  }

  public UCell()
  {
  }

  public UCell DeepCopy()
  {
    var tmp234 = new UCell();
    if(__isset.f)
    {
      tmp234.F = this.F;
    }
    tmp234.__isset.f = this.__isset.f;
    if((K != null) && __isset.k)
    {
      tmp234.K = this.K.DeepCopy();
    }
    tmp234.__isset.k = this.__isset.k;
    if(__isset.ts)
    {
      tmp234.Ts = this.Ts;
    }
    tmp234.__isset.ts = this.__isset.ts;
    if(__isset.ts_desc)
    {
      tmp234.Ts_desc = this.Ts_desc;
    }
    tmp234.__isset.ts_desc = this.__isset.ts_desc;
    if((V != null) && __isset.v)
    {
      tmp234.V = this.V.ToArray();
    }
    tmp234.__isset.v = this.__isset.v;
    if(__isset.encoder)
    {
      tmp234.Encoder = this.Encoder;
    }
    tmp234.__isset.encoder = this.__isset.encoder;
    return tmp234;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32)
            {
              F = (Flag)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.List)
            {
              {
                TList _list235 = await iprot.ReadListBeginAsync(cancellationToken);
                K = new List<byte[]>(_list235.Count);
                for(int _i236 = 0; _i236 < _list235.Count; ++_i236)
                {
                  byte[] _elem237;
                  _elem237 = await iprot.ReadBinaryAsync(cancellationToken);
                  K.Add(_elem237);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I64)
            {
              Ts = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.Bool)
            {
              Ts_desc = await iprot.ReadBoolAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              V = await iprot.ReadBinaryAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.I32)
            {
              Encoder = (EncodingType)await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp238 = new TStruct("UCell");
      await oprot.WriteStructBeginAsync(tmp238, cancellationToken);
      var tmp239 = new TField();
      if(__isset.f)
      {
        tmp239.Name = "f";
        tmp239.Type = TType.I32;
        tmp239.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        await oprot.WriteI32Async((int)F, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((K != null) && __isset.k)
      {
        tmp239.Name = "k";
        tmp239.Type = TType.List;
        tmp239.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, K.Count), cancellationToken);
          foreach (byte[] _iter240 in K)
          {
            await oprot.WriteBinaryAsync(_iter240, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ts)
      {
        tmp239.Name = "ts";
        tmp239.Type = TType.I64;
        tmp239.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        await oprot.WriteI64Async(Ts, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.ts_desc)
      {
        tmp239.Name = "ts_desc";
        tmp239.Type = TType.Bool;
        tmp239.ID = 4;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        await oprot.WriteBoolAsync(Ts_desc, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((V != null) && __isset.v)
      {
        tmp239.Name = "v";
        tmp239.Type = TType.String;
        tmp239.ID = 5;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        await oprot.WriteBinaryAsync(V, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.encoder)
      {
        tmp239.Name = "encoder";
        tmp239.Type = TType.I32;
        tmp239.ID = 6;
        await oprot.WriteFieldBeginAsync(tmp239, cancellationToken);
        await oprot.WriteI32Async((int)Encoder, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is UCell other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.f == other.__isset.f) && ((!__isset.f) || (System.Object.Equals(F, other.F))))
      && ((__isset.k == other.__isset.k) && ((!__isset.k) || (System.Object.Equals(K, other.K))))
      && ((__isset.ts == other.__isset.ts) && ((!__isset.ts) || (System.Object.Equals(Ts, other.Ts))))
      && ((__isset.ts_desc == other.__isset.ts_desc) && ((!__isset.ts_desc) || (System.Object.Equals(Ts_desc, other.Ts_desc))))
      && ((__isset.v == other.__isset.v) && ((!__isset.v) || (TCollections.Equals(V, other.V))))
      && ((__isset.encoder == other.__isset.encoder) && ((!__isset.encoder) || (System.Object.Equals(Encoder, other.Encoder))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.f)
      {
        hashcode = (hashcode * 397) + F.GetHashCode();
      }
      if((K != null) && __isset.k)
      {
        hashcode = (hashcode * 397) + K.GetHashCode();
      }
      if(__isset.ts)
      {
        hashcode = (hashcode * 397) + Ts.GetHashCode();
      }
      if(__isset.ts_desc)
      {
        hashcode = (hashcode * 397) + Ts_desc.GetHashCode();
      }
      if((V != null) && __isset.v)
      {
        hashcode = (hashcode * 397) + V.GetHashCode();
      }
      if(__isset.encoder)
      {
        hashcode = (hashcode * 397) + Encoder.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp241 = new StringBuilder("UCell(");
    int tmp242 = 0;
    if(__isset.f)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("F: ");
      F.ToString(tmp241);
    }
    if((K != null) && __isset.k)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("K: ");
      K.ToString(tmp241);
    }
    if(__isset.ts)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("Ts: ");
      Ts.ToString(tmp241);
    }
    if(__isset.ts_desc)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("Ts_desc: ");
      Ts_desc.ToString(tmp241);
    }
    if((V != null) && __isset.v)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("V: ");
      V.ToString(tmp241);
    }
    if(__isset.encoder)
    {
      if(0 < tmp242++) { tmp241.Append(", "); }
      tmp241.Append("Encoder: ");
      Encoder.ToString(tmp241);
    }
    tmp241.Append(')');
    return tmp241.ToString();
  }
}

