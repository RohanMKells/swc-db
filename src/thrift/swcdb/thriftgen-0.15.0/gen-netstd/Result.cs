/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions


/// <summary>
/// The Result of 'exec_sql'
/// </summary>
public partial class Result : TBase
{
  private List<Schema> _schemas;
  private Cells _cells;
  private List<CompactResult> _compact;

  /// <summary>
  /// Set with result for 'list columns' query
  /// </summary>
  public List<Schema> Schemas
  {
    get
    {
      return _schemas;
    }
    set
    {
      __isset.schemas = true;
      this._schemas = value;
    }
  }

  /// <summary>
  /// Set with result for 'select' query
  /// </summary>
  public Cells Cells
  {
    get
    {
      return _cells;
    }
    set
    {
      __isset.cells = true;
      this._cells = value;
    }
  }

  /// <summary>
  /// Set with result for 'compact columns' query
  /// </summary>
  public List<CompactResult> Compact
  {
    get
    {
      return _compact;
    }
    set
    {
      __isset.compact = true;
      this._compact = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool schemas;
    public bool cells;
    public bool compact;
  }

  public Result()
  {
  }

  public Result DeepCopy()
  {
    var tmp411 = new Result();
    if((Schemas != null) && __isset.schemas)
    {
      tmp411.Schemas = this.Schemas.DeepCopy();
    }
    tmp411.__isset.schemas = this.__isset.schemas;
    if((Cells != null) && __isset.cells)
    {
      tmp411.Cells = (Cells)this.Cells.DeepCopy();
    }
    tmp411.__isset.cells = this.__isset.cells;
    if((Compact != null) && __isset.compact)
    {
      tmp411.Compact = this.Compact.DeepCopy();
    }
    tmp411.__isset.compact = this.__isset.compact;
    return tmp411;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List)
            {
              {
                TList _list412 = await iprot.ReadListBeginAsync(cancellationToken);
                Schemas = new List<Schema>(_list412.Count);
                for(int _i413 = 0; _i413 < _list412.Count; ++_i413)
                {
                  Schema _elem414;
                  _elem414 = new Schema();
                  await _elem414.ReadAsync(iprot, cancellationToken);
                  Schemas.Add(_elem414);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.Struct)
            {
              Cells = new Cells();
              await Cells.ReadAsync(iprot, cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.List)
            {
              {
                TList _list415 = await iprot.ReadListBeginAsync(cancellationToken);
                Compact = new List<CompactResult>(_list415.Count);
                for(int _i416 = 0; _i416 < _list415.Count; ++_i416)
                {
                  CompactResult _elem417;
                  _elem417 = new CompactResult();
                  await _elem417.ReadAsync(iprot, cancellationToken);
                  Compact.Add(_elem417);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var tmp418 = new TStruct("Result");
      await oprot.WriteStructBeginAsync(tmp418, cancellationToken);
      var tmp419 = new TField();
      if((Schemas != null) && __isset.schemas)
      {
        tmp419.Name = "schemas";
        tmp419.Type = TType.List;
        tmp419.ID = 1;
        await oprot.WriteFieldBeginAsync(tmp419, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Schemas.Count), cancellationToken);
          foreach (Schema _iter420 in Schemas)
          {
            await _iter420.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Cells != null) && __isset.cells)
      {
        tmp419.Name = "cells";
        tmp419.Type = TType.Struct;
        tmp419.ID = 2;
        await oprot.WriteFieldBeginAsync(tmp419, cancellationToken);
        await Cells.WriteAsync(oprot, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Compact != null) && __isset.compact)
      {
        tmp419.Name = "compact";
        tmp419.Type = TType.List;
        tmp419.ID = 3;
        await oprot.WriteFieldBeginAsync(tmp419, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.Struct, Compact.Count), cancellationToken);
          foreach (CompactResult _iter421 in Compact)
          {
            await _iter421.WriteAsync(oprot, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is Result other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.schemas == other.__isset.schemas) && ((!__isset.schemas) || (System.Object.Equals(Schemas, other.Schemas))))
      && ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (System.Object.Equals(Cells, other.Cells))))
      && ((__isset.compact == other.__isset.compact) && ((!__isset.compact) || (System.Object.Equals(Compact, other.Compact))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if((Schemas != null) && __isset.schemas)
      {
        hashcode = (hashcode * 397) + Schemas.GetHashCode();
      }
      if((Cells != null) && __isset.cells)
      {
        hashcode = (hashcode * 397) + Cells.GetHashCode();
      }
      if((Compact != null) && __isset.compact)
      {
        hashcode = (hashcode * 397) + Compact.GetHashCode();
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var tmp422 = new StringBuilder("Result(");
    int tmp423 = 0;
    if((Schemas != null) && __isset.schemas)
    {
      if(0 < tmp423++) { tmp422.Append(", "); }
      tmp422.Append("Schemas: ");
      Schemas.ToString(tmp422);
    }
    if((Cells != null) && __isset.cells)
    {
      if(0 < tmp423++) { tmp422.Append(", "); }
      tmp422.Append("Cells: ");
      Cells.ToString(tmp422);
    }
    if((Compact != null) && __isset.compact)
    {
      if(0 < tmp423++) { tmp422.Append(", "); }
      tmp422.Append("Compact: ");
      Compact.ToString(tmp422);
    }
    tmp422.Append(')');
    return tmp422.ToString();
  }
}

