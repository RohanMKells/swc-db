/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

public partial class Service
{
  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public interface IAsync
  {
    /// <summary>
    /// The direct SQL method to Manage Column.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to List Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to Compact Columns
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Cells List.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct SQL method to update cells optionally to work with updater-id.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    /// <param name="updater_id">The Updater ID to work with</param>
    global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The SQL method to execute any query.
    /// </summary>
    /// <param name="sql">The SQL string to Execute</param>
    global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Create an Updater ID with buffering size in bytes.
    /// </summary>
    /// <param name="buffer_size">The buffer size of the Updater</param>
    global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to Close an Updater ID.
    /// </summary>
    /// <param name="id">The Updater ID to close</param>
    global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to update cells with cell in Update-Columns-Cells-Serial,
    /// optionally to work with updater-id.
    /// </summary>
    /// <param name="cells">The Serial Cells to update</param>
    /// <param name="updater_id">The Updater ID to use for write</param>
    global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Manage Column
    /// </summary>
    /// <param name="func">The Action Function to use</param>
    /// <param name="schema">The Schema for the Action</param>
    global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to List Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match Schema for response</param>
    global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to Compact Columns
    /// </summary>
    /// <param name="spec">The Schemas Specifications to match columns to Compact</param>
    global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Cells List.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Columns Cells map.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Key Cells list.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The direct method to select cells with result in Fractons Cells.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default);

    /// <summary>
    /// The method to select cells with result set by the request's type of CellsResult.
    /// </summary>
    /// <param name="spec">The Scan Specifications for the scan</param>
    /// <param name="rslt">The Type of Cells Result for the response</param>
    global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default);

  }


  /// <summary>
  /// The SWC-DB Thrift Service
  /// </summary>
  public class Client : TBaseClient, IDisposable, IAsync
  {
    public Client(TProtocol protocol) : this(protocol, protocol)
    {
    }

    public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
    {
    }

    public async global::System.Threading.Tasks.Task sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_mng_column(sql, cancellationToken);
      await recv_sql_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_mng_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp424 = new InternalStructs.sql_mng_column_args() {
        Sql = sql,
      };
      
      await tmp424.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp425 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp425.Type == TMessageType.Exception)
      {
        var tmp426 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp426;
      }

      var tmp427 = new InternalStructs.sql_mng_column_result();
      await tmp427.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp427.__isset.e)
      {
        throw tmp427.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_list_columns(sql, cancellationToken);
      return await recv_sql_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_list_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp428 = new InternalStructs.sql_list_columns_args() {
        Sql = sql,
      };
      
      await tmp428.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_sql_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp429 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp429.Type == TMessageType.Exception)
      {
        var tmp430 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp430;
      }

      var tmp431 = new InternalStructs.sql_list_columns_result();
      await tmp431.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp431.__isset.success)
      {
        return tmp431.Success;
      }
      if (tmp431.__isset.e)
      {
        throw tmp431.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_compact_columns(sql, cancellationToken);
      return await recv_sql_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_compact_columns(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp432 = new InternalStructs.sql_compact_columns_args() {
        Sql = sql,
      };
      
      await tmp432.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_sql_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp433 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp433.Type == TMessageType.Exception)
      {
        var tmp434 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp434;
      }

      var tmp435 = new InternalStructs.sql_compact_columns_result();
      await tmp435.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp435.__isset.success)
      {
        return tmp435.Success;
      }
      if (tmp435.__isset.e)
      {
        throw tmp435.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select(sql, cancellationToken);
      return await recv_sql_select(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp436 = new InternalStructs.sql_select_args() {
        Sql = sql,
      };
      
      await tmp436.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_sql_select(CancellationToken cancellationToken = default)
    {
      
      var tmp437 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp437.Type == TMessageType.Exception)
      {
        var tmp438 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp438;
      }

      var tmp439 = new InternalStructs.sql_select_result();
      await tmp439.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp439.__isset.success)
      {
        return tmp439.Success;
      }
      if (tmp439.__isset.e)
      {
        throw tmp439.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_column(sql, cancellationToken);
      return await recv_sql_select_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_column(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp440 = new InternalStructs.sql_select_rslt_on_column_args() {
        Sql = sql,
      };
      
      await tmp440.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_sql_select_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp441 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp441.Type == TMessageType.Exception)
      {
        var tmp442 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp442;
      }

      var tmp443 = new InternalStructs.sql_select_rslt_on_column_result();
      await tmp443.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp443.__isset.success)
      {
        return tmp443.Success;
      }
      if (tmp443.__isset.e)
      {
        throw tmp443.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_key(sql, cancellationToken);
      return await recv_sql_select_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_key(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp444 = new InternalStructs.sql_select_rslt_on_key_args() {
        Sql = sql,
      };
      
      await tmp444.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_sql_select_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp445 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp445.Type == TMessageType.Exception)
      {
        var tmp446 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp446;
      }

      var tmp447 = new InternalStructs.sql_select_rslt_on_key_result();
      await tmp447.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp447.__isset.success)
      {
        return tmp447.Success;
      }
      if (tmp447.__isset.e)
      {
        throw tmp447.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await send_sql_select_rslt_on_fraction(sql, cancellationToken);
      return await recv_sql_select_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_select_rslt_on_fraction(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp448 = new InternalStructs.sql_select_rslt_on_fraction_args() {
        Sql = sql,
      };
      
      await tmp448.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_sql_select_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp449 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp449.Type == TMessageType.Exception)
      {
        var tmp450 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp450;
      }

      var tmp451 = new InternalStructs.sql_select_rslt_on_fraction_result();
      await tmp451.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp451.__isset.success)
      {
        return tmp451.Success;
      }
      if (tmp451.__isset.e)
      {
        throw tmp451.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_select_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_sql_query(sql, rslt, cancellationToken);
      return await recv_sql_query(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_query(string sql, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp452 = new InternalStructs.sql_query_args() {
        Sql = sql,
        Rslt = rslt,
      };
      
      await tmp452.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_sql_query(CancellationToken cancellationToken = default)
    {
      
      var tmp453 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp453.Type == TMessageType.Exception)
      {
        var tmp454 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp454;
      }

      var tmp455 = new InternalStructs.sql_query_result();
      await tmp455.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp455.__isset.success)
      {
        return tmp455.Success;
      }
      if (tmp455.__isset.e)
      {
        throw tmp455.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sql_query failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_sql_update(sql, updater_id, cancellationToken);
      await recv_sql_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_sql_update(string sql, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp456 = new InternalStructs.sql_update_args() {
        Sql = sql,
        Updater_id = updater_id,
      };
      
      await tmp456.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_sql_update(CancellationToken cancellationToken = default)
    {
      
      var tmp457 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp457.Type == TMessageType.Exception)
      {
        var tmp458 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp458;
      }

      var tmp459 = new InternalStructs.sql_update_result();
      await tmp459.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp459.__isset.e)
      {
        throw tmp459.E;
      }
    }

    public async global::System.Threading.Tasks.Task<Result> exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await send_exec_sql(sql, cancellationToken);
      return await recv_exec_sql(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_exec_sql(string sql, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp460 = new InternalStructs.exec_sql_args() {
        Sql = sql,
      };
      
      await tmp460.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Result> recv_exec_sql(CancellationToken cancellationToken = default)
    {
      
      var tmp461 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp461.Type == TMessageType.Exception)
      {
        var tmp462 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp462;
      }

      var tmp463 = new InternalStructs.exec_sql_result();
      await tmp463.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp463.__isset.success)
      {
        return tmp463.Success;
      }
      if (tmp463.__isset.e)
      {
        throw tmp463.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "exec_sql failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<long> updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await send_updater_create(buffer_size, cancellationToken);
      return await recv_updater_create(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_create(int buffer_size, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp464 = new InternalStructs.updater_create_args() {
        Buffer_size = buffer_size,
      };
      
      await tmp464.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<long> recv_updater_create(CancellationToken cancellationToken = default)
    {
      
      var tmp465 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp465.Type == TMessageType.Exception)
      {
        var tmp466 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp466;
      }

      var tmp467 = new InternalStructs.updater_create_result();
      await tmp467.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp467.__isset.success)
      {
        return tmp467.Success;
      }
      if (tmp467.__isset.e)
      {
        throw tmp467.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updater_create failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task updater_close(long id, CancellationToken cancellationToken = default)
    {
      await send_updater_close(id, cancellationToken);
      await recv_updater_close(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_updater_close(long id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp468 = new InternalStructs.updater_close_args() {
        Id = id,
      };
      
      await tmp468.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_updater_close(CancellationToken cancellationToken = default)
    {
      
      var tmp469 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp469.Type == TMessageType.Exception)
      {
        var tmp470 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp470;
      }

      var tmp471 = new InternalStructs.updater_close_result();
      await tmp471.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp471.__isset.e)
      {
        throw tmp471.E;
      }
    }

    public async global::System.Threading.Tasks.Task update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update(cells, updater_id, cancellationToken);
      await recv_update(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update(Dictionary<long, List<UCell>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp472 = new InternalStructs.update_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp472.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update(CancellationToken cancellationToken = default)
    {
      
      var tmp473 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp473.Type == TMessageType.Exception)
      {
        var tmp474 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp474;
      }

      var tmp475 = new InternalStructs.update_result();
      await tmp475.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp475.__isset.e)
      {
        throw tmp475.E;
      }
    }

    public async global::System.Threading.Tasks.Task update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await send_update_serial(cells, updater_id, cancellationToken);
      await recv_update_serial(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_update_serial(Dictionary<long, List<UCellSerial>> cells, long updater_id, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp476 = new InternalStructs.update_serial_args() {
        Cells = cells,
        Updater_id = updater_id,
      };
      
      await tmp476.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_update_serial(CancellationToken cancellationToken = default)
    {
      
      var tmp477 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp477.Type == TMessageType.Exception)
      {
        var tmp478 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp478;
      }

      var tmp479 = new InternalStructs.update_serial_result();
      await tmp479.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp479.__isset.e)
      {
        throw tmp479.E;
      }
    }

    public async global::System.Threading.Tasks.Task mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await send_mng_column(func, schema, cancellationToken);
      await recv_mng_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_mng_column(SchemaFunc func, Schema schema, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp480 = new InternalStructs.mng_column_args() {
        Func = func,
        Schema = schema,
      };
      
      await tmp480.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task recv_mng_column(CancellationToken cancellationToken = default)
    {
      
      var tmp481 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp481.Type == TMessageType.Exception)
      {
        var tmp482 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp482;
      }

      var tmp483 = new InternalStructs.mng_column_result();
      await tmp483.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp483.__isset.e)
      {
        throw tmp483.E;
      }
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_list_columns(spec, cancellationToken);
      return await recv_list_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_list_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp484 = new InternalStructs.list_columns_args() {
        Spec = spec,
      };
      
      await tmp484.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<Schema>> recv_list_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp485 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp485.Type == TMessageType.Exception)
      {
        var tmp486 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp486;
      }

      var tmp487 = new InternalStructs.list_columns_result();
      await tmp487.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp487.__isset.success)
      {
        return tmp487.Success;
      }
      if (tmp487.__isset.e)
      {
        throw tmp487.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await send_compact_columns(spec, cancellationToken);
      return await recv_compact_columns(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_compact_columns(SpecSchemas spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp488 = new InternalStructs.compact_columns_args() {
        Spec = spec,
      };
      
      await tmp488.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<CompactResult>> recv_compact_columns(CancellationToken cancellationToken = default)
    {
      
      var tmp489 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp489.Type == TMessageType.Exception)
      {
        var tmp490 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp490;
      }

      var tmp491 = new InternalStructs.compact_columns_result();
      await tmp491.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp491.__isset.success)
      {
        return tmp491.Success;
      }
      if (tmp491.__isset.e)
      {
        throw tmp491.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "compact_columns failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Cells> scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan(spec, cancellationToken);
      return await recv_scan(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp492 = new InternalStructs.scan_args() {
        Spec = spec,
      };
      
      await tmp492.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Cells> recv_scan(CancellationToken cancellationToken = default)
    {
      
      var tmp493 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp493.Type == TMessageType.Exception)
      {
        var tmp494 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp494;
      }

      var tmp495 = new InternalStructs.scan_result();
      await tmp495.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp495.__isset.success)
      {
        return tmp495.Success;
      }
      if (tmp495.__isset.e)
      {
        throw tmp495.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_column(spec, cancellationToken);
      return await recv_scan_rslt_on_column(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_column(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp496 = new InternalStructs.scan_rslt_on_column_args() {
        Spec = spec,
      };
      
      await tmp496.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<Dictionary<string, ColCells>> recv_scan_rslt_on_column(CancellationToken cancellationToken = default)
    {
      
      var tmp497 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp497.Type == TMessageType.Exception)
      {
        var tmp498 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp498;
      }

      var tmp499 = new InternalStructs.scan_rslt_on_column_result();
      await tmp499.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp499.__isset.success)
      {
        return tmp499.Success;
      }
      if (tmp499.__isset.e)
      {
        throw tmp499.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_column failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_key(spec, cancellationToken);
      return await recv_scan_rslt_on_key(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_key(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp500 = new InternalStructs.scan_rslt_on_key_args() {
        Spec = spec,
      };
      
      await tmp500.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<List<kCells>> recv_scan_rslt_on_key(CancellationToken cancellationToken = default)
    {
      
      var tmp501 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp501.Type == TMessageType.Exception)
      {
        var tmp502 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp502;
      }

      var tmp503 = new InternalStructs.scan_rslt_on_key_result();
      await tmp503.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp503.__isset.success)
      {
        return tmp503.Success;
      }
      if (tmp503.__isset.e)
      {
        throw tmp503.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_key failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<FCells> scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on_fraction(spec, cancellationToken);
      return await recv_scan_rslt_on_fraction(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on_fraction(SpecScan spec, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp504 = new InternalStructs.scan_rslt_on_fraction_args() {
        Spec = spec,
      };
      
      await tmp504.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<FCells> recv_scan_rslt_on_fraction(CancellationToken cancellationToken = default)
    {
      
      var tmp505 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp505.Type == TMessageType.Exception)
      {
        var tmp506 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp506;
      }

      var tmp507 = new InternalStructs.scan_rslt_on_fraction_result();
      await tmp507.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp507.__isset.success)
      {
        return tmp507.Success;
      }
      if (tmp507.__isset.e)
      {
        throw tmp507.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on_fraction failed: unknown result");
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await send_scan_rslt_on(spec, rslt, cancellationToken);
      return await recv_scan_rslt_on(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task send_scan_rslt_on(SpecScan spec, CellsResult rslt, CancellationToken cancellationToken = default)
    {
      await OutputProtocol.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Call, SeqId), cancellationToken);
      
      var tmp508 = new InternalStructs.scan_rslt_on_args() {
        Spec = spec,
        Rslt = rslt,
      };
      
      await tmp508.WriteAsync(OutputProtocol, cancellationToken);
      await OutputProtocol.WriteMessageEndAsync(cancellationToken);
      await OutputProtocol.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task<CellsGroup> recv_scan_rslt_on(CancellationToken cancellationToken = default)
    {
      
      var tmp509 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
      if (tmp509.Type == TMessageType.Exception)
      {
        var tmp510 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        throw tmp510;
      }

      var tmp511 = new InternalStructs.scan_rslt_on_result();
      await tmp511.ReadAsync(InputProtocol, cancellationToken);
      await InputProtocol.ReadMessageEndAsync(cancellationToken);
      if (tmp511.__isset.success)
      {
        return tmp511.Success;
      }
      if (tmp511.__isset.e)
      {
        throw tmp511.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "scan_rslt_on failed: unknown result");
    }

  }

  public class AsyncProcessor : ITAsyncProcessor
  {
    private readonly IAsync _iAsync;
    private readonly ILogger<AsyncProcessor> _logger;

    public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
    {
      _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
      _logger = logger;
      processMap_["sql_mng_column"] = sql_mng_column_ProcessAsync;
      processMap_["sql_list_columns"] = sql_list_columns_ProcessAsync;
      processMap_["sql_compact_columns"] = sql_compact_columns_ProcessAsync;
      processMap_["sql_select"] = sql_select_ProcessAsync;
      processMap_["sql_select_rslt_on_column"] = sql_select_rslt_on_column_ProcessAsync;
      processMap_["sql_select_rslt_on_key"] = sql_select_rslt_on_key_ProcessAsync;
      processMap_["sql_select_rslt_on_fraction"] = sql_select_rslt_on_fraction_ProcessAsync;
      processMap_["sql_query"] = sql_query_ProcessAsync;
      processMap_["sql_update"] = sql_update_ProcessAsync;
      processMap_["exec_sql"] = exec_sql_ProcessAsync;
      processMap_["updater_create"] = updater_create_ProcessAsync;
      processMap_["updater_close"] = updater_close_ProcessAsync;
      processMap_["update"] = update_ProcessAsync;
      processMap_["update_serial"] = update_serial_ProcessAsync;
      processMap_["mng_column"] = mng_column_ProcessAsync;
      processMap_["list_columns"] = list_columns_ProcessAsync;
      processMap_["compact_columns"] = compact_columns_ProcessAsync;
      processMap_["scan"] = scan_ProcessAsync;
      processMap_["scan_rslt_on_column"] = scan_rslt_on_column_ProcessAsync;
      processMap_["scan_rslt_on_key"] = scan_rslt_on_key_ProcessAsync;
      processMap_["scan_rslt_on_fraction"] = scan_rslt_on_fraction_ProcessAsync;
      processMap_["scan_rslt_on"] = scan_rslt_on_ProcessAsync;
    }

    protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
    {
      return await ProcessAsync(iprot, oprot, CancellationToken.None);
    }

    public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      try
      {
        var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

        processMap_.TryGetValue(msg.Name, out ProcessFunction fn);

        if (fn == null)
        {
          await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
          await iprot.ReadMessageEndAsync(cancellationToken);
          var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
          await oprot.WriteMessageEndAsync(cancellationToken);
          await oprot.Transport.FlushAsync(cancellationToken);
          return true;
        }

        await fn(msg.SeqID, iprot, oprot, cancellationToken);

      }
      catch (IOException)
      {
        return false;
      }

      return true;
    }

    public async global::System.Threading.Tasks.Task sql_mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp512 = new InternalStructs.sql_mng_column_args();
      await tmp512.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp513 = new InternalStructs.sql_mng_column_result();
      try
      {
        try
        {
          await _iAsync.sql_mng_column(tmp512.Sql, cancellationToken);
        }
        catch (Exception tmp514)
        {
          tmp513.E = tmp514;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp513.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp515)
      {
        var tmp516 = $"Error occurred in {GetType().FullName}: {tmp515.Message}";
        if(_logger != null)
          _logger.LogError(tmp515, tmp516);
        else
          Console.Error.WriteLine(tmp516);
        var tmp517 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp517.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp518 = new InternalStructs.sql_list_columns_args();
      await tmp518.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp519 = new InternalStructs.sql_list_columns_result();
      try
      {
        try
        {
          tmp519.Success = await _iAsync.sql_list_columns(tmp518.Sql, cancellationToken);
        }
        catch (Exception tmp520)
        {
          tmp519.E = tmp520;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp519.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp521)
      {
        var tmp522 = $"Error occurred in {GetType().FullName}: {tmp521.Message}";
        if(_logger != null)
          _logger.LogError(tmp521, tmp522);
        else
          Console.Error.WriteLine(tmp522);
        var tmp523 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp523.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp524 = new InternalStructs.sql_compact_columns_args();
      await tmp524.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp525 = new InternalStructs.sql_compact_columns_result();
      try
      {
        try
        {
          tmp525.Success = await _iAsync.sql_compact_columns(tmp524.Sql, cancellationToken);
        }
        catch (Exception tmp526)
        {
          tmp525.E = tmp526;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp525.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp527)
      {
        var tmp528 = $"Error occurred in {GetType().FullName}: {tmp527.Message}";
        if(_logger != null)
          _logger.LogError(tmp527, tmp528);
        else
          Console.Error.WriteLine(tmp528);
        var tmp529 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp529.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp530 = new InternalStructs.sql_select_args();
      await tmp530.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp531 = new InternalStructs.sql_select_result();
      try
      {
        try
        {
          tmp531.Success = await _iAsync.sql_select(tmp530.Sql, cancellationToken);
        }
        catch (Exception tmp532)
        {
          tmp531.E = tmp532;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Reply, seqid), cancellationToken); 
        await tmp531.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp533)
      {
        var tmp534 = $"Error occurred in {GetType().FullName}: {tmp533.Message}";
        if(_logger != null)
          _logger.LogError(tmp533, tmp534);
        else
          Console.Error.WriteLine(tmp534);
        var tmp535 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select", TMessageType.Exception, seqid), cancellationToken);
        await tmp535.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp536 = new InternalStructs.sql_select_rslt_on_column_args();
      await tmp536.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp537 = new InternalStructs.sql_select_rslt_on_column_result();
      try
      {
        try
        {
          tmp537.Success = await _iAsync.sql_select_rslt_on_column(tmp536.Sql, cancellationToken);
        }
        catch (Exception tmp538)
        {
          tmp537.E = tmp538;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp537.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp539)
      {
        var tmp540 = $"Error occurred in {GetType().FullName}: {tmp539.Message}";
        if(_logger != null)
          _logger.LogError(tmp539, tmp540);
        else
          Console.Error.WriteLine(tmp540);
        var tmp541 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp541.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp542 = new InternalStructs.sql_select_rslt_on_key_args();
      await tmp542.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp543 = new InternalStructs.sql_select_rslt_on_key_result();
      try
      {
        try
        {
          tmp543.Success = await _iAsync.sql_select_rslt_on_key(tmp542.Sql, cancellationToken);
        }
        catch (Exception tmp544)
        {
          tmp543.E = tmp544;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp543.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp545)
      {
        var tmp546 = $"Error occurred in {GetType().FullName}: {tmp545.Message}";
        if(_logger != null)
          _logger.LogError(tmp545, tmp546);
        else
          Console.Error.WriteLine(tmp546);
        var tmp547 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp547.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_select_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp548 = new InternalStructs.sql_select_rslt_on_fraction_args();
      await tmp548.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp549 = new InternalStructs.sql_select_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp549.Success = await _iAsync.sql_select_rslt_on_fraction(tmp548.Sql, cancellationToken);
        }
        catch (Exception tmp550)
        {
          tmp549.E = tmp550;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp549.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp551)
      {
        var tmp552 = $"Error occurred in {GetType().FullName}: {tmp551.Message}";
        if(_logger != null)
          _logger.LogError(tmp551, tmp552);
        else
          Console.Error.WriteLine(tmp552);
        var tmp553 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_select_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp553.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_query_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp554 = new InternalStructs.sql_query_args();
      await tmp554.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp555 = new InternalStructs.sql_query_result();
      try
      {
        try
        {
          tmp555.Success = await _iAsync.sql_query(tmp554.Sql, tmp554.Rslt, cancellationToken);
        }
        catch (Exception tmp556)
        {
          tmp555.E = tmp556;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Reply, seqid), cancellationToken); 
        await tmp555.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp557)
      {
        var tmp558 = $"Error occurred in {GetType().FullName}: {tmp557.Message}";
        if(_logger != null)
          _logger.LogError(tmp557, tmp558);
        else
          Console.Error.WriteLine(tmp558);
        var tmp559 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_query", TMessageType.Exception, seqid), cancellationToken);
        await tmp559.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task sql_update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp560 = new InternalStructs.sql_update_args();
      await tmp560.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp561 = new InternalStructs.sql_update_result();
      try
      {
        try
        {
          await _iAsync.sql_update(tmp560.Sql, tmp560.Updater_id, cancellationToken);
        }
        catch (Exception tmp562)
        {
          tmp561.E = tmp562;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp561.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp563)
      {
        var tmp564 = $"Error occurred in {GetType().FullName}: {tmp563.Message}";
        if(_logger != null)
          _logger.LogError(tmp563, tmp564);
        else
          Console.Error.WriteLine(tmp564);
        var tmp565 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("sql_update", TMessageType.Exception, seqid), cancellationToken);
        await tmp565.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task exec_sql_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp566 = new InternalStructs.exec_sql_args();
      await tmp566.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp567 = new InternalStructs.exec_sql_result();
      try
      {
        try
        {
          tmp567.Success = await _iAsync.exec_sql(tmp566.Sql, cancellationToken);
        }
        catch (Exception tmp568)
        {
          tmp567.E = tmp568;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Reply, seqid), cancellationToken); 
        await tmp567.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp569)
      {
        var tmp570 = $"Error occurred in {GetType().FullName}: {tmp569.Message}";
        if(_logger != null)
          _logger.LogError(tmp569, tmp570);
        else
          Console.Error.WriteLine(tmp570);
        var tmp571 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("exec_sql", TMessageType.Exception, seqid), cancellationToken);
        await tmp571.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_create_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp572 = new InternalStructs.updater_create_args();
      await tmp572.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp573 = new InternalStructs.updater_create_result();
      try
      {
        try
        {
          tmp573.Success = await _iAsync.updater_create(tmp572.Buffer_size, cancellationToken);
        }
        catch (Exception tmp574)
        {
          tmp573.E = tmp574;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Reply, seqid), cancellationToken); 
        await tmp573.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp575)
      {
        var tmp576 = $"Error occurred in {GetType().FullName}: {tmp575.Message}";
        if(_logger != null)
          _logger.LogError(tmp575, tmp576);
        else
          Console.Error.WriteLine(tmp576);
        var tmp577 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_create", TMessageType.Exception, seqid), cancellationToken);
        await tmp577.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task updater_close_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp578 = new InternalStructs.updater_close_args();
      await tmp578.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp579 = new InternalStructs.updater_close_result();
      try
      {
        try
        {
          await _iAsync.updater_close(tmp578.Id, cancellationToken);
        }
        catch (Exception tmp580)
        {
          tmp579.E = tmp580;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Reply, seqid), cancellationToken); 
        await tmp579.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp581)
      {
        var tmp582 = $"Error occurred in {GetType().FullName}: {tmp581.Message}";
        if(_logger != null)
          _logger.LogError(tmp581, tmp582);
        else
          Console.Error.WriteLine(tmp582);
        var tmp583 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("updater_close", TMessageType.Exception, seqid), cancellationToken);
        await tmp583.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp584 = new InternalStructs.update_args();
      await tmp584.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp585 = new InternalStructs.update_result();
      try
      {
        try
        {
          await _iAsync.update(tmp584.Cells, tmp584.Updater_id, cancellationToken);
        }
        catch (Exception tmp586)
        {
          tmp585.E = tmp586;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Reply, seqid), cancellationToken); 
        await tmp585.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp587)
      {
        var tmp588 = $"Error occurred in {GetType().FullName}: {tmp587.Message}";
        if(_logger != null)
          _logger.LogError(tmp587, tmp588);
        else
          Console.Error.WriteLine(tmp588);
        var tmp589 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update", TMessageType.Exception, seqid), cancellationToken);
        await tmp589.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task update_serial_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp590 = new InternalStructs.update_serial_args();
      await tmp590.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp591 = new InternalStructs.update_serial_result();
      try
      {
        try
        {
          await _iAsync.update_serial(tmp590.Cells, tmp590.Updater_id, cancellationToken);
        }
        catch (Exception tmp592)
        {
          tmp591.E = tmp592;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Reply, seqid), cancellationToken); 
        await tmp591.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp593)
      {
        var tmp594 = $"Error occurred in {GetType().FullName}: {tmp593.Message}";
        if(_logger != null)
          _logger.LogError(tmp593, tmp594);
        else
          Console.Error.WriteLine(tmp594);
        var tmp595 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("update_serial", TMessageType.Exception, seqid), cancellationToken);
        await tmp595.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task mng_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp596 = new InternalStructs.mng_column_args();
      await tmp596.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp597 = new InternalStructs.mng_column_result();
      try
      {
        try
        {
          await _iAsync.mng_column(tmp596.Func, tmp596.Schema, cancellationToken);
        }
        catch (Exception tmp598)
        {
          tmp597.E = tmp598;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp597.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp599)
      {
        var tmp600 = $"Error occurred in {GetType().FullName}: {tmp599.Message}";
        if(_logger != null)
          _logger.LogError(tmp599, tmp600);
        else
          Console.Error.WriteLine(tmp600);
        var tmp601 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("mng_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp601.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task list_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp602 = new InternalStructs.list_columns_args();
      await tmp602.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp603 = new InternalStructs.list_columns_result();
      try
      {
        try
        {
          tmp603.Success = await _iAsync.list_columns(tmp602.Spec, cancellationToken);
        }
        catch (Exception tmp604)
        {
          tmp603.E = tmp604;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp603.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp605)
      {
        var tmp606 = $"Error occurred in {GetType().FullName}: {tmp605.Message}";
        if(_logger != null)
          _logger.LogError(tmp605, tmp606);
        else
          Console.Error.WriteLine(tmp606);
        var tmp607 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("list_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp607.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task compact_columns_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp608 = new InternalStructs.compact_columns_args();
      await tmp608.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp609 = new InternalStructs.compact_columns_result();
      try
      {
        try
        {
          tmp609.Success = await _iAsync.compact_columns(tmp608.Spec, cancellationToken);
        }
        catch (Exception tmp610)
        {
          tmp609.E = tmp610;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Reply, seqid), cancellationToken); 
        await tmp609.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp611)
      {
        var tmp612 = $"Error occurred in {GetType().FullName}: {tmp611.Message}";
        if(_logger != null)
          _logger.LogError(tmp611, tmp612);
        else
          Console.Error.WriteLine(tmp612);
        var tmp613 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("compact_columns", TMessageType.Exception, seqid), cancellationToken);
        await tmp613.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp614 = new InternalStructs.scan_args();
      await tmp614.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp615 = new InternalStructs.scan_result();
      try
      {
        try
        {
          tmp615.Success = await _iAsync.scan(tmp614.Spec, cancellationToken);
        }
        catch (Exception tmp616)
        {
          tmp615.E = tmp616;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Reply, seqid), cancellationToken); 
        await tmp615.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp617)
      {
        var tmp618 = $"Error occurred in {GetType().FullName}: {tmp617.Message}";
        if(_logger != null)
          _logger.LogError(tmp617, tmp618);
        else
          Console.Error.WriteLine(tmp618);
        var tmp619 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan", TMessageType.Exception, seqid), cancellationToken);
        await tmp619.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_column_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp620 = new InternalStructs.scan_rslt_on_column_args();
      await tmp620.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp621 = new InternalStructs.scan_rslt_on_column_result();
      try
      {
        try
        {
          tmp621.Success = await _iAsync.scan_rslt_on_column(tmp620.Spec, cancellationToken);
        }
        catch (Exception tmp622)
        {
          tmp621.E = tmp622;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Reply, seqid), cancellationToken); 
        await tmp621.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp623)
      {
        var tmp624 = $"Error occurred in {GetType().FullName}: {tmp623.Message}";
        if(_logger != null)
          _logger.LogError(tmp623, tmp624);
        else
          Console.Error.WriteLine(tmp624);
        var tmp625 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_column", TMessageType.Exception, seqid), cancellationToken);
        await tmp625.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_key_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp626 = new InternalStructs.scan_rslt_on_key_args();
      await tmp626.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp627 = new InternalStructs.scan_rslt_on_key_result();
      try
      {
        try
        {
          tmp627.Success = await _iAsync.scan_rslt_on_key(tmp626.Spec, cancellationToken);
        }
        catch (Exception tmp628)
        {
          tmp627.E = tmp628;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Reply, seqid), cancellationToken); 
        await tmp627.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp629)
      {
        var tmp630 = $"Error occurred in {GetType().FullName}: {tmp629.Message}";
        if(_logger != null)
          _logger.LogError(tmp629, tmp630);
        else
          Console.Error.WriteLine(tmp630);
        var tmp631 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_key", TMessageType.Exception, seqid), cancellationToken);
        await tmp631.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_fraction_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp632 = new InternalStructs.scan_rslt_on_fraction_args();
      await tmp632.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp633 = new InternalStructs.scan_rslt_on_fraction_result();
      try
      {
        try
        {
          tmp633.Success = await _iAsync.scan_rslt_on_fraction(tmp632.Spec, cancellationToken);
        }
        catch (Exception tmp634)
        {
          tmp633.E = tmp634;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Reply, seqid), cancellationToken); 
        await tmp633.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp635)
      {
        var tmp636 = $"Error occurred in {GetType().FullName}: {tmp635.Message}";
        if(_logger != null)
          _logger.LogError(tmp635, tmp636);
        else
          Console.Error.WriteLine(tmp636);
        var tmp637 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on_fraction", TMessageType.Exception, seqid), cancellationToken);
        await tmp637.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

    public async global::System.Threading.Tasks.Task scan_rslt_on_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
    {
      var tmp638 = new InternalStructs.scan_rslt_on_args();
      await tmp638.ReadAsync(iprot, cancellationToken);
      await iprot.ReadMessageEndAsync(cancellationToken);
      var tmp639 = new InternalStructs.scan_rslt_on_result();
      try
      {
        try
        {
          tmp639.Success = await _iAsync.scan_rslt_on(tmp638.Spec, tmp638.Rslt, cancellationToken);
        }
        catch (Exception tmp640)
        {
          tmp639.E = tmp640;
        }
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Reply, seqid), cancellationToken); 
        await tmp639.WriteAsync(oprot, cancellationToken);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception tmp641)
      {
        var tmp642 = $"Error occurred in {GetType().FullName}: {tmp641.Message}";
        if(_logger != null)
          _logger.LogError(tmp641, tmp642);
        else
          Console.Error.WriteLine(tmp642);
        var tmp643 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
        await oprot.WriteMessageBeginAsync(new TMessage("scan_rslt_on", TMessageType.Exception, seqid), cancellationToken);
        await tmp643.WriteAsync(oprot, cancellationToken);
      }
      await oprot.WriteMessageEndAsync(cancellationToken);
      await oprot.Transport.FlushAsync(cancellationToken);
    }

  }

  public class InternalStructs
  {

    public partial class sql_mng_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_mng_column_args()
      {
      }

      public sql_mng_column_args DeepCopy()
      {
        var tmp644 = new sql_mng_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp644.Sql = this.Sql;
        }
        tmp644.__isset.sql = this.__isset.sql;
        return tmp644;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp645 = new TStruct("sql_mng_column_args");
          await oprot.WriteStructBeginAsync(tmp645, cancellationToken);
          var tmp646 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp646.Name = "sql";
            tmp646.Type = TType.String;
            tmp646.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp646, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp647 = new StringBuilder("sql_mng_column_args(");
        int tmp648 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp648++) { tmp647.Append(", "); }
          tmp647.Append("Sql: ");
          Sql.ToString(tmp647);
        }
        tmp647.Append(')');
        return tmp647.ToString();
      }
    }


    public partial class sql_mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_mng_column_result()
      {
      }

      public sql_mng_column_result DeepCopy()
      {
        var tmp649 = new sql_mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp649.E = (Exception)this.E.DeepCopy();
        }
        tmp649.__isset.e = this.__isset.e;
        return tmp649;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp650 = new TStruct("sql_mng_column_result");
          await oprot.WriteStructBeginAsync(tmp650, cancellationToken);
          var tmp651 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp651.Name = "E";
              tmp651.Type = TType.Struct;
              tmp651.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp651, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp652 = new StringBuilder("sql_mng_column_result(");
        int tmp653 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp653++) { tmp652.Append(", "); }
          tmp652.Append("E: ");
          E.ToString(tmp652);
        }
        tmp652.Append(')');
        return tmp652.ToString();
      }
    }


    public partial class sql_list_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_list_columns_args()
      {
      }

      public sql_list_columns_args DeepCopy()
      {
        var tmp654 = new sql_list_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp654.Sql = this.Sql;
        }
        tmp654.__isset.sql = this.__isset.sql;
        return tmp654;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp655 = new TStruct("sql_list_columns_args");
          await oprot.WriteStructBeginAsync(tmp655, cancellationToken);
          var tmp656 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp656.Name = "sql";
            tmp656.Type = TType.String;
            tmp656.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp656, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp657 = new StringBuilder("sql_list_columns_args(");
        int tmp658 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp658++) { tmp657.Append(", "); }
          tmp657.Append("Sql: ");
          Sql.ToString(tmp657);
        }
        tmp657.Append(')');
        return tmp657.ToString();
      }
    }


    public partial class sql_list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_list_columns_result()
      {
      }

      public sql_list_columns_result DeepCopy()
      {
        var tmp659 = new sql_list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp659.Success = this.Success.DeepCopy();
        }
        tmp659.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp659.E = (Exception)this.E.DeepCopy();
        }
        tmp659.__isset.e = this.__isset.e;
        return tmp659;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list660 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list660.Count);
                    for(int _i661 = 0; _i661 < _list660.Count; ++_i661)
                    {
                      Schema _elem662;
                      _elem662 = new Schema();
                      await _elem662.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem662);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp663 = new TStruct("sql_list_columns_result");
          await oprot.WriteStructBeginAsync(tmp663, cancellationToken);
          var tmp664 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp664.Name = "Success";
              tmp664.Type = TType.List;
              tmp664.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Schema _iter665 in Success)
                {
                  await _iter665.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp664.Name = "E";
              tmp664.Type = TType.Struct;
              tmp664.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp664, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp666 = new StringBuilder("sql_list_columns_result(");
        int tmp667 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp667++) { tmp666.Append(", "); }
          tmp666.Append("Success: ");
          Success.ToString(tmp666);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp667++) { tmp666.Append(", "); }
          tmp666.Append("E: ");
          E.ToString(tmp666);
        }
        tmp666.Append(')');
        return tmp666.ToString();
      }
    }


    public partial class sql_compact_columns_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_compact_columns_args()
      {
      }

      public sql_compact_columns_args DeepCopy()
      {
        var tmp668 = new sql_compact_columns_args();
        if((Sql != null) && __isset.sql)
        {
          tmp668.Sql = this.Sql;
        }
        tmp668.__isset.sql = this.__isset.sql;
        return tmp668;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp669 = new TStruct("sql_compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp669, cancellationToken);
          var tmp670 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp670.Name = "sql";
            tmp670.Type = TType.String;
            tmp670.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp670, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp671 = new StringBuilder("sql_compact_columns_args(");
        int tmp672 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp672++) { tmp671.Append(", "); }
          tmp671.Append("Sql: ");
          Sql.ToString(tmp671);
        }
        tmp671.Append(')');
        return tmp671.ToString();
      }
    }


    public partial class sql_compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_compact_columns_result()
      {
      }

      public sql_compact_columns_result DeepCopy()
      {
        var tmp673 = new sql_compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp673.Success = this.Success.DeepCopy();
        }
        tmp673.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp673.E = (Exception)this.E.DeepCopy();
        }
        tmp673.__isset.e = this.__isset.e;
        return tmp673;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list674 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list674.Count);
                    for(int _i675 = 0; _i675 < _list674.Count; ++_i675)
                    {
                      CompactResult _elem676;
                      _elem676 = new CompactResult();
                      await _elem676.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem676);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp677 = new TStruct("sql_compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp677, cancellationToken);
          var tmp678 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp678.Name = "Success";
              tmp678.Type = TType.List;
              tmp678.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp678, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (CompactResult _iter679 in Success)
                {
                  await _iter679.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp678.Name = "E";
              tmp678.Type = TType.Struct;
              tmp678.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp678, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp680 = new StringBuilder("sql_compact_columns_result(");
        int tmp681 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp681++) { tmp680.Append(", "); }
          tmp680.Append("Success: ");
          Success.ToString(tmp680);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp681++) { tmp680.Append(", "); }
          tmp680.Append("E: ");
          E.ToString(tmp680);
        }
        tmp680.Append(')');
        return tmp680.ToString();
      }
    }


    public partial class sql_select_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_args()
      {
      }

      public sql_select_args DeepCopy()
      {
        var tmp682 = new sql_select_args();
        if((Sql != null) && __isset.sql)
        {
          tmp682.Sql = this.Sql;
        }
        tmp682.__isset.sql = this.__isset.sql;
        return tmp682;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp683 = new TStruct("sql_select_args");
          await oprot.WriteStructBeginAsync(tmp683, cancellationToken);
          var tmp684 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp684.Name = "sql";
            tmp684.Type = TType.String;
            tmp684.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp684, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp685 = new StringBuilder("sql_select_args(");
        int tmp686 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp686++) { tmp685.Append(", "); }
          tmp685.Append("Sql: ");
          Sql.ToString(tmp685);
        }
        tmp685.Append(')');
        return tmp685.ToString();
      }
    }


    public partial class sql_select_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_result()
      {
      }

      public sql_select_result DeepCopy()
      {
        var tmp687 = new sql_select_result();
        if((Success != null) && __isset.success)
        {
          tmp687.Success = (Cells)this.Success.DeepCopy();
        }
        tmp687.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp687.E = (Exception)this.E.DeepCopy();
        }
        tmp687.__isset.e = this.__isset.e;
        return tmp687;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp688 = new TStruct("sql_select_result");
          await oprot.WriteStructBeginAsync(tmp688, cancellationToken);
          var tmp689 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp689.Name = "Success";
              tmp689.Type = TType.Struct;
              tmp689.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp689, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp689.Name = "E";
              tmp689.Type = TType.Struct;
              tmp689.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp689, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp690 = new StringBuilder("sql_select_result(");
        int tmp691 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp691++) { tmp690.Append(", "); }
          tmp690.Append("Success: ");
          Success.ToString(tmp690);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp691++) { tmp690.Append(", "); }
          tmp690.Append("E: ");
          E.ToString(tmp690);
        }
        tmp690.Append(')');
        return tmp690.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_column_args()
      {
      }

      public sql_select_rslt_on_column_args DeepCopy()
      {
        var tmp692 = new sql_select_rslt_on_column_args();
        if((Sql != null) && __isset.sql)
        {
          tmp692.Sql = this.Sql;
        }
        tmp692.__isset.sql = this.__isset.sql;
        return tmp692;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp693 = new TStruct("sql_select_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp693, cancellationToken);
          var tmp694 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp694.Name = "sql";
            tmp694.Type = TType.String;
            tmp694.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp694, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp695 = new StringBuilder("sql_select_rslt_on_column_args(");
        int tmp696 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp696++) { tmp695.Append(", "); }
          tmp695.Append("Sql: ");
          Sql.ToString(tmp695);
        }
        tmp695.Append(')');
        return tmp695.ToString();
      }
    }


    public partial class sql_select_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_column_result()
      {
      }

      public sql_select_rslt_on_column_result DeepCopy()
      {
        var tmp697 = new sql_select_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp697.Success = this.Success.DeepCopy();
        }
        tmp697.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp697.E = (Exception)this.E.DeepCopy();
        }
        tmp697.__isset.e = this.__isset.e;
        return tmp697;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map698 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map698.Count);
                    for(int _i699 = 0; _i699 < _map698.Count; ++_i699)
                    {
                      string _key700;
                      ColCells _val701;
                      _key700 = await iprot.ReadStringAsync(cancellationToken);
                      _val701 = new ColCells();
                      await _val701.ReadAsync(iprot, cancellationToken);
                      Success[_key700] = _val701;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp702 = new TStruct("sql_select_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp702, cancellationToken);
          var tmp703 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp703.Name = "Success";
              tmp703.Type = TType.Map;
              tmp703.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp703, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter704 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter704, cancellationToken);
                  await Success[_iter704].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp703.Name = "E";
              tmp703.Type = TType.Struct;
              tmp703.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp703, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp705 = new StringBuilder("sql_select_rslt_on_column_result(");
        int tmp706 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp706++) { tmp705.Append(", "); }
          tmp705.Append("Success: ");
          Success.ToString(tmp705);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp706++) { tmp705.Append(", "); }
          tmp705.Append("E: ");
          E.ToString(tmp705);
        }
        tmp705.Append(')');
        return tmp705.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_key_args()
      {
      }

      public sql_select_rslt_on_key_args DeepCopy()
      {
        var tmp707 = new sql_select_rslt_on_key_args();
        if((Sql != null) && __isset.sql)
        {
          tmp707.Sql = this.Sql;
        }
        tmp707.__isset.sql = this.__isset.sql;
        return tmp707;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp708 = new TStruct("sql_select_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp708, cancellationToken);
          var tmp709 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp709.Name = "sql";
            tmp709.Type = TType.String;
            tmp709.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp709, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp710 = new StringBuilder("sql_select_rslt_on_key_args(");
        int tmp711 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp711++) { tmp710.Append(", "); }
          tmp710.Append("Sql: ");
          Sql.ToString(tmp710);
        }
        tmp710.Append(')');
        return tmp710.ToString();
      }
    }


    public partial class sql_select_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_key_result()
      {
      }

      public sql_select_rslt_on_key_result DeepCopy()
      {
        var tmp712 = new sql_select_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp712.Success = this.Success.DeepCopy();
        }
        tmp712.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp712.E = (Exception)this.E.DeepCopy();
        }
        tmp712.__isset.e = this.__isset.e;
        return tmp712;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list713 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list713.Count);
                    for(int _i714 = 0; _i714 < _list713.Count; ++_i714)
                    {
                      kCells _elem715;
                      _elem715 = new kCells();
                      await _elem715.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem715);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp716 = new TStruct("sql_select_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp716, cancellationToken);
          var tmp717 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp717.Name = "Success";
              tmp717.Type = TType.List;
              tmp717.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp717, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (kCells _iter718 in Success)
                {
                  await _iter718.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp717.Name = "E";
              tmp717.Type = TType.Struct;
              tmp717.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp717, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp719 = new StringBuilder("sql_select_rslt_on_key_result(");
        int tmp720 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp720++) { tmp719.Append(", "); }
          tmp719.Append("Success: ");
          Success.ToString(tmp719);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp720++) { tmp719.Append(", "); }
          tmp719.Append("E: ");
          E.ToString(tmp719);
        }
        tmp719.Append(')');
        return tmp719.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public sql_select_rslt_on_fraction_args()
      {
      }

      public sql_select_rslt_on_fraction_args DeepCopy()
      {
        var tmp721 = new sql_select_rslt_on_fraction_args();
        if((Sql != null) && __isset.sql)
        {
          tmp721.Sql = this.Sql;
        }
        tmp721.__isset.sql = this.__isset.sql;
        return tmp721;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp722 = new TStruct("sql_select_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp722, cancellationToken);
          var tmp723 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp723.Name = "sql";
            tmp723.Type = TType.String;
            tmp723.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp723, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp724 = new StringBuilder("sql_select_rslt_on_fraction_args(");
        int tmp725 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp725++) { tmp724.Append(", "); }
          tmp724.Append("Sql: ");
          Sql.ToString(tmp724);
        }
        tmp724.Append(')');
        return tmp724.ToString();
      }
    }


    public partial class sql_select_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_select_rslt_on_fraction_result()
      {
      }

      public sql_select_rslt_on_fraction_result DeepCopy()
      {
        var tmp726 = new sql_select_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp726.Success = (FCells)this.Success.DeepCopy();
        }
        tmp726.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp726.E = (Exception)this.E.DeepCopy();
        }
        tmp726.__isset.e = this.__isset.e;
        return tmp726;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp727 = new TStruct("sql_select_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp727, cancellationToken);
          var tmp728 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp728.Name = "Success";
              tmp728.Type = TType.Struct;
              tmp728.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp728, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp728.Name = "E";
              tmp728.Type = TType.Struct;
              tmp728.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp728, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_select_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp729 = new StringBuilder("sql_select_rslt_on_fraction_result(");
        int tmp730 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp730++) { tmp729.Append(", "); }
          tmp729.Append("Success: ");
          Success.ToString(tmp729);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp730++) { tmp729.Append(", "); }
          tmp729.Append("E: ");
          E.ToString(tmp729);
        }
        tmp729.Append(')');
        return tmp729.ToString();
      }
    }


    public partial class sql_query_args : TBase
    {
      private string _sql;
      private CellsResult _rslt;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool rslt;
      }

      public sql_query_args()
      {
      }

      public sql_query_args DeepCopy()
      {
        var tmp731 = new sql_query_args();
        if((Sql != null) && __isset.sql)
        {
          tmp731.Sql = this.Sql;
        }
        tmp731.__isset.sql = this.__isset.sql;
        if(__isset.rslt)
        {
          tmp731.Rslt = this.Rslt;
        }
        tmp731.__isset.rslt = this.__isset.rslt;
        return tmp731;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp732 = new TStruct("sql_query_args");
          await oprot.WriteStructBeginAsync(tmp732, cancellationToken);
          var tmp733 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp733.Name = "sql";
            tmp733.Type = TType.String;
            tmp733.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp733, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp733.Name = "rslt";
            tmp733.Type = TType.I32;
            tmp733.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp733, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp734 = new StringBuilder("sql_query_args(");
        int tmp735 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp735++) { tmp734.Append(", "); }
          tmp734.Append("Sql: ");
          Sql.ToString(tmp734);
        }
        if(__isset.rslt)
        {
          if(0 < tmp735++) { tmp734.Append(", "); }
          tmp734.Append("Rslt: ");
          Rslt.ToString(tmp734);
        }
        tmp734.Append(')');
        return tmp734.ToString();
      }
    }


    public partial class sql_query_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public sql_query_result()
      {
      }

      public sql_query_result DeepCopy()
      {
        var tmp736 = new sql_query_result();
        if((Success != null) && __isset.success)
        {
          tmp736.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp736.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp736.E = (Exception)this.E.DeepCopy();
        }
        tmp736.__isset.e = this.__isset.e;
        return tmp736;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp737 = new TStruct("sql_query_result");
          await oprot.WriteStructBeginAsync(tmp737, cancellationToken);
          var tmp738 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp738.Name = "Success";
              tmp738.Type = TType.Struct;
              tmp738.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp738, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp738.Name = "E";
              tmp738.Type = TType.Struct;
              tmp738.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp738, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_query_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp739 = new StringBuilder("sql_query_result(");
        int tmp740 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp740++) { tmp739.Append(", "); }
          tmp739.Append("Success: ");
          Success.ToString(tmp739);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp740++) { tmp739.Append(", "); }
          tmp739.Append("E: ");
          E.ToString(tmp739);
        }
        tmp739.Append(')');
        return tmp739.ToString();
      }
    }


    public partial class sql_update_args : TBase
    {
      private string _sql;
      private long _updater_id;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }

      /// <summary>
      /// The Updater ID to work with
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
        public bool updater_id;
      }

      public sql_update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public sql_update_args DeepCopy()
      {
        var tmp741 = new sql_update_args();
        if((Sql != null) && __isset.sql)
        {
          tmp741.Sql = this.Sql;
        }
        tmp741.__isset.sql = this.__isset.sql;
        if(__isset.updater_id)
        {
          tmp741.Updater_id = this.Updater_id;
        }
        tmp741.__isset.updater_id = this.__isset.updater_id;
        return tmp741;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp742 = new TStruct("sql_update_args");
          await oprot.WriteStructBeginAsync(tmp742, cancellationToken);
          var tmp743 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp743.Name = "sql";
            tmp743.Type = TType.String;
            tmp743.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp743, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp743.Name = "updater_id";
            tmp743.Type = TType.I64;
            tmp743.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp743, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp744 = new StringBuilder("sql_update_args(");
        int tmp745 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp745++) { tmp744.Append(", "); }
          tmp744.Append("Sql: ");
          Sql.ToString(tmp744);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp745++) { tmp744.Append(", "); }
          tmp744.Append("Updater_id: ");
          Updater_id.ToString(tmp744);
        }
        tmp744.Append(')');
        return tmp744.ToString();
      }
    }


    public partial class sql_update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public sql_update_result()
      {
      }

      public sql_update_result DeepCopy()
      {
        var tmp746 = new sql_update_result();
        if((E != null) && __isset.e)
        {
          tmp746.E = (Exception)this.E.DeepCopy();
        }
        tmp746.__isset.e = this.__isset.e;
        return tmp746;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp747 = new TStruct("sql_update_result");
          await oprot.WriteStructBeginAsync(tmp747, cancellationToken);
          var tmp748 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp748.Name = "E";
              tmp748.Type = TType.Struct;
              tmp748.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp748, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is sql_update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp749 = new StringBuilder("sql_update_result(");
        int tmp750 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp750++) { tmp749.Append(", "); }
          tmp749.Append("E: ");
          E.ToString(tmp749);
        }
        tmp749.Append(')');
        return tmp749.ToString();
      }
    }


    public partial class exec_sql_args : TBase
    {
      private string _sql;

      /// <summary>
      /// The SQL string to Execute
      /// </summary>
      public string Sql
      {
        get
        {
          return _sql;
        }
        set
        {
          __isset.sql = true;
          this._sql = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool sql;
      }

      public exec_sql_args()
      {
      }

      public exec_sql_args DeepCopy()
      {
        var tmp751 = new exec_sql_args();
        if((Sql != null) && __isset.sql)
        {
          tmp751.Sql = this.Sql;
        }
        tmp751.__isset.sql = this.__isset.sql;
        return tmp751;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.String)
                {
                  Sql = await iprot.ReadStringAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp752 = new TStruct("exec_sql_args");
          await oprot.WriteStructBeginAsync(tmp752, cancellationToken);
          var tmp753 = new TField();
          if((Sql != null) && __isset.sql)
          {
            tmp753.Name = "sql";
            tmp753.Type = TType.String;
            tmp753.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp753, cancellationToken);
            await oprot.WriteStringAsync(Sql, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.sql == other.__isset.sql) && ((!__isset.sql) || (System.Object.Equals(Sql, other.Sql))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Sql != null) && __isset.sql)
          {
            hashcode = (hashcode * 397) + Sql.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp754 = new StringBuilder("exec_sql_args(");
        int tmp755 = 0;
        if((Sql != null) && __isset.sql)
        {
          if(0 < tmp755++) { tmp754.Append(", "); }
          tmp754.Append("Sql: ");
          Sql.ToString(tmp754);
        }
        tmp754.Append(')');
        return tmp754.ToString();
      }
    }


    public partial class exec_sql_result : TBase
    {
      private Result _success;
      private Exception _e;

      public Result Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public exec_sql_result()
      {
      }

      public exec_sql_result DeepCopy()
      {
        var tmp756 = new exec_sql_result();
        if((Success != null) && __isset.success)
        {
          tmp756.Success = (Result)this.Success.DeepCopy();
        }
        tmp756.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp756.E = (Exception)this.E.DeepCopy();
        }
        tmp756.__isset.e = this.__isset.e;
        return tmp756;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Result();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp757 = new TStruct("exec_sql_result");
          await oprot.WriteStructBeginAsync(tmp757, cancellationToken);
          var tmp758 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp758.Name = "Success";
              tmp758.Type = TType.Struct;
              tmp758.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp758, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp758.Name = "E";
              tmp758.Type = TType.Struct;
              tmp758.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp758, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is exec_sql_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp759 = new StringBuilder("exec_sql_result(");
        int tmp760 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp760++) { tmp759.Append(", "); }
          tmp759.Append("Success: ");
          Success.ToString(tmp759);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp760++) { tmp759.Append(", "); }
          tmp759.Append("E: ");
          E.ToString(tmp759);
        }
        tmp759.Append(')');
        return tmp759.ToString();
      }
    }


    public partial class updater_create_args : TBase
    {
      private int _buffer_size;

      /// <summary>
      /// The buffer size of the Updater
      /// </summary>
      public int Buffer_size
      {
        get
        {
          return _buffer_size;
        }
        set
        {
          __isset.buffer_size = true;
          this._buffer_size = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool buffer_size;
      }

      public updater_create_args()
      {
      }

      public updater_create_args DeepCopy()
      {
        var tmp761 = new updater_create_args();
        if(__isset.buffer_size)
        {
          tmp761.Buffer_size = this.Buffer_size;
        }
        tmp761.__isset.buffer_size = this.__isset.buffer_size;
        return tmp761;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Buffer_size = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp762 = new TStruct("updater_create_args");
          await oprot.WriteStructBeginAsync(tmp762, cancellationToken);
          var tmp763 = new TField();
          if(__isset.buffer_size)
          {
            tmp763.Name = "buffer_size";
            tmp763.Type = TType.I32;
            tmp763.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp763, cancellationToken);
            await oprot.WriteI32Async(Buffer_size, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.buffer_size == other.__isset.buffer_size) && ((!__isset.buffer_size) || (System.Object.Equals(Buffer_size, other.Buffer_size))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.buffer_size)
          {
            hashcode = (hashcode * 397) + Buffer_size.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp764 = new StringBuilder("updater_create_args(");
        int tmp765 = 0;
        if(__isset.buffer_size)
        {
          if(0 < tmp765++) { tmp764.Append(", "); }
          tmp764.Append("Buffer_size: ");
          Buffer_size.ToString(tmp764);
        }
        tmp764.Append(')');
        return tmp764.ToString();
      }
    }


    public partial class updater_create_result : TBase
    {
      private long _success;
      private Exception _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public updater_create_result()
      {
      }

      public updater_create_result DeepCopy()
      {
        var tmp766 = new updater_create_result();
        if(__isset.success)
        {
          tmp766.Success = this.Success;
        }
        tmp766.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp766.E = (Exception)this.E.DeepCopy();
        }
        tmp766.__isset.e = this.__isset.e;
        return tmp766;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp767 = new TStruct("updater_create_result");
          await oprot.WriteStructBeginAsync(tmp767, cancellationToken);
          var tmp768 = new TField();

          if(this.__isset.success)
          {
            tmp768.Name = "Success";
            tmp768.Type = TType.I64;
            tmp768.ID = 0;
            await oprot.WriteFieldBeginAsync(tmp768, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp768.Name = "E";
              tmp768.Type = TType.Struct;
              tmp768.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp768, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_create_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp769 = new StringBuilder("updater_create_result(");
        int tmp770 = 0;
        if(__isset.success)
        {
          if(0 < tmp770++) { tmp769.Append(", "); }
          tmp769.Append("Success: ");
          Success.ToString(tmp769);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp770++) { tmp769.Append(", "); }
          tmp769.Append("E: ");
          E.ToString(tmp769);
        }
        tmp769.Append(')');
        return tmp769.ToString();
      }
    }


    public partial class updater_close_args : TBase
    {
      private long _id;

      /// <summary>
      /// The Updater ID to close
      /// </summary>
      public long Id
      {
        get
        {
          return _id;
        }
        set
        {
          __isset.id = true;
          this._id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool id;
      }

      public updater_close_args()
      {
      }

      public updater_close_args DeepCopy()
      {
        var tmp771 = new updater_close_args();
        if(__isset.id)
        {
          tmp771.Id = this.Id;
        }
        tmp771.__isset.id = this.__isset.id;
        return tmp771;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp772 = new TStruct("updater_close_args");
          await oprot.WriteStructBeginAsync(tmp772, cancellationToken);
          var tmp773 = new TField();
          if(__isset.id)
          {
            tmp773.Name = "id";
            tmp773.Type = TType.I64;
            tmp773.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp773, cancellationToken);
            await oprot.WriteI64Async(Id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.id)
          {
            hashcode = (hashcode * 397) + Id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp774 = new StringBuilder("updater_close_args(");
        int tmp775 = 0;
        if(__isset.id)
        {
          if(0 < tmp775++) { tmp774.Append(", "); }
          tmp774.Append("Id: ");
          Id.ToString(tmp774);
        }
        tmp774.Append(')');
        return tmp774.ToString();
      }
    }


    public partial class updater_close_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public updater_close_result()
      {
      }

      public updater_close_result DeepCopy()
      {
        var tmp776 = new updater_close_result();
        if((E != null) && __isset.e)
        {
          tmp776.E = (Exception)this.E.DeepCopy();
        }
        tmp776.__isset.e = this.__isset.e;
        return tmp776;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp777 = new TStruct("updater_close_result");
          await oprot.WriteStructBeginAsync(tmp777, cancellationToken);
          var tmp778 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp778.Name = "E";
              tmp778.Type = TType.Struct;
              tmp778.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp778, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is updater_close_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp779 = new StringBuilder("updater_close_result(");
        int tmp780 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp780++) { tmp779.Append(", "); }
          tmp779.Append("E: ");
          E.ToString(tmp779);
        }
        tmp779.Append(')');
        return tmp779.ToString();
      }
    }


    public partial class update_args : TBase
    {
      private Dictionary<long, List<UCell>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Cells to update
      /// </summary>
      public Dictionary<long, List<UCell>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_args DeepCopy()
      {
        var tmp781 = new update_args();
        if((Cells != null) && __isset.cells)
        {
          tmp781.Cells = this.Cells.DeepCopy();
        }
        tmp781.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp781.Updater_id = this.Updater_id;
        }
        tmp781.__isset.updater_id = this.__isset.updater_id;
        return tmp781;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map782 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCell>>(_map782.Count);
                    for(int _i783 = 0; _i783 < _map782.Count; ++_i783)
                    {
                      long _key784;
                      List<UCell> _val785;
                      _key784 = await iprot.ReadI64Async(cancellationToken);
                      {
                        TList _list786 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val785 = new List<UCell>(_list786.Count);
                        for(int _i787 = 0; _i787 < _list786.Count; ++_i787)
                        {
                          UCell _elem788;
                          _elem788 = new UCell();
                          await _elem788.ReadAsync(iprot, cancellationToken);
                          _val785.Add(_elem788);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key784] = _val785;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp789 = new TStruct("update_args");
          await oprot.WriteStructBeginAsync(tmp789, cancellationToken);
          var tmp790 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp790.Name = "cells";
            tmp790.Type = TType.Map;
            tmp790.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp790, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
              foreach (long _iter791 in Cells.Keys)
              {
                await oprot.WriteI64Async(_iter791, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter791].Count), cancellationToken);
                  foreach (UCell _iter792 in Cells[_iter791])
                  {
                    await _iter792.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp790.Name = "updater_id";
            tmp790.Type = TType.I64;
            tmp790.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp790, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp793 = new StringBuilder("update_args(");
        int tmp794 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp794++) { tmp793.Append(", "); }
          tmp793.Append("Cells: ");
          Cells.ToString(tmp793);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp794++) { tmp793.Append(", "); }
          tmp793.Append("Updater_id: ");
          Updater_id.ToString(tmp793);
        }
        tmp793.Append(')');
        return tmp793.ToString();
      }
    }


    public partial class update_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_result()
      {
      }

      public update_result DeepCopy()
      {
        var tmp795 = new update_result();
        if((E != null) && __isset.e)
        {
          tmp795.E = (Exception)this.E.DeepCopy();
        }
        tmp795.__isset.e = this.__isset.e;
        return tmp795;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp796 = new TStruct("update_result");
          await oprot.WriteStructBeginAsync(tmp796, cancellationToken);
          var tmp797 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp797.Name = "E";
              tmp797.Type = TType.Struct;
              tmp797.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp797, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp798 = new StringBuilder("update_result(");
        int tmp799 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp799++) { tmp798.Append(", "); }
          tmp798.Append("E: ");
          E.ToString(tmp798);
        }
        tmp798.Append(')');
        return tmp798.ToString();
      }
    }


    public partial class update_serial_args : TBase
    {
      private Dictionary<long, List<UCellSerial>> _cells;
      private long _updater_id;

      /// <summary>
      /// The Serial Cells to update
      /// </summary>
      public Dictionary<long, List<UCellSerial>> Cells
      {
        get
        {
          return _cells;
        }
        set
        {
          __isset.cells = true;
          this._cells = value;
        }
      }

      /// <summary>
      /// The Updater ID to use for write
      /// </summary>
      public long Updater_id
      {
        get
        {
          return _updater_id;
        }
        set
        {
          __isset.updater_id = true;
          this._updater_id = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool cells;
        public bool updater_id;
      }

      public update_serial_args()
      {
        this._updater_id = 0;
        this.__isset.updater_id = true;
      }

      public update_serial_args DeepCopy()
      {
        var tmp800 = new update_serial_args();
        if((Cells != null) && __isset.cells)
        {
          tmp800.Cells = this.Cells.DeepCopy();
        }
        tmp800.__isset.cells = this.__isset.cells;
        if(__isset.updater_id)
        {
          tmp800.Updater_id = this.Updater_id;
        }
        tmp800.__isset.updater_id = this.__isset.updater_id;
        return tmp800;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map801 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Cells = new Dictionary<long, List<UCellSerial>>(_map801.Count);
                    for(int _i802 = 0; _i802 < _map801.Count; ++_i802)
                    {
                      long _key803;
                      List<UCellSerial> _val804;
                      _key803 = await iprot.ReadI64Async(cancellationToken);
                      {
                        TList _list805 = await iprot.ReadListBeginAsync(cancellationToken);
                        _val804 = new List<UCellSerial>(_list805.Count);
                        for(int _i806 = 0; _i806 < _list805.Count; ++_i806)
                        {
                          UCellSerial _elem807;
                          _elem807 = new UCellSerial();
                          await _elem807.ReadAsync(iprot, cancellationToken);
                          _val804.Add(_elem807);
                        }
                        await iprot.ReadListEndAsync(cancellationToken);
                      }
                      Cells[_key803] = _val804;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  Updater_id = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp808 = new TStruct("update_serial_args");
          await oprot.WriteStructBeginAsync(tmp808, cancellationToken);
          var tmp809 = new TField();
          if((Cells != null) && __isset.cells)
          {
            tmp809.Name = "cells";
            tmp809.Type = TType.Map;
            tmp809.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
            {
              await oprot.WriteMapBeginAsync(new TMap(TType.I64, TType.List, Cells.Count), cancellationToken);
              foreach (long _iter810 in Cells.Keys)
              {
                await oprot.WriteI64Async(_iter810, cancellationToken);
                {
                  await oprot.WriteListBeginAsync(new TList(TType.Struct, Cells[_iter810].Count), cancellationToken);
                  foreach (UCellSerial _iter811 in Cells[_iter810])
                  {
                    await _iter811.WriteAsync(oprot, cancellationToken);
                  }
                  await oprot.WriteListEndAsync(cancellationToken);
                }
              }
              await oprot.WriteMapEndAsync(cancellationToken);
            }
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.updater_id)
          {
            tmp809.Name = "updater_id";
            tmp809.Type = TType.I64;
            tmp809.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp809, cancellationToken);
            await oprot.WriteI64Async(Updater_id, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.cells == other.__isset.cells) && ((!__isset.cells) || (System.Object.Equals(Cells, other.Cells))))
          && ((__isset.updater_id == other.__isset.updater_id) && ((!__isset.updater_id) || (System.Object.Equals(Updater_id, other.Updater_id))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Cells != null) && __isset.cells)
          {
            hashcode = (hashcode * 397) + Cells.GetHashCode();
          }
          if(__isset.updater_id)
          {
            hashcode = (hashcode * 397) + Updater_id.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp812 = new StringBuilder("update_serial_args(");
        int tmp813 = 0;
        if((Cells != null) && __isset.cells)
        {
          if(0 < tmp813++) { tmp812.Append(", "); }
          tmp812.Append("Cells: ");
          Cells.ToString(tmp812);
        }
        if(__isset.updater_id)
        {
          if(0 < tmp813++) { tmp812.Append(", "); }
          tmp812.Append("Updater_id: ");
          Updater_id.ToString(tmp812);
        }
        tmp812.Append(')');
        return tmp812.ToString();
      }
    }


    public partial class update_serial_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public update_serial_result()
      {
      }

      public update_serial_result DeepCopy()
      {
        var tmp814 = new update_serial_result();
        if((E != null) && __isset.e)
        {
          tmp814.E = (Exception)this.E.DeepCopy();
        }
        tmp814.__isset.e = this.__isset.e;
        return tmp814;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp815 = new TStruct("update_serial_result");
          await oprot.WriteStructBeginAsync(tmp815, cancellationToken);
          var tmp816 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp816.Name = "E";
              tmp816.Type = TType.Struct;
              tmp816.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp816, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is update_serial_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp817 = new StringBuilder("update_serial_result(");
        int tmp818 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp818++) { tmp817.Append(", "); }
          tmp817.Append("E: ");
          E.ToString(tmp817);
        }
        tmp817.Append(')');
        return tmp817.ToString();
      }
    }


    public partial class mng_column_args : TBase
    {
      private SchemaFunc _func;
      private Schema _schema;

      /// <summary>
      /// The Action Function to use
      /// 
      /// <seealso cref="global::.SchemaFunc"/>
      /// </summary>
      public SchemaFunc Func
      {
        get
        {
          return _func;
        }
        set
        {
          __isset.func = true;
          this._func = value;
        }
      }

      /// <summary>
      /// The Schema for the Action
      /// </summary>
      public Schema Schema
      {
        get
        {
          return _schema;
        }
        set
        {
          __isset.schema = true;
          this._schema = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool func;
        public bool schema;
      }

      public mng_column_args()
      {
      }

      public mng_column_args DeepCopy()
      {
        var tmp819 = new mng_column_args();
        if(__isset.func)
        {
          tmp819.Func = this.Func;
        }
        tmp819.__isset.func = this.__isset.func;
        if((Schema != null) && __isset.schema)
        {
          tmp819.Schema = (Schema)this.Schema.DeepCopy();
        }
        tmp819.__isset.schema = this.__isset.schema;
        return tmp819;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I32)
                {
                  Func = (SchemaFunc)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Schema = new Schema();
                  await Schema.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp820 = new TStruct("mng_column_args");
          await oprot.WriteStructBeginAsync(tmp820, cancellationToken);
          var tmp821 = new TField();
          if(__isset.func)
          {
            tmp821.Name = "func";
            tmp821.Type = TType.I32;
            tmp821.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp821, cancellationToken);
            await oprot.WriteI32Async((int)Func, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if((Schema != null) && __isset.schema)
          {
            tmp821.Name = "schema";
            tmp821.Type = TType.Struct;
            tmp821.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp821, cancellationToken);
            await Schema.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.func == other.__isset.func) && ((!__isset.func) || (System.Object.Equals(Func, other.Func))))
          && ((__isset.schema == other.__isset.schema) && ((!__isset.schema) || (System.Object.Equals(Schema, other.Schema))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.func)
          {
            hashcode = (hashcode * 397) + Func.GetHashCode();
          }
          if((Schema != null) && __isset.schema)
          {
            hashcode = (hashcode * 397) + Schema.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp822 = new StringBuilder("mng_column_args(");
        int tmp823 = 0;
        if(__isset.func)
        {
          if(0 < tmp823++) { tmp822.Append(", "); }
          tmp822.Append("Func: ");
          Func.ToString(tmp822);
        }
        if((Schema != null) && __isset.schema)
        {
          if(0 < tmp823++) { tmp822.Append(", "); }
          tmp822.Append("Schema: ");
          Schema.ToString(tmp822);
        }
        tmp822.Append(')');
        return tmp822.ToString();
      }
    }


    public partial class mng_column_result : TBase
    {
      private Exception _e;

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool e;
      }

      public mng_column_result()
      {
      }

      public mng_column_result DeepCopy()
      {
        var tmp824 = new mng_column_result();
        if((E != null) && __isset.e)
        {
          tmp824.E = (Exception)this.E.DeepCopy();
        }
        tmp824.__isset.e = this.__isset.e;
        return tmp824;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp825 = new TStruct("mng_column_result");
          await oprot.WriteStructBeginAsync(tmp825, cancellationToken);
          var tmp826 = new TField();

          if(this.__isset.e)
          {
            if (E != null)
            {
              tmp826.Name = "E";
              tmp826.Type = TType.Struct;
              tmp826.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp826, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is mng_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp827 = new StringBuilder("mng_column_result(");
        int tmp828 = 0;
        if((E != null) && __isset.e)
        {
          if(0 < tmp828++) { tmp827.Append(", "); }
          tmp827.Append("E: ");
          E.ToString(tmp827);
        }
        tmp827.Append(')');
        return tmp827.ToString();
      }
    }


    public partial class list_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match Schema for response
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public list_columns_args()
      {
      }

      public list_columns_args DeepCopy()
      {
        var tmp829 = new list_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp829.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp829.__isset.spec = this.__isset.spec;
        return tmp829;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp830 = new TStruct("list_columns_args");
          await oprot.WriteStructBeginAsync(tmp830, cancellationToken);
          var tmp831 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp831.Name = "spec";
            tmp831.Type = TType.Struct;
            tmp831.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp831, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp832 = new StringBuilder("list_columns_args(");
        int tmp833 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp833++) { tmp832.Append(", "); }
          tmp832.Append("Spec: ");
          Spec.ToString(tmp832);
        }
        tmp832.Append(')');
        return tmp832.ToString();
      }
    }


    public partial class list_columns_result : TBase
    {
      private List<Schema> _success;
      private Exception _e;

      public List<Schema> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public list_columns_result()
      {
      }

      public list_columns_result DeepCopy()
      {
        var tmp834 = new list_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp834.Success = this.Success.DeepCopy();
        }
        tmp834.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp834.E = (Exception)this.E.DeepCopy();
        }
        tmp834.__isset.e = this.__isset.e;
        return tmp834;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list835 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<Schema>(_list835.Count);
                    for(int _i836 = 0; _i836 < _list835.Count; ++_i836)
                    {
                      Schema _elem837;
                      _elem837 = new Schema();
                      await _elem837.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem837);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp838 = new TStruct("list_columns_result");
          await oprot.WriteStructBeginAsync(tmp838, cancellationToken);
          var tmp839 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp839.Name = "Success";
              tmp839.Type = TType.List;
              tmp839.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (Schema _iter840 in Success)
                {
                  await _iter840.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp839.Name = "E";
              tmp839.Type = TType.Struct;
              tmp839.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp839, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is list_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp841 = new StringBuilder("list_columns_result(");
        int tmp842 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("Success: ");
          Success.ToString(tmp841);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp842++) { tmp841.Append(", "); }
          tmp841.Append("E: ");
          E.ToString(tmp841);
        }
        tmp841.Append(')');
        return tmp841.ToString();
      }
    }


    public partial class compact_columns_args : TBase
    {
      private SpecSchemas _spec;

      /// <summary>
      /// The Schemas Specifications to match columns to Compact
      /// </summary>
      public SpecSchemas Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public compact_columns_args()
      {
      }

      public compact_columns_args DeepCopy()
      {
        var tmp843 = new compact_columns_args();
        if((Spec != null) && __isset.spec)
        {
          tmp843.Spec = (SpecSchemas)this.Spec.DeepCopy();
        }
        tmp843.__isset.spec = this.__isset.spec;
        return tmp843;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecSchemas();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp844 = new TStruct("compact_columns_args");
          await oprot.WriteStructBeginAsync(tmp844, cancellationToken);
          var tmp845 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp845.Name = "spec";
            tmp845.Type = TType.Struct;
            tmp845.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp845, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp846 = new StringBuilder("compact_columns_args(");
        int tmp847 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp847++) { tmp846.Append(", "); }
          tmp846.Append("Spec: ");
          Spec.ToString(tmp846);
        }
        tmp846.Append(')');
        return tmp846.ToString();
      }
    }


    public partial class compact_columns_result : TBase
    {
      private List<CompactResult> _success;
      private Exception _e;

      public List<CompactResult> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public compact_columns_result()
      {
      }

      public compact_columns_result DeepCopy()
      {
        var tmp848 = new compact_columns_result();
        if((Success != null) && __isset.success)
        {
          tmp848.Success = this.Success.DeepCopy();
        }
        tmp848.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp848.E = (Exception)this.E.DeepCopy();
        }
        tmp848.__isset.e = this.__isset.e;
        return tmp848;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list849 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<CompactResult>(_list849.Count);
                    for(int _i850 = 0; _i850 < _list849.Count; ++_i850)
                    {
                      CompactResult _elem851;
                      _elem851 = new CompactResult();
                      await _elem851.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem851);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp852 = new TStruct("compact_columns_result");
          await oprot.WriteStructBeginAsync(tmp852, cancellationToken);
          var tmp853 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp853.Name = "Success";
              tmp853.Type = TType.List;
              tmp853.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (CompactResult _iter854 in Success)
                {
                  await _iter854.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp853.Name = "E";
              tmp853.Type = TType.Struct;
              tmp853.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp853, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is compact_columns_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp855 = new StringBuilder("compact_columns_result(");
        int tmp856 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp856++) { tmp855.Append(", "); }
          tmp855.Append("Success: ");
          Success.ToString(tmp855);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp856++) { tmp855.Append(", "); }
          tmp855.Append("E: ");
          E.ToString(tmp855);
        }
        tmp855.Append(')');
        return tmp855.ToString();
      }
    }


    public partial class scan_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_args()
      {
      }

      public scan_args DeepCopy()
      {
        var tmp857 = new scan_args();
        if((Spec != null) && __isset.spec)
        {
          tmp857.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp857.__isset.spec = this.__isset.spec;
        return tmp857;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp858 = new TStruct("scan_args");
          await oprot.WriteStructBeginAsync(tmp858, cancellationToken);
          var tmp859 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp859.Name = "spec";
            tmp859.Type = TType.Struct;
            tmp859.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp859, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp860 = new StringBuilder("scan_args(");
        int tmp861 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp861++) { tmp860.Append(", "); }
          tmp860.Append("Spec: ");
          Spec.ToString(tmp860);
        }
        tmp860.Append(')');
        return tmp860.ToString();
      }
    }


    public partial class scan_result : TBase
    {
      private Cells _success;
      private Exception _e;

      public Cells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_result()
      {
      }

      public scan_result DeepCopy()
      {
        var tmp862 = new scan_result();
        if((Success != null) && __isset.success)
        {
          tmp862.Success = (Cells)this.Success.DeepCopy();
        }
        tmp862.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp862.E = (Exception)this.E.DeepCopy();
        }
        tmp862.__isset.e = this.__isset.e;
        return tmp862;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new Cells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp863 = new TStruct("scan_result");
          await oprot.WriteStructBeginAsync(tmp863, cancellationToken);
          var tmp864 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp864.Name = "Success";
              tmp864.Type = TType.Struct;
              tmp864.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp864.Name = "E";
              tmp864.Type = TType.Struct;
              tmp864.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp864, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp865 = new StringBuilder("scan_result(");
        int tmp866 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp866++) { tmp865.Append(", "); }
          tmp865.Append("Success: ");
          Success.ToString(tmp865);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp866++) { tmp865.Append(", "); }
          tmp865.Append("E: ");
          E.ToString(tmp865);
        }
        tmp865.Append(')');
        return tmp865.ToString();
      }
    }


    public partial class scan_rslt_on_column_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_column_args()
      {
      }

      public scan_rslt_on_column_args DeepCopy()
      {
        var tmp867 = new scan_rslt_on_column_args();
        if((Spec != null) && __isset.spec)
        {
          tmp867.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp867.__isset.spec = this.__isset.spec;
        return tmp867;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp868 = new TStruct("scan_rslt_on_column_args");
          await oprot.WriteStructBeginAsync(tmp868, cancellationToken);
          var tmp869 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp869.Name = "spec";
            tmp869.Type = TType.Struct;
            tmp869.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp869, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp870 = new StringBuilder("scan_rslt_on_column_args(");
        int tmp871 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp871++) { tmp870.Append(", "); }
          tmp870.Append("Spec: ");
          Spec.ToString(tmp870);
        }
        tmp870.Append(')');
        return tmp870.ToString();
      }
    }


    public partial class scan_rslt_on_column_result : TBase
    {
      private Dictionary<string, ColCells> _success;
      private Exception _e;

      public Dictionary<string, ColCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_column_result()
      {
      }

      public scan_rslt_on_column_result DeepCopy()
      {
        var tmp872 = new scan_rslt_on_column_result();
        if((Success != null) && __isset.success)
        {
          tmp872.Success = this.Success.DeepCopy();
        }
        tmp872.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp872.E = (Exception)this.E.DeepCopy();
        }
        tmp872.__isset.e = this.__isset.e;
        return tmp872;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Map)
                {
                  {
                    TMap _map873 = await iprot.ReadMapBeginAsync(cancellationToken);
                    Success = new Dictionary<string, ColCells>(_map873.Count);
                    for(int _i874 = 0; _i874 < _map873.Count; ++_i874)
                    {
                      string _key875;
                      ColCells _val876;
                      _key875 = await iprot.ReadStringAsync(cancellationToken);
                      _val876 = new ColCells();
                      await _val876.ReadAsync(iprot, cancellationToken);
                      Success[_key875] = _val876;
                    }
                    await iprot.ReadMapEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp877 = new TStruct("scan_rslt_on_column_result");
          await oprot.WriteStructBeginAsync(tmp877, cancellationToken);
          var tmp878 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp878.Name = "Success";
              tmp878.Type = TType.Map;
              tmp878.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp878, cancellationToken);
              {
                await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.Struct, Success.Count), cancellationToken);
                foreach (string _iter879 in Success.Keys)
                {
                  await oprot.WriteStringAsync(_iter879, cancellationToken);
                  await Success[_iter879].WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteMapEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp878.Name = "E";
              tmp878.Type = TType.Struct;
              tmp878.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp878, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_column_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp880 = new StringBuilder("scan_rslt_on_column_result(");
        int tmp881 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp881++) { tmp880.Append(", "); }
          tmp880.Append("Success: ");
          Success.ToString(tmp880);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp881++) { tmp880.Append(", "); }
          tmp880.Append("E: ");
          E.ToString(tmp880);
        }
        tmp880.Append(')');
        return tmp880.ToString();
      }
    }


    public partial class scan_rslt_on_key_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_key_args()
      {
      }

      public scan_rslt_on_key_args DeepCopy()
      {
        var tmp882 = new scan_rslt_on_key_args();
        if((Spec != null) && __isset.spec)
        {
          tmp882.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp882.__isset.spec = this.__isset.spec;
        return tmp882;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp883 = new TStruct("scan_rslt_on_key_args");
          await oprot.WriteStructBeginAsync(tmp883, cancellationToken);
          var tmp884 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp884.Name = "spec";
            tmp884.Type = TType.Struct;
            tmp884.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp884, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp885 = new StringBuilder("scan_rslt_on_key_args(");
        int tmp886 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp886++) { tmp885.Append(", "); }
          tmp885.Append("Spec: ");
          Spec.ToString(tmp885);
        }
        tmp885.Append(')');
        return tmp885.ToString();
      }
    }


    public partial class scan_rslt_on_key_result : TBase
    {
      private List<kCells> _success;
      private Exception _e;

      public List<kCells> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_key_result()
      {
      }

      public scan_rslt_on_key_result DeepCopy()
      {
        var tmp887 = new scan_rslt_on_key_result();
        if((Success != null) && __isset.success)
        {
          tmp887.Success = this.Success.DeepCopy();
        }
        tmp887.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp887.E = (Exception)this.E.DeepCopy();
        }
        tmp887.__isset.e = this.__isset.e;
        return tmp887;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List)
                {
                  {
                    TList _list888 = await iprot.ReadListBeginAsync(cancellationToken);
                    Success = new List<kCells>(_list888.Count);
                    for(int _i889 = 0; _i889 < _list888.Count; ++_i889)
                    {
                      kCells _elem890;
                      _elem890 = new kCells();
                      await _elem890.ReadAsync(iprot, cancellationToken);
                      Success.Add(_elem890);
                    }
                    await iprot.ReadListEndAsync(cancellationToken);
                  }
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp891 = new TStruct("scan_rslt_on_key_result");
          await oprot.WriteStructBeginAsync(tmp891, cancellationToken);
          var tmp892 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp892.Name = "Success";
              tmp892.Type = TType.List;
              tmp892.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp892, cancellationToken);
              {
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (kCells _iter893 in Success)
                {
                  await _iter893.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
              }
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp892.Name = "E";
              tmp892.Type = TType.Struct;
              tmp892.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp892, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_key_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp894 = new StringBuilder("scan_rslt_on_key_result(");
        int tmp895 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp895++) { tmp894.Append(", "); }
          tmp894.Append("Success: ");
          Success.ToString(tmp894);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp895++) { tmp894.Append(", "); }
          tmp894.Append("E: ");
          E.ToString(tmp894);
        }
        tmp894.Append(')');
        return tmp894.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_args : TBase
    {
      private SpecScan _spec;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
      }

      public scan_rslt_on_fraction_args()
      {
      }

      public scan_rslt_on_fraction_args DeepCopy()
      {
        var tmp896 = new scan_rslt_on_fraction_args();
        if((Spec != null) && __isset.spec)
        {
          tmp896.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp896.__isset.spec = this.__isset.spec;
        return tmp896;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp897 = new TStruct("scan_rslt_on_fraction_args");
          await oprot.WriteStructBeginAsync(tmp897, cancellationToken);
          var tmp898 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp898.Name = "spec";
            tmp898.Type = TType.Struct;
            tmp898.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp898, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp899 = new StringBuilder("scan_rslt_on_fraction_args(");
        int tmp900 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp900++) { tmp899.Append(", "); }
          tmp899.Append("Spec: ");
          Spec.ToString(tmp899);
        }
        tmp899.Append(')');
        return tmp899.ToString();
      }
    }


    public partial class scan_rslt_on_fraction_result : TBase
    {
      private FCells _success;
      private Exception _e;

      public FCells Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_fraction_result()
      {
      }

      public scan_rslt_on_fraction_result DeepCopy()
      {
        var tmp901 = new scan_rslt_on_fraction_result();
        if((Success != null) && __isset.success)
        {
          tmp901.Success = (FCells)this.Success.DeepCopy();
        }
        tmp901.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp901.E = (Exception)this.E.DeepCopy();
        }
        tmp901.__isset.e = this.__isset.e;
        return tmp901;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new FCells();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp902 = new TStruct("scan_rslt_on_fraction_result");
          await oprot.WriteStructBeginAsync(tmp902, cancellationToken);
          var tmp903 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp903.Name = "Success";
              tmp903.Type = TType.Struct;
              tmp903.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp903, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp903.Name = "E";
              tmp903.Type = TType.Struct;
              tmp903.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp903, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_fraction_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp904 = new StringBuilder("scan_rslt_on_fraction_result(");
        int tmp905 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp905++) { tmp904.Append(", "); }
          tmp904.Append("Success: ");
          Success.ToString(tmp904);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp905++) { tmp904.Append(", "); }
          tmp904.Append("E: ");
          E.ToString(tmp904);
        }
        tmp904.Append(')');
        return tmp904.ToString();
      }
    }


    public partial class scan_rslt_on_args : TBase
    {
      private SpecScan _spec;
      private CellsResult _rslt;

      /// <summary>
      /// The Scan Specifications for the scan
      /// </summary>
      public SpecScan Spec
      {
        get
        {
          return _spec;
        }
        set
        {
          __isset.spec = true;
          this._spec = value;
        }
      }

      /// <summary>
      /// The Type of Cells Result for the response
      /// 
      /// <seealso cref="global::.CellsResult"/>
      /// </summary>
      public CellsResult Rslt
      {
        get
        {
          return _rslt;
        }
        set
        {
          __isset.rslt = true;
          this._rslt = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool spec;
        public bool rslt;
      }

      public scan_rslt_on_args()
      {
      }

      public scan_rslt_on_args DeepCopy()
      {
        var tmp906 = new scan_rslt_on_args();
        if((Spec != null) && __isset.spec)
        {
          tmp906.Spec = (SpecScan)this.Spec.DeepCopy();
        }
        tmp906.__isset.spec = this.__isset.spec;
        if(__isset.rslt)
        {
          tmp906.Rslt = this.Rslt;
        }
        tmp906.__isset.rslt = this.__isset.rslt;
        return tmp906;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct)
                {
                  Spec = new SpecScan();
                  await Spec.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  Rslt = (CellsResult)await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp907 = new TStruct("scan_rslt_on_args");
          await oprot.WriteStructBeginAsync(tmp907, cancellationToken);
          var tmp908 = new TField();
          if((Spec != null) && __isset.spec)
          {
            tmp908.Name = "spec";
            tmp908.Type = TType.Struct;
            tmp908.ID = 1;
            await oprot.WriteFieldBeginAsync(tmp908, cancellationToken);
            await Spec.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if(__isset.rslt)
          {
            tmp908.Name = "rslt";
            tmp908.Type = TType.I32;
            tmp908.ID = 2;
            await oprot.WriteFieldBeginAsync(tmp908, cancellationToken);
            await oprot.WriteI32Async((int)Rslt, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_args other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.spec == other.__isset.spec) && ((!__isset.spec) || (System.Object.Equals(Spec, other.Spec))))
          && ((__isset.rslt == other.__isset.rslt) && ((!__isset.rslt) || (System.Object.Equals(Rslt, other.Rslt))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Spec != null) && __isset.spec)
          {
            hashcode = (hashcode * 397) + Spec.GetHashCode();
          }
          if(__isset.rslt)
          {
            hashcode = (hashcode * 397) + Rslt.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp909 = new StringBuilder("scan_rslt_on_args(");
        int tmp910 = 0;
        if((Spec != null) && __isset.spec)
        {
          if(0 < tmp910++) { tmp909.Append(", "); }
          tmp909.Append("Spec: ");
          Spec.ToString(tmp909);
        }
        if(__isset.rslt)
        {
          if(0 < tmp910++) { tmp909.Append(", "); }
          tmp909.Append("Rslt: ");
          Rslt.ToString(tmp909);
        }
        tmp909.Append(')');
        return tmp909.ToString();
      }
    }


    public partial class scan_rslt_on_result : TBase
    {
      private CellsGroup _success;
      private Exception _e;

      public CellsGroup Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      /// <summary>
      /// The Base Exception
      /// </summary>
      public Exception E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
        public bool e;
      }

      public scan_rslt_on_result()
      {
      }

      public scan_rslt_on_result DeepCopy()
      {
        var tmp911 = new scan_rslt_on_result();
        if((Success != null) && __isset.success)
        {
          tmp911.Success = (CellsGroup)this.Success.DeepCopy();
        }
        tmp911.__isset.success = this.__isset.success;
        if((E != null) && __isset.e)
        {
          tmp911.E = (Exception)this.E.DeepCopy();
        }
        tmp911.__isset.e = this.__isset.e;
        return tmp911;
      }

      public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new CellsGroup();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 1:
                if (field.Type == TType.Struct)
                {
                  E = new Exception();
                  await E.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var tmp912 = new TStruct("scan_rslt_on_result");
          await oprot.WriteStructBeginAsync(tmp912, cancellationToken);
          var tmp913 = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              tmp913.Name = "Success";
              tmp913.Type = TType.Struct;
              tmp913.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp913, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          else if(this.__isset.e)
          {
            if (E != null)
            {
              tmp913.Name = "E";
              tmp913.Type = TType.Struct;
              tmp913.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp913, cancellationToken);
              await E.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        if (!(that is scan_rslt_on_result other)) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))))
          && ((__isset.e == other.__isset.e) && ((!__isset.e) || (System.Object.Equals(E, other.E))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if((Success != null) && __isset.success)
          {
            hashcode = (hashcode * 397) + Success.GetHashCode();
          }
          if((E != null) && __isset.e)
          {
            hashcode = (hashcode * 397) + E.GetHashCode();
          }
        }
        return hashcode;
      }

      public override string ToString()
      {
        var tmp914 = new StringBuilder("scan_rslt_on_result(");
        int tmp915 = 0;
        if((Success != null) && __isset.success)
        {
          if(0 < tmp915++) { tmp914.Append(", "); }
          tmp914.Append("Success: ");
          Success.ToString(tmp914);
        }
        if((E != null) && __isset.e)
        {
          if(0 < tmp915++) { tmp914.Append(", "); }
          tmp914.Append("E: ");
          E.ToString(tmp914);
        }
        tmp914.Append(')');
        return tmp914.ToString();
      }
    }

  }

}
