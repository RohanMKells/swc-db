#!/usr/bin/env python3
# -- coding: utf-8 --
# Copyright Since 2019 SWC-DBÂ© [author: Kashirin Alex kashirin.alex@gmail.com]


import os, sys, time
import fabric, fabric.main, fabric.executor


swcdb_install_path = os.path.abspath(
    os.path.dirname(os.path.abspath(__file__)) + "/../..")

# configurations 

swcdb_role_delay_start = 2 # seconds

swcdb_logging_path = swcdb_install_path + "/var/log/swcdb"

#   (host,    port|default(0),    on_addr|default)
swcdb_managers = [ 
    ("ns1-1.thither.direct", 0, False), 
]

swcdb_rangers = [
    ("ns1-1.thither.direct", 0, False), 
    #("ns1-2.thither.direct", 0, False), 
    #("ns2-1.thither.direct", 0, False), 
    #("ns2-2.thither.direct", 0, False), 
]

swcdb_thriftbrokers = [
    ("ns1-1.thither.direct", 0, False), 
    #("ns1-2.thither.direct", 0, False), 
    #("ns2-1.thither.direct", 0, False), 
    #("ns2-2.thither.direct", 0, False), 
]

# [host, ]
swcdb_fsbrokers = list(set(
    [addr[0] for addr in swcdb_managers] + 
    [addr[0] for addr in swcdb_rangers] +
    [] # + additional
))



swcdb_source_host = os.uname()[1]
swcdb_remote_hosts = list(set(
    host for host in [
        addr[0] for addr in swcdb_thriftbrokers] +
        swcdb_fsbrokers
        if host != swcdb_source_host
))



# common-utils
def swcdb_print_start(task, c):
    print(task + " S(" + c.host + ":" + str(c.port) + ")")
    #

def swcdb_print_result(task, c, r):
    print(task + " R(" + c.host + ":" + str(c.port) + "): " + r)
    #

def swcdb_print_finish(task, c):
    print(task + " F(" + c.host + ":" + str(c.port) + ")")
    #

def swcdb_print(task, c, res=None):
    swcdb_print_start(task, c)
    if res:
        for o in res.stdout.strip().split("\n") + \
                 res.stderr.strip().split("\n"):
            if o:
                swcdb_print_result(task, c, o)
    swcdb_print_finish(task, c)
    #

def swcdb_proc_pids(name, c):
    res = c.run(
        "ps aux| grep " + swcdb_install_path + "/bin/" + name + 
        " | grep -v grep| tr -s ' '| cut -f2 -d' '",
        hide=True)
    return [pid for pid in res.stdout.strip().split("\n") if pid]
    #

def swcdb_stop_proc(task, name, c):
    swcdb_print_start(task, c)
    pids = swcdb_proc_pids(name, c)
    for pid in pids:
        kres = c.run("kill " + pid, hide=True)
        swcdb_print_result(
            task, c, 
            "SIGINT pid(" + pid + ") " + 
            kres.stdout.strip() + " " + 
            kres.stderr.strip()
        )
            
    if pids:
        check = 0
        time.sleep(1)
        while swcdb_proc_pids(name, c):
            check += 1 
            swcdb_print_result(task, c, "wait check=" + str(check))
            time.sleep(2)
    else:
        swcdb_print_result(task, c, "not-running")
    swcdb_print_finish(task, c)
    #



# DEPLOY


@fabric.task(hosts=[swcdb_source_host])
def deploy(ctx):
    ctx.local("mkdir -p " + swcdb_logging_path)
    for host in swcdb_remote_hosts:
        with fabric.Connection(host) as c:
            deploy_host(c)
    #

def deploy_host(c):
    swcdb_print_start("deploy", c)
    c.run("mkdir -p " + swcdb_logging_path)
    for dir in ["sbin", "bin", "etc", "lib", "include"]:
        for dpath, _, filenames in os.walk(swcdb_install_path + "/" + dir):
            c.run("mkdir -p " + dpath)
            for fname in filenames:
                c.put(
                    dpath + "/" + fname, 
                    dpath + "/" + fname, 
                    preserve_mode=True
                )
    swcdb_print_finish("deploy", c)
    #

@fabric.task
def push_config(ctx):
    for host in swcdb_remote_hosts:
        with fabric.Connection(host) as c:
            push_config_host(c)
    #

def push_config_host(c):
    swcdb_print_start("push_config", c)
    for dpath, _, filenames in os.walk(swcdb_install_path + "/etc"):
        c.run("mkdir -p " + dpath)
        for fname in filenames:
            c.put(
                dpath + "/" + fname, 
                dpath + "/" + fname, 
                preserve_mode=True
            )
    swcdb_print_finish("push_config", c)
    #



# swcdbFsBroker

@fabric.task
def start_fsbrokers(c):
    results = fabric.ThreadingGroup(*swcdb_fsbrokers).run(
        " ".join([swcdb_install_path+"/bin/swcdbFsBroker", "--daemon"]), 
        hide=True
    )
    for c in results:
        swcdb_print("start-fsbrokers", c, results[c])
    #

@fabric.task
def stop_fsbrokers(c):
    for host in swcdb_fsbrokers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("stop-fsbrokers", "swcdbFsBroker", c)
    #



# swcdbManager

@fabric.task
def start_managers(c):
    for host, port, on_addr in swcdb_managers:
        with fabric.Connection(host) as c:
            swcdb_print("start-managers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbManager",
                    ("--host=" + host + (":"+str(port) if port != 0 else "") 
                    if on_addr else ""),
                    "--daemon"]), 
                hide=True)
            )
    #

@fabric.task
def stop_managers(c):
    for host, port, on_addr in swcdb_managers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("stop-managers", "swcdbManager", c)
    #



# swcdbRanger

@fabric.task
def start_rangers(c):
    for host, port, on_addr in swcdb_rangers:
        with fabric.Connection(host) as c:
            swcdb_print("start-rangers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbRanger",
                    ("--host=" + host + (":"+str(port) if port != 0 else "") 
                        if on_addr else ""),
                    "--daemon"]), 
                hide=True)
            )
    #

@fabric.task
def stop_rangers(c):
    for host, port, on_addr in swcdb_rangers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("stop-rangers", "swcdbRanger", c)
    #



# swcdbThriftBroker

@fabric.task
def start_thriftbrokers(c):
    for host, port, on_addr in swcdb_thriftbrokers:
        with fabric.Connection(host) as c:
            swcdb_print("start-thriftbrokers", c, c.run(
                " ".join([
                    swcdb_install_path+"/bin/swcdbThriftBroker",
                    "--host=" + (host if on_addr else "localhost") +
                                (":"+str(port) if port != 0 else ""),
                    "--daemon"]), 
                hide=True)
            )
    #

@fabric.task
def stop_thriftbrokers(c):
    for host, port, on_addr in swcdb_thriftbrokers:
        with fabric.Connection(host) as c:
            swcdb_stop_proc("stop-thriftbrokers", "swcdbThriftBroker", c)
    #



# START

@fabric.task
def start(c):
    for name, run in [
            ("fsbrokers",       start_fsbrokers),
            ("managers",        start_managers),
            ("rangers",         start_rangers),
            ("thriftbrokers",   start_thriftbrokers) ]:
        print("-- starting " + name +" --")
        run(c)
        time.sleep(swcdb_role_delay_start)
    #



# STOP

@fabric.task
def stop(c):
    for name, run in [
            ("thriftbrokers",   stop_thriftbrokers),
            ("rangers",         stop_rangers),
            ("managers",        stop_managers),
            ("fsbrokers",       stop_fsbrokers) ]:
        print("-- stopping " + name +" --")
        run(c)
    #



#@fabric.task(hosts=[swcdb_managers[0]])
#def stop(c):
# ./swcdb -manager stop_cluster




@fabric.task
def shell(c):
    while True:
        cmd = input("# ")
        if not cmd.strip() or cmd.startswith("\x1b"):
            continue
        if cmd.lower().strip() in ["q", "quit"]:
            break
       
        results = fabric.ThreadingGroup(
            *(swcdb_remote_hosts + [swcdb_source_host])
        ).run(cmd, hide=True) # "echo '#' `hostname` && " + 
       
        for c in results:
            print("on (" + c.host + ":" + str(c.port) + "): ")
            for o in results[c].stdout.strip().split("\n") + \
                     results[c].stderr.strip().split("\n"):
               if o:
                print("  ", o)
    #



if __name__ == '__main__':
    fabric.main.Fab(
        name="swcdb_cluster",
        namespace=fabric.main.Collection.from_module(sys.modules[__name__]), 
        version='0.0.1',

        executor_class=fabric.executor.Executor,
        config_class=fabric.Config
    ).run()

